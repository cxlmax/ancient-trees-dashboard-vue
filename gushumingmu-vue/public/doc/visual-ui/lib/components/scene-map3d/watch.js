"use strict";Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const i=require("lodash"),b=require("three"),l=require("vue"),M=require("./map3d/module/FloorRotateBorder.js"),w=require("./map3d/module/FloorGridRipple.js"),q=require("./map3d/module/Particles.js"),v=require("./map3d/module/Environment.js"),E=(a,t,D,y,f)=>{l.watch(()=>i.cloneDeep(a.basicOption.map.depth),(e,c)=>{try{!i.isEqual(e,c)&&t.value&&f()}catch{}},{deep:!0}),l.watch(()=>i.cloneDeep(a.basicOption.scene.defaultMapAdcode),(e,c)=>{try{!i.isEqual(e,c)&&t.value&&f()}catch{}},{deep:!0}),l.watch(()=>i.cloneDeep(a.basicOption.scene.translateX),(e,c)=>{try{if(!i.isEqual(e,c)&&t.value){const r=a.basicOption.scene.translateX||0,n=a.basicOption.scene.translateY||0,o=a.basicOption.scene.translateZ||0,s=a.basicOption.camera.position.x+r,h=a.basicOption.camera.position.y+n,g=a.basicOption.camera.position.z+o;t.value.camera.instance.position.set(s,h,g);const u=a.basicOption.camera.target;if(u){const d=u[0]+r,m=u[1]+n,O=u[2]+o;t.value.camera.controls.target.set(d,m,O)}}}catch{}},{deep:!0}),l.watch(()=>i.cloneDeep(a.basicOption.scene.translateY),(e,c)=>{try{if(!i.isEqual(e,c)&&t.value){const r=a.basicOption.scene.translateX||0,n=a.basicOption.scene.translateY||0,o=a.basicOption.scene.translateZ||0,s=a.basicOption.camera.position.x+r,h=a.basicOption.camera.position.y+n,g=a.basicOption.camera.position.z+o;t.value.camera.instance.position.set(s,h,g);const u=a.basicOption.camera.target;if(u){const d=u[0]+r,m=u[1]+n,O=u[2]+o;t.value.camera.controls.target.set(d,m,O)}}}catch{}},{deep:!0}),l.watch(()=>i.cloneDeep(a.basicOption.scene.translateZ),(e,c)=>{try{if(!i.isEqual(e,c)&&t.value){const r=a.basicOption.scene.translateX||0,n=a.basicOption.scene.translateY||0,o=a.basicOption.scene.translateZ||0,s=a.basicOption.camera.position.x+r,h=a.basicOption.camera.position.y+n,g=a.basicOption.camera.position.z+o;t.value.camera.instance.position.set(s,h,g);const u=a.basicOption.camera.target;if(u){const d=u[0]+r,m=u[1]+n,O=u[2]+o;t.value.camera.controls.target.set(d,m,O)}}}catch{}},{deep:!0}),a.basicOption.orbitControls&&l.watch(()=>i.cloneDeep(a.basicOption.orbitControls),(e,c)=>{try{!i.isEqual(e,c)&&t.value&&t.value.camera.setControls(e)}catch{}},{deep:!0}),l.watch(()=>i.cloneDeep(a.basicOption.scene.z),(e,c)=>{try{!i.isEqual(e,c)&&t.value&&(t.value.scene.position.z=e)}catch{}},{deep:!0}),a.basicOption.map.backgroundImg&&(l.watch(()=>i.cloneDeep(a.basicOption.map.backgroundImg.show),(e,c)=>{try{!i.isEqual(e,c)&&t.value&&t.value.createMapBackgroundImg(!1)}catch{}},{deep:!0}),l.watch(()=>i.cloneDeep(a.basicOption.map.backgroundImg.src),(e,c)=>{try{!i.isEqual(e,c)&&t.value&&t.value.mapBackgroundImgMaterial&&t.value.createMapBackgroundImg(!1)}catch{}},{deep:!0}),l.watch(()=>i.cloneDeep(a.basicOption.map.backgroundImg.alphaMap),(e,c)=>{try{!i.isEqual(e,c)&&t.value&&t.value.mapBackgroundImgMaterial&&t.value.createMapBackgroundImg(!1)}catch{}},{deep:!0}),l.watch(()=>i.cloneDeep(a.basicOption.map.backgroundImg.color),(e,c)=>{try{!i.isEqual(e,c)&&t.value&&t.value.mapBackgroundImgMaterial&&(t.value.mapBackgroundImgMaterial.color=new b.Color(e))}catch{}},{deep:!0}),l.watch(()=>i.cloneDeep(a.basicOption.map.backgroundImg.opacity),(e,c)=>{try{!i.isEqual(e,c)&&t.value&&t.value.mapBackgroundImgMaterial&&(t.value.mapBackgroundImgMaterial.opacity=e)}catch{}},{deep:!0}),l.watch(()=>i.cloneDeep(a.basicOption.map.backgroundImg.rotation),(e,c)=>{try{!i.isEqual(e,c)&&t.value&&t.value.mapBackgroundImgMesh&&(t.value.mapBackgroundImgMesh.rotation.x=e[0]*(Math.PI/180),t.value.mapBackgroundImgMesh.rotation.y=e[1]*(Math.PI/180),t.value.mapBackgroundImgMesh.rotation.z=e[2]*(Math.PI/180))}catch{}},{deep:!0}),l.watch(()=>i.cloneDeep(a.basicOption.map.backgroundImg.position),(e,c)=>{try{!i.isEqual(e,c)&&t.value&&t.value.mapBackgroundImgMesh&&(t.value.mapBackgroundImgMesh.position.x=e[0],t.value.mapBackgroundImgMesh.position.y=e[1],t.value.mapBackgroundImgMesh.position.z=e[2])}catch{}},{deep:!0}),l.watch(()=>i.cloneDeep(a.basicOption.map.backgroundImg.scale),(e,c)=>{try{!i.isEqual(e,c)&&t.value&&t.value.mapBackgroundImgMesh&&(t.value.mapBackgroundImgMesh.scale.x=e[0],t.value.mapBackgroundImgMesh.scale.y=e[1],t.value.mapBackgroundImgMesh.scale.z=e[2])}catch{}},{deep:!0})),l.watch(()=>i.cloneDeep(a.basicOption.scene.background),(e,c)=>{try{!i.isEqual(e,c)&&t.value&&(t.value.scene.background=new b.Color(e))}catch{}},{deep:!0}),l.watch(()=>i.cloneDeep(a.basicOption.scene.isBackground),(e,c)=>{try{!i.isEqual(e,c)&&t.value&&(e?t.value.scene.background=new b.Color(a.basicOption.scene.background):t.value.scene.background=null)}catch{}},{deep:!0}),l.watch(()=>i.cloneDeep(a.basicOption.map.lineColor),(e,c)=>{try{!i.isEqual(e,c)&&t.value&&(t.value.provinceLineMaterial.color=new b.Color(e))}catch{}},{deep:!0}),l.watch(()=>i.cloneDeep(a.basicOption.map.mirrorShow),(e,c)=>{try{!i.isEqual(e,c)&&t.value&&(t.value.groundMirror.visible=e)}catch{}},{deep:!0}),l.watch(()=>i.cloneDeep(a.basicOption.map.arealabel),(e,c)=>{try{!i.isEqual(e,c)&&t.value&&t.value.setAreaLabelStyle(e)}catch{}},{deep:!0}),l.watch(()=>i.cloneDeep(a.basicOption.map.titleLabel),(e,c)=>{try{!i.isEqual(e,c)&&t.value&&t.value.setMapTitleLabelStyle(e)}catch{}},{deep:!0}),l.watch(()=>i.cloneDeep(a.basicOption.map.topMaterial),async(e,c)=>{try{if(!i.isEqual(e,c)&&t.value){let[r,n]=t.value.createProvinceMaterial(a.basicOption.map.topMaterial,a.basicOption.map.sideMaterial);t.value.areaMapTopMaterial=r,t.value.areaMapSideMaterial=n,t.value.provinceMesh.mapGroup.traverse(o=>{o.isMesh&&(o.material[0]=r,o.material[1]=n)})}}catch{}},{deep:!0}),l.watch(()=>i.cloneDeep(a.basicOption.map.sideMaterial),(e,c)=>{try{if(!i.isEqual(e,c)&&t.value){let[r,n]=t.value.createProvinceMaterial(a.basicOption.map.topMaterial,a.basicOption.map.sideMaterial);t.value.areaMapTopMaterial=r,t.value.areaMapSideMaterial=n,t.value.provinceMesh.mapGroup.traverse(o=>{o.isMesh&&(o.material[0]=r,o.material[1]=n)})}}catch{}},{deep:!0}),l.watch(()=>i.cloneDeep(a.basicOption.map.storkeAnimation),(e,c)=>{try{!i.isEqual(e,c)&&t.value&&t.value.createAreaMapStorke(e,!1)}catch{}},{deep:!0}),l.watch(()=>i.cloneDeep(a.basicOption.particle),(e,c)=>{try{!i.isEqual(e,c)&&t.value&&q.createParticles(t.value,e)}catch{}},{deep:!0}),l.watch(()=>i.cloneDeep(a.basicOption.floor.gaoguang),(e,c)=>{try{!i.isEqual(e,c)&&t.value&&(t.value.gaoguangMesh.visible=e.show,t.value.gaoguangMesh.material.color=new b.Color(e.color))}catch{}},{deep:!0}),l.watch(()=>i.cloneDeep(a.basicOption.floor.quan),(e,c)=>{try{!i.isEqual(e,c)&&t.value&&(t.value.quan.visible=e.show,t.value.quan.material.color=new b.Color(e.color))}catch{}},{deep:!0}),l.watch(()=>i.cloneDeep(a.basicOption.floor.gridRipple),(e,c)=>{try{!i.isEqual(e,c)&&t.value&&w.createFloorGridRipple(t.value,e)}catch{}},{deep:!0}),l.watch(()=>i.cloneDeep(a.basicOption.floor.rotateBorder),(e,c)=>{try{!i.isEqual(e,c)&&t.value&&M.createFloorRotateBorder(t.value,e,!1)}catch{}},{deep:!0}),l.watch(()=>i.cloneDeep(a.basicOption.light.ambientLight),(e,c)=>{try{!i.isEqual(e,c)&&t.value&&v.createAmbientLight(t.value,e)}catch{}},{deep:!0}),l.watch(()=>i.cloneDeep(a.basicOption.light.directionalLight),(e,c)=>{try{!i.isEqual(e,c)&&t.value&&v.createDirectionalLight(t.value,e,a.basicOption.debugger)}catch{}},{deep:!0}),l.watch(()=>i.cloneDeep(a.basicOption.light.pointLight1),(e,c)=>{try{!i.isEqual(e,c)&&t.value&&v.createPointLight1(t.value,e,a.basicOption.debugger)}catch{}},{deep:!0}),l.watch(()=>i.cloneDeep(a.basicOption.light.pointLight2),(e,c)=>{try{!i.isEqual(e,c)&&t.value&&v.createPointLight2(t.value,e,a.basicOption.debugger)}catch{}},{deep:!0}),l.watch(()=>i.cloneDeep(a.basicOption.debugger),(e,c)=>{try{!i.isEqual(e,c)&&t.value&&(v.createEnvironment(t.value,a.basicOption.light,a.basicOption.debugger),t.value.mapBoxHelper.visible=a.basicOption.debugger,t.value.axesHelper.visible=a.basicOption.debugger)}catch{}},{deep:!0}),l.watch(()=>i.cloneDeep(a.basicOption.camera.position),(e,c)=>{try{if(!i.isEqual(e,c)&&t.value){const r=a.basicOption.scene.translateX||0,n=a.basicOption.scene.translateY||0,o=a.basicOption.scene.translateZ||0,s=a.basicOption.camera.position.x+r,h=a.basicOption.camera.position.y+n,g=a.basicOption.camera.position.z+o;t.value.camera.instance.position.set(s,h,g)}}catch{}},{deep:!0}),a.basicOption.camera.target&&l.watch(()=>i.cloneDeep(a.basicOption.camera.target),(e,c)=>{try{if(!i.isEqual(e,c)&&t.value){const r=a.basicOption.scene.translateX||0,n=a.basicOption.scene.translateY||0,o=a.basicOption.scene.translateZ||0,s=a.basicOption.camera.target;if(s){const h=s[0]+r,g=s[1]+n,u=s[2]+o;t.value.camera.controls.target.set(h,g,u)}}}catch{}},{deep:!0}),l.watch(()=>i.cloneDeep(a.basicOption.widgets.filter(e=>e.type==="bar")),(e,c)=>{try{!i.isEqual(e,c)&&t.value&&e.length===c.length&&e.forEach(r=>{t.value.createBar(r,void 0,!1)})}catch{}},{deep:!0}),l.watch(()=>i.cloneDeep(a.basicOption.widgets.filter(e=>e.type==="scatter")),(e,c)=>{try{!i.isEqual(e,c)&&t.value&&e.length===c.length&&e.forEach(r=>{t.value.createScatter(r,void 0,!1)})}catch{}},{deep:!0}),l.watch(()=>i.cloneDeep(a.basicOption.widgets.filter(e=>e.type==="flyline")),(e,c)=>{try{!i.isEqual(e,c)&&t.value&&e.length===c.length&&e.forEach(r=>{t.value.createFlyLine(r,void 0,!1)})}catch{}},{deep:!0}),l.watch(()=>i.cloneDeep(a.basicOption.widgets.filter(e=>e.type==="regionalLevel")),(e,c)=>{try{!i.isEqual(e,c)&&t.value&&e.length===c.length&&e.forEach(r=>{t.value.createRegionalLevel(r,void 0,!1)})}catch{}},{deep:!0}),l.watch(()=>i.cloneDeep(a.sources),(e,c)=>{try{!i.isEqual(e,c)&&t.value&&y(!1)}catch{}},{deep:!0})};exports.initWatch=E;
