"use strict";Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const d=require("three"),h=require("three/examples/jsm/loaders/GLTFLoader");require("three/examples/jsm/loaders/DRACOLoader.js");const c=require("./EventEmitter.js"),n={GLTFLoader:"GLTF",TextureLoader:"Texture",FontLoader:"Font",MMDLoader:"MMD",MTLLoader:"MTL",OBJLoader:"OBJ",PCDLoader:"PCD",FileLoader:"File",ImageLoader:"Image",ObjectLoader:"Object",MaterialLoader:"Material",CubeTextureLoader:"CubeTexture",RGBELoader:"RGBELoader",FBXLoader:"FBX"},u=Object.values(n);class l extends c.EventEmitter{constructor({dracoPath:e}={}){super(),this.itemsLoaded=0,this.itemsTotal=0,this.assets=[],this.loaders={},this.initDefaultLoader()}initDefaultLoader(){[{loader:h.GLTFLoader,name:"GLTFLoader"},{loader:d.TextureLoader,name:"TextureLoader"}].map(e=>this.addLoader(e.loader,e.name))}addLoader(e,t=""){if(e.name&&n[t]){if(!this.loaders[t]){const s=new e(this.manager),a=t;s instanceof d.Loader&&(this.loaders[n[a]]=s)}}else throw new Error("请配置正确的加载器")}loadItem(e){return new Promise((t,r)=>{if(!this.loaders[e.type])throw new Error(`资源${e.path}没有配置加载器`);this.loaders[e.type].load(e.path,s=>{this.itemsLoaded++,this.emit("onProgress",e.path,this.itemsLoaded,this.itemsTotal),t({...e,data:s})},null,s=>{this.emit("onError",s),t({...e,data:null})})})}loadAll(e){return this.itemsLoaded=0,this.itemsTotal=0,new Promise((t,r)=>{const s=this.matchType(e),a=[];this.itemsTotal=s.length,s.map(o=>{try{const i=this.loadItem(o);a.push(i)}catch{}}),Promise.all(a).then(o=>{this.assets=o,this.emit("onLoad"),t(o)}).catch(o=>{this.emit("onError",o),r(o)})})}matchType(e){return this.assets=e.map(t=>({type:u.includes(t.type)?t.type:"",path:t.path,name:t.name,data:null})).filter(t=>{if(!t.type)throw new Error(`资源${t.path},type不正确`);return t.type}),this.assets}getResource(e){const t=this.assets.find(r=>r.name===e);if(!t)throw new Error(`资源${e}不存在`);return t.data}getResource3(e){const t=this.assets.find(r=>r.name===e);if(!t)throw new Error(`资源${e}不存在`);return t}getResource2(e,t){const r=this.assets.find(s=>s.name===e);if(!r)throw new Error(`资源${e}不存在`);return t!==void 0&&r.path!==t&&this.loadItem({type:r.type,name:r.name,path:t}).then(s=>{r.data=s}),r.data}destroy(){this.off("onProgress"),this.off("onLoad"),this.off("onError"),this.assets=[]}}exports.Resource=l;
