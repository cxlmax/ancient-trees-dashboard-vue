!(function t(e) { let r, i; r = this, i = function() { 'use strict'; function r(t, e) { const r = Object.keys(t); if (Object.getOwnPropertySymbols) { let i = Object.getOwnPropertySymbols(t); e && (i = i.filter(function(e) { return Object.getOwnPropertyDescriptor(t, e).enumerable })), r.push.apply(r, i) } return r } function i(t) { for (let e = 1; e < arguments.length; e++) { var i = arguments[e] != null ? arguments[e] : {}; e % 2 ? r(Object(i), !0).forEach(function(e) { let r, a, s; r = t, a = e, s = i[e], (a = n(a)) in r ? Object.defineProperty(r, a, { value: s, enumerable: !0, configurable: !0, writable: !0 }) : r[a] = s }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(i)) : r(Object(i)).forEach(function(e) { Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(i, e)) }) } return t } function n(t) { const e = (function(t, e) { if (typeof t !== 'object' || !t) return t; const r = t[Symbol.toPrimitive]; if (void 0 !== r) { const i = r.call(t, e || 'default'); if (typeof i !== 'object') return i; throw new TypeError('@@toPrimitive must return a primitive value.') } return (e === 'string' ? String : Number)(t) }(t, 'string')); return typeof e === 'symbol' ? e : String(e) } function a(t, e) { for (let r = 0; r < e.length; r++) { const i = e[r]; i.enumerable = i.enumerable || !1, i.configurable = !0, 'value' in i && (i.writable = !0), Object.defineProperty(t, n(i.key), i) } } function s(t, e, r) { return e && a(t.prototype, e), r && a(t, r), Object.defineProperty(t, 'prototype', { writable: !1 }), t } function o() { return o = Object.assign ? Object.assign.bind() : function(t) { for (let e = 1; e < arguments.length; e++) { const r = arguments[e]; for (const i in r)Object.prototype.hasOwnProperty.call(r, i) && (t[i] = r[i]) } return t }, o.apply(this, arguments) } function l(t, e) { t.prototype = Object.create(e.prototype), t.prototype.constructor = t, h(t, e) } function u(t) { return u = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) { return t.__proto__ || Object.getPrototypeOf(t) }, u(t) } function h(t, e) { return h = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) { return t.__proto__ = e, t }, h(t, e) } function d(t, e, r) { return d = (function() { if (typeof Reflect === 'undefined' || !Reflect.construct) return !1; if (Reflect.construct.sham) return !1; if (typeof Proxy === 'function') return !0; try { return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {})), !0 } catch (t) { return !1 } }()) ? Reflect.construct.bind() : function(t, e, r) { const i = [null]; i.push.apply(i, e); const n = new (Function.bind.apply(t, i))(); return r && h(n, r.prototype), n }, d.apply(null, arguments) } function c(t) { const e = typeof Map === 'function' ? new Map() : void 0; return c = function(t) { if (t === null || !(function(t) { try { return Function.toString.call(t).indexOf('[native code]') !== -1 } catch (e) { return typeof t === 'function' } }(t))) return t; if (typeof t !== 'function') throw new TypeError('Super expression must either be null or a function'); if (void 0 !== e) { if (e.has(t)) return e.get(t); e.set(t, r) } function r() { return d(t, arguments, u(this).constructor) } return r.prototype = Object.create(t.prototype, { constructor: { value: r, enumerable: !1, writable: !0, configurable: !0 } }), h(r, t) }, c(t) } function f(t, e) { (e == null || e > t.length) && (e = t.length); for (var r = 0, i = new Array(e); r < e; r++)i[r] = t[r]; return i } function g(t, e) { let r = typeof Symbol !== 'undefined' && t[Symbol.iterator] || t['@@iterator']; if (r) return (r = r.call(t)).next.bind(r); if (Array.isArray(t) || (r = (function(t, e) { if (t) { if (typeof t === 'string') return f(t, e); let r = Object.prototype.toString.call(t).slice(8, -1); return r === 'Object' && t.constructor && (r = t.constructor.name), r === 'Map' || r === 'Set' ? Array.from(t) : r === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? f(t, e) : void 0 } }(t))) || e && t && typeof t.length === 'number') { r && (t = r); let i = 0; return function() { return i >= t.length ? { done: !0 } : { done: !1, value: t[i++] } } } throw new TypeError('Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.') } function v(t) { return t && t.__esModule && Object.prototype.hasOwnProperty.call(t, 'default') ? t.default : t } const m = { exports: {} }; !(function(t, e) { let r, i, n, a, s; r = /^(?=((?:[a-zA-Z0-9+\-.]+:)?))\1(?=((?:\/\/[^\/?#]*)?))\2(?=((?:(?:[^?#\/]*\/)*[^;?#\/]*)?))\3((?:;[^?#]*)?)(\?[^#]*)?(#[^]*)?$/, i = /^(?=([^\/?#]*))\1([^]*)$/, n = /(?:\/|^)\.(?=\/)/g, a = /(?:\/|^)\.\.\/(?!\.\.\/)[^\/]*(?=\/)/g, s = { buildAbsoluteURL: function(t, e, r) { if (r = r || {}, t = t.trim(), !(e = e.trim())) { if (!r.alwaysNormalize) return t; const n = s.parseURL(t); if (!n) throw new Error('Error trying to parse base URL.'); return n.path = s.normalizePath(n.path), s.buildURLFromParts(n) } const a = s.parseURL(e); if (!a) throw new Error('Error trying to parse relative URL.'); if (a.scheme) return r.alwaysNormalize ? (a.path = s.normalizePath(a.path), s.buildURLFromParts(a)) : e; const o = s.parseURL(t); if (!o) throw new Error('Error trying to parse base URL.'); if (!o.netLoc && o.path && o.path[0] !== '/') { const l = i.exec(o.path); o.netLoc = l[1], o.path = l[2] }o.netLoc && !o.path && (o.path = '/'); const u = { scheme: o.scheme, netLoc: a.netLoc, path: null, params: a.params, query: a.query, fragment: a.fragment }; if (!a.netLoc && (u.netLoc = o.netLoc, a.path[0] !== '/')) if (a.path) { const h = o.path; const d = h.substring(0, h.lastIndexOf('/') + 1) + a.path; u.path = s.normalizePath(d) } else u.path = o.path, a.params || (u.params = o.params, a.query || (u.query = o.query)); return u.path === null && (u.path = r.alwaysNormalize ? s.normalizePath(a.path) : a.path), s.buildURLFromParts(u) }, parseURL: function(t) { const e = r.exec(t); return e ? { scheme: e[1] || '', netLoc: e[2] || '', path: e[3] || '', params: e[4] || '', query: e[5] || '', fragment: e[6] || '' } : null }, normalizePath: function(t) { for (t = t.split('').reverse().join('').replace(n, ''); t.length !== (t = t.replace(a, '')).length;);return t.split('').reverse().join('') }, buildURLFromParts: function(t) { return t.scheme + t.netLoc + t.path + t.params + t.query + t.fragment } }, t.exports = s }(m)); const p = m.exports; const y = Number.isFinite || function(t) { return typeof t === 'number' && isFinite(t) }; const E = Number.isSafeInteger || function(t) { return typeof t === 'number' && Math.abs(t) <= T }; var T = Number.MAX_SAFE_INTEGER || 9007199254740991; const S = (function(t) { return t.MEDIA_ATTACHING = 'hlsMediaAttaching', t.MEDIA_ATTACHED = 'hlsMediaAttached', t.MEDIA_DETACHING = 'hlsMediaDetaching', t.MEDIA_DETACHED = 'hlsMediaDetached', t.BUFFER_RESET = 'hlsBufferReset', t.BUFFER_CODECS = 'hlsBufferCodecs', t.BUFFER_CREATED = 'hlsBufferCreated', t.BUFFER_APPENDING = 'hlsBufferAppending', t.BUFFER_APPENDED = 'hlsBufferAppended', t.BUFFER_EOS = 'hlsBufferEos', t.BUFFER_FLUSHING = 'hlsBufferFlushing', t.BUFFER_FLUSHED = 'hlsBufferFlushed', t.MANIFEST_LOADING = 'hlsManifestLoading', t.MANIFEST_LOADED = 'hlsManifestLoaded', t.MANIFEST_PARSED = 'hlsManifestParsed', t.LEVEL_SWITCHING = 'hlsLevelSwitching', t.LEVEL_SWITCHED = 'hlsLevelSwitched', t.LEVEL_LOADING = 'hlsLevelLoading', t.LEVEL_LOADED = 'hlsLevelLoaded', t.LEVEL_UPDATED = 'hlsLevelUpdated', t.LEVEL_PTS_UPDATED = 'hlsLevelPtsUpdated', t.LEVELS_UPDATED = 'hlsLevelsUpdated', t.AUDIO_TRACKS_UPDATED = 'hlsAudioTracksUpdated', t.AUDIO_TRACK_SWITCHING = 'hlsAudioTrackSwitching', t.AUDIO_TRACK_SWITCHED = 'hlsAudioTrackSwitched', t.AUDIO_TRACK_LOADING = 'hlsAudioTrackLoading', t.AUDIO_TRACK_LOADED = 'hlsAudioTrackLoaded', t.SUBTITLE_TRACKS_UPDATED = 'hlsSubtitleTracksUpdated', t.SUBTITLE_TRACKS_CLEARED = 'hlsSubtitleTracksCleared', t.SUBTITLE_TRACK_SWITCH = 'hlsSubtitleTrackSwitch', t.SUBTITLE_TRACK_LOADING = 'hlsSubtitleTrackLoading', t.SUBTITLE_TRACK_LOADED = 'hlsSubtitleTrackLoaded', t.SUBTITLE_FRAG_PROCESSED = 'hlsSubtitleFragProcessed', t.CUES_PARSED = 'hlsCuesParsed', t.NON_NATIVE_TEXT_TRACKS_FOUND = 'hlsNonNativeTextTracksFound', t.INIT_PTS_FOUND = 'hlsInitPtsFound', t.FRAG_LOADING = 'hlsFragLoading', t.FRAG_LOAD_EMERGENCY_ABORTED = 'hlsFragLoadEmergencyAborted', t.FRAG_LOADED = 'hlsFragLoaded', t.FRAG_DECRYPTED = 'hlsFragDecrypted', t.FRAG_PARSING_INIT_SEGMENT = 'hlsFragParsingInitSegment', t.FRAG_PARSING_USERDATA = 'hlsFragParsingUserdata', t.FRAG_PARSING_METADATA = 'hlsFragParsingMetadata', t.FRAG_PARSED = 'hlsFragParsed', t.FRAG_BUFFERED = 'hlsFragBuffered', t.FRAG_CHANGED = 'hlsFragChanged', t.FPS_DROP = 'hlsFpsDrop', t.FPS_DROP_LEVEL_CAPPING = 'hlsFpsDropLevelCapping', t.MAX_AUTO_LEVEL_UPDATED = 'hlsMaxAutoLevelUpdated', t.ERROR = 'hlsError', t.DESTROYING = 'hlsDestroying', t.KEY_LOADING = 'hlsKeyLoading', t.KEY_LOADED = 'hlsKeyLoaded', t.LIVE_BACK_BUFFER_REACHED = 'hlsLiveBackBufferReached', t.BACK_BUFFER_REACHED = 'hlsBackBufferReached', t.STEERING_MANIFEST_LOADED = 'hlsSteeringManifestLoaded', t }({})); const L = (function(t) { return t.NETWORK_ERROR = 'networkError', t.MEDIA_ERROR = 'mediaError', t.KEY_SYSTEM_ERROR = 'keySystemError', t.MUX_ERROR = 'muxError', t.OTHER_ERROR = 'otherError', t }({})); const A = (function(t) { return t.KEY_SYSTEM_NO_KEYS = 'keySystemNoKeys', t.KEY_SYSTEM_NO_ACCESS = 'keySystemNoAccess', t.KEY_SYSTEM_NO_SESSION = 'keySystemNoSession', t.KEY_SYSTEM_NO_CONFIGURED_LICENSE = 'keySystemNoConfiguredLicense', t.KEY_SYSTEM_LICENSE_REQUEST_FAILED = 'keySystemLicenseRequestFailed', t.KEY_SYSTEM_SERVER_CERTIFICATE_REQUEST_FAILED = 'keySystemServerCertificateRequestFailed', t.KEY_SYSTEM_SERVER_CERTIFICATE_UPDATE_FAILED = 'keySystemServerCertificateUpdateFailed', t.KEY_SYSTEM_SESSION_UPDATE_FAILED = 'keySystemSessionUpdateFailed', t.KEY_SYSTEM_STATUS_OUTPUT_RESTRICTED = 'keySystemStatusOutputRestricted', t.KEY_SYSTEM_STATUS_INTERNAL_ERROR = 'keySystemStatusInternalError', t.MANIFEST_LOAD_ERROR = 'manifestLoadError', t.MANIFEST_LOAD_TIMEOUT = 'manifestLoadTimeOut', t.MANIFEST_PARSING_ERROR = 'manifestParsingError', t.MANIFEST_INCOMPATIBLE_CODECS_ERROR = 'manifestIncompatibleCodecsError', t.LEVEL_EMPTY_ERROR = 'levelEmptyError', t.LEVEL_LOAD_ERROR = 'levelLoadError', t.LEVEL_LOAD_TIMEOUT = 'levelLoadTimeOut', t.LEVEL_PARSING_ERROR = 'levelParsingError', t.LEVEL_SWITCH_ERROR = 'levelSwitchError', t.AUDIO_TRACK_LOAD_ERROR = 'audioTrackLoadError', t.AUDIO_TRACK_LOAD_TIMEOUT = 'audioTrackLoadTimeOut', t.SUBTITLE_LOAD_ERROR = 'subtitleTrackLoadError', t.SUBTITLE_TRACK_LOAD_TIMEOUT = 'subtitleTrackLoadTimeOut', t.FRAG_LOAD_ERROR = 'fragLoadError', t.FRAG_LOAD_TIMEOUT = 'fragLoadTimeOut', t.FRAG_DECRYPT_ERROR = 'fragDecryptError', t.FRAG_PARSING_ERROR = 'fragParsingError', t.FRAG_GAP = 'fragGap', t.REMUX_ALLOC_ERROR = 'remuxAllocError', t.KEY_LOAD_ERROR = 'keyLoadError', t.KEY_LOAD_TIMEOUT = 'keyLoadTimeOut', t.BUFFER_ADD_CODEC_ERROR = 'bufferAddCodecError', t.BUFFER_INCOMPATIBLE_CODECS_ERROR = 'bufferIncompatibleCodecsError', t.BUFFER_APPEND_ERROR = 'bufferAppendError', t.BUFFER_APPENDING_ERROR = 'bufferAppendingError', t.BUFFER_STALLED_ERROR = 'bufferStalledError', t.BUFFER_FULL_ERROR = 'bufferFullError', t.BUFFER_SEEK_OVER_HOLE = 'bufferSeekOverHole', t.BUFFER_NUDGE_ON_STALL = 'bufferNudgeOnStall', t.INTERNAL_EXCEPTION = 'internalException', t.INTERNAL_ABORTED = 'aborted', t.UNKNOWN = 'unknown', t }({})); const R = function() {}; const k = { trace: R, debug: R, log: R, warn: R, info: R, error: R }; let b = k; function D(t) { for (var e = arguments.length, r = new Array(e > 1 ? e - 1 : 0), i = 1; i < e; i++)r[i - 1] = arguments[i]; r.forEach(function(e) { b[e] = t[e] ? t[e].bind(t) : (function(t) { const e = self.console[t]; return e ? e.bind(self.console, '[' + t + '] >') : R }(e)) }) } function I(t, e) { if (typeof console === 'object' && !0 === t || typeof t === 'object') { D(t, 'debug', 'log', 'info', 'warn', 'error'); try { b.log('Debug logs enabled for "' + e + '" in hls.js version 1.5.9') } catch (t) { b = k } } else b = k } const w = b; const C = /^(\d+)x(\d+)$/; const _ = /(.+?)=(".*?"|.*?)(?:,|$)/g; const x = (function() { function t(e) { typeof e === 'string' && (e = t.parseAttrList(e)), o(this, e) } const e = t.prototype; return e.decimalInteger = function(t) { const e = parseInt(this[t], 10); return e > Number.MAX_SAFE_INTEGER ? 1 / 0 : e }, e.hexadecimalInteger = function(t) { if (this[t]) { let e = (this[t] || '0x').slice(2); e = (1 & e.length ? '0' : '') + e; for (var r = new Uint8Array(e.length / 2), i = 0; i < e.length / 2; i++)r[i] = parseInt(e.slice(2 * i, 2 * i + 2), 16); return r } return null }, e.hexadecimalIntegerAsNumber = function(t) { const e = parseInt(this[t], 16); return e > Number.MAX_SAFE_INTEGER ? 1 / 0 : e }, e.decimalFloatingPoint = function(t) { return parseFloat(this[t]) }, e.optionalFloat = function(t, e) { const r = this[t]; return r ? parseFloat(r) : e }, e.enumeratedString = function(t) { return this[t] }, e.bool = function(t) { return this[t] === 'YES' }, e.decimalResolution = function(t) { const e = C.exec(this[t]); if (e !== null) return { width: parseInt(e[1], 10), height: parseInt(e[2], 10) } }, t.parseAttrList = function(t) { let e; const r = {}; for (_.lastIndex = 0; (e = _.exec(t)) !== null;) { let i = e[2]; i.indexOf('"') === 0 && i.lastIndexOf('"') === i.length - 1 && (i = i.slice(1, -1)), r[e[1].trim()] = i } return r }, s(t, [{ key: 'clientAttrs', get: function() { return Object.keys(this).filter(function(t) { return t.substring(0, 2) === 'X-' }) } }]), t }()); function P(t) { return t === 'SCTE35-OUT' || t === 'SCTE35-IN' } const F = (function() { function t(t, e) { if (this.attr = void 0, this._startDate = void 0, this._endDate = void 0, this._badValueForSameId = void 0, e) { const r = e.attr; for (const i in r) if (Object.prototype.hasOwnProperty.call(t, i) && t[i] !== r[i]) { w.warn('DATERANGE tag attribute: "' + i + '" does not match for tags with ID: "' + t.ID + '"'), this._badValueForSameId = i; break }t = o(new x({}), r, t) } if (this.attr = t, this._startDate = new Date(t['START-DATE']), 'END-DATE' in this.attr) { const n = new Date(this.attr['END-DATE']); y(n.getTime()) && (this._endDate = n) } } return s(t, [{ key: 'id', get: function() { return this.attr.ID } }, { key: 'class', get: function() { return this.attr.CLASS } }, { key: 'startDate', get: function() { return this._startDate } }, { key: 'endDate', get: function() { if (this._endDate) return this._endDate; const t = this.duration; return t !== null ? new Date(this._startDate.getTime() + 1e3 * t) : null } }, { key: 'duration', get: function() { if ('DURATION' in this.attr) { const t = this.attr.decimalFloatingPoint('DURATION'); if (y(t)) return t } else if (this._endDate) return (this._endDate.getTime() - this._startDate.getTime()) / 1e3; return null } }, { key: 'plannedDuration', get: function() { return 'PLANNED-DURATION' in this.attr ? this.attr.decimalFloatingPoint('PLANNED-DURATION') : null } }, { key: 'endOnNext', get: function() { return this.attr.bool('END-ON-NEXT') } }, { key: 'isValid', get: function() { return !!this.id && !this._badValueForSameId && y(this.startDate.getTime()) && (this.duration === null || this.duration >= 0) && (!this.endOnNext || !!this.class) } }]), t }()); const M = function() { this.aborted = !1, this.loaded = 0, this.retry = 0, this.total = 0, this.chunkCount = 0, this.bwEstimate = 0, this.loading = { start: 0, first: 0, end: 0 }, this.parsing = { start: 0, end: 0 }, this.buffering = { start: 0, first: 0, end: 0 } }; const O = 'audio'; const N = 'video'; const U = 'audiovideo'; const B = (function() { function t(t) { let e; this._byteRange = null, this._url = null, this.baseurl = void 0, this.relurl = void 0, this.elementaryStreams = ((e = {})[O] = null, e[N] = null, e[U] = null, e), this.baseurl = t } return t.prototype.setByteRange = function(t, e) { let r; const i = t.split('@', 2); r = i.length === 1 ? (e == null ? void 0 : e.byteRangeEndOffset) || 0 : parseInt(i[1]), this._byteRange = [r, parseInt(i[0]) + r] }, s(t, [{ key: 'byteRange', get: function() { return this._byteRange ? this._byteRange : [] } }, { key: 'byteRangeStartOffset', get: function() { return this.byteRange[0] } }, { key: 'byteRangeEndOffset', get: function() { return this.byteRange[1] } }, { key: 'url', get: function() { return !this._url && this.baseurl && this.relurl && (this._url = p.buildAbsoluteURL(this.baseurl, this.relurl, { alwaysNormalize: !0 })), this._url || '' }, set: function(t) { this._url = t } }]), t }()); const G = (function(t) { function e(e, r) { let i; return (i = t.call(this, r) || this)._decryptdata = null, i.rawProgramDateTime = null, i.programDateTime = null, i.tagList = [], i.duration = 0, i.sn = 0, i.levelkeys = void 0, i.type = void 0, i.loader = null, i.keyLoader = null, i.level = -1, i.cc = 0, i.startPTS = void 0, i.endPTS = void 0, i.startDTS = void 0, i.endDTS = void 0, i.start = 0, i.deltaPTS = void 0, i.maxStartPTS = void 0, i.minEndPTS = void 0, i.stats = new M(), i.data = void 0, i.bitrateTest = !1, i.title = null, i.initSegment = null, i.endList = void 0, i.gap = void 0, i.urlId = 0, i.type = e, i }l(e, t); const r = e.prototype; return r.setKeyFormat = function(t) { if (this.levelkeys) { const e = this.levelkeys[t]; e && !this._decryptdata && (this._decryptdata = e.getDecryptData(this.sn)) } }, r.abortRequests = function() { let t, e; (t = this.loader) == null || t.abort(), (e = this.keyLoader) == null || e.abort() }, r.setElementaryStreamInfo = function(t, e, r, i, n, a) { void 0 === a && (a = !1); const s = this.elementaryStreams; const o = s[t]; o ? (o.startPTS = Math.min(o.startPTS, e), o.endPTS = Math.max(o.endPTS, r), o.startDTS = Math.min(o.startDTS, i), o.endDTS = Math.max(o.endDTS, n)) : s[t] = { startPTS: e, endPTS: r, startDTS: i, endDTS: n, partial: a } }, r.clearElementaryStreamInfo = function() { const t = this.elementaryStreams; t[O] = null, t[N] = null, t[U] = null }, s(e, [{ key: 'decryptdata', get: function() { if (!this.levelkeys && !this._decryptdata) return null; if (!this._decryptdata && this.levelkeys && !this.levelkeys.NONE) { const t = this.levelkeys.identity; if (t) this._decryptdata = t.getDecryptData(this.sn); else { const e = Object.keys(this.levelkeys); if (e.length === 1) return this._decryptdata = this.levelkeys[e[0]].getDecryptData(this.sn) } } return this._decryptdata } }, { key: 'end', get: function() { return this.start + this.duration } }, { key: 'endProgramDateTime', get: function() { if (this.programDateTime === null) return null; if (!y(this.programDateTime)) return null; const t = y(this.duration) ? this.duration : 0; return this.programDateTime + 1e3 * t } }, { key: 'encrypted', get: function() { let t; if ((t = this._decryptdata) != null && t.encrypted) return !0; if (this.levelkeys) { const e = Object.keys(this.levelkeys); const r = e.length; if (r > 1 || r === 1 && this.levelkeys[e[0]].encrypted) return !0 } return !1 } }]), e }(B)); const K = (function(t) { function e(e, r, i, n, a) { let s; (s = t.call(this, i) || this).fragOffset = 0, s.duration = 0, s.gap = !1, s.independent = !1, s.relurl = void 0, s.fragment = void 0, s.index = void 0, s.stats = new M(), s.duration = e.decimalFloatingPoint('DURATION'), s.gap = e.bool('GAP'), s.independent = e.bool('INDEPENDENT'), s.relurl = e.enumeratedString('URI'), s.fragment = r, s.index = n; const o = e.enumeratedString('BYTERANGE'); return o && s.setByteRange(o, a), a && (s.fragOffset = a.fragOffset + a.duration), s } return l(e, t), s(e, [{ key: 'start', get: function() { return this.fragment.start + this.fragOffset } }, { key: 'end', get: function() { return this.start + this.duration } }, { key: 'loaded', get: function() { const t = this.elementaryStreams; return !!(t.audio || t.video || t.audiovideo) } }]), e }(B)); const H = (function() { function t(t) { this.PTSKnown = !1, this.alignedSliding = !1, this.averagetargetduration = void 0, this.endCC = 0, this.endSN = 0, this.fragments = void 0, this.fragmentHint = void 0, this.partList = null, this.dateRanges = void 0, this.live = !0, this.ageHeader = 0, this.advancedDateTime = void 0, this.updated = !0, this.advanced = !0, this.availabilityDelay = void 0, this.misses = 0, this.startCC = 0, this.startSN = 0, this.startTimeOffset = null, this.targetduration = 0, this.totalduration = 0, this.type = null, this.url = void 0, this.m3u8 = '', this.version = null, this.canBlockReload = !1, this.canSkipUntil = 0, this.canSkipDateRanges = !1, this.skippedSegments = 0, this.recentlyRemovedDateranges = void 0, this.partHoldBack = 0, this.holdBack = 0, this.partTarget = 0, this.preloadHint = void 0, this.renditionReports = void 0, this.tuneInGoal = 0, this.deltaUpdateFailed = void 0, this.driftStartTime = 0, this.driftEndTime = 0, this.driftStart = 0, this.driftEnd = 0, this.encryptedFragments = void 0, this.playlistParsingError = null, this.variableList = null, this.hasVariableRefs = !1, this.fragments = [], this.encryptedFragments = [], this.dateRanges = {}, this.url = t } return t.prototype.reloaded = function(t) { if (!t) return this.advanced = !0, void (this.updated = !0); const e = this.lastPartSn - t.lastPartSn; const r = this.lastPartIndex - t.lastPartIndex; this.updated = this.endSN !== t.endSN || !!r || !!e || !this.live, this.advanced = this.endSN > t.endSN || e > 0 || e === 0 && r > 0, this.updated || this.advanced ? this.misses = Math.floor(0.6 * t.misses) : this.misses = t.misses + 1, this.availabilityDelay = t.availabilityDelay }, s(t, [{ key: 'hasProgramDateTime', get: function() { return !!this.fragments.length && y(this.fragments[this.fragments.length - 1].programDateTime) } }, { key: 'levelTargetDuration', get: function() { return this.averagetargetduration || this.targetduration || 10 } }, { key: 'drift', get: function() { const t = this.driftEndTime - this.driftStartTime; return t > 0 ? 1e3 * (this.driftEnd - this.driftStart) / t : 1 } }, { key: 'edge', get: function() { return this.partEnd || this.fragmentEnd } }, { key: 'partEnd', get: function() { let t; return (t = this.partList) != null && t.length ? this.partList[this.partList.length - 1].end : this.fragmentEnd } }, { key: 'fragmentEnd', get: function() { let t; return (t = this.fragments) != null && t.length ? this.fragments[this.fragments.length - 1].end : 0 } }, { key: 'age', get: function() { return this.advancedDateTime ? Math.max(Date.now() - this.advancedDateTime, 0) / 1e3 : 0 } }, { key: 'lastPartIndex', get: function() { let t; return (t = this.partList) != null && t.length ? this.partList[this.partList.length - 1].index : -1 } }, { key: 'lastPartSn', get: function() { let t; return (t = this.partList) != null && t.length ? this.partList[this.partList.length - 1].fragment.sn : this.endSN } }]), t }()); function V(t) { return Uint8Array.from(atob(t), function(t) { return t.charCodeAt(0) }) } function Y(t) { let e; let r; const i = t.split(':'); let n = null; if (i[0] === 'data' && i.length === 2) { const a = i[1].split(';'); const s = a[a.length - 1].split(','); if (s.length === 2) { const o = s[0] === 'base64'; const l = s[1]; o ? (a.splice(-1, 1), n = V(l)) : (e = W(l).subarray(0, 16), (r = new Uint8Array(16)).set(e, 16 - e.length), n = r) } } return n } function W(t) { return Uint8Array.from(unescape(encodeURIComponent(t)), function(t) { return t.charCodeAt(0) }) } const j = typeof self !== 'undefined' ? self : void 0; const q = { CLEARKEY: 'org.w3.clearkey', FAIRPLAY: 'com.apple.fps', PLAYREADY: 'com.microsoft.playready', WIDEVINE: 'com.widevine.alpha' }; const X = 'org.w3.clearkey'; const z = 'com.apple.streamingkeydelivery'; const Q = 'com.microsoft.playready'; const J = 'urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed'; function $(t) { switch (t) { case z:return q.FAIRPLAY; case Q:return q.PLAYREADY; case J:return q.WIDEVINE; case X:return q.CLEARKEY } } const Z = 'edef8ba979d64acea3c827dcd51d21ed'; function tt(t) { switch (t) { case q.FAIRPLAY:return z; case q.PLAYREADY:return Q; case q.WIDEVINE:return J; case q.CLEARKEY:return X } } function et(t) { const e = t.drmSystems; const r = t.widevineLicenseUrl; const i = e ? [q.FAIRPLAY, q.WIDEVINE, q.PLAYREADY, q.CLEARKEY].filter(function(t) { return !!e[t] }) : []; return !i[q.WIDEVINE] && r && i.push(q.WIDEVINE), i } let rt; const it = j != null && (rt = j.navigator) != null && rt.requestMediaKeySystemAccess ? self.navigator.requestMediaKeySystemAccess.bind(self.navigator) : null; function nt(t, e, r) { return Uint8Array.prototype.slice ? t.slice(e, r) : new Uint8Array(Array.prototype.slice.call(t, e, r)) } let at; const st = function(t, e) { return e + 10 <= t.length && t[e] === 73 && t[e + 1] === 68 && t[e + 2] === 51 && t[e + 3] < 255 && t[e + 4] < 255 && t[e + 6] < 128 && t[e + 7] < 128 && t[e + 8] < 128 && t[e + 9] < 128 }; const ot = function(t, e) { return e + 10 <= t.length && t[e] === 51 && t[e + 1] === 68 && t[e + 2] === 73 && t[e + 3] < 255 && t[e + 4] < 255 && t[e + 6] < 128 && t[e + 7] < 128 && t[e + 8] < 128 && t[e + 9] < 128 }; const lt = function(t, e) { for (var r = e, i = 0; st(t, e);)i += 10, i += ut(t, e + 6), ot(t, e + 10) && (i += 10), e += i; if (i > 0) return t.subarray(r, r + i) }; var ut = function(t, e) { let r = 0; return r = (127 & t[e]) << 21, r |= (127 & t[e + 1]) << 14, r |= (127 & t[e + 2]) << 7, r |= 127 & t[e + 3] }; const ht = function(t, e) { return st(t, e) && ut(t, e + 6) + 10 <= t.length - e }; const dt = function(t) { for (let e = gt(t), r = 0; r < e.length; r++) { const i = e[r]; if (ct(i)) return Et(i) } }; var ct = function(t) { return t && t.key === 'PRIV' && t.info === 'com.apple.streaming.transportStreamTimestamp' }; const ft = function(t) { const e = String.fromCharCode(t[0], t[1], t[2], t[3]); const r = ut(t, 4); return { type: e, size: r, data: t.subarray(10, 10 + r) } }; var gt = function(t) { for (var e = 0, r = []; st(t, e);) { for (let i = ut(t, e + 6), n = (e += 10) + i; e + 8 < n;) { const a = ft(t.subarray(e)); const s = vt(a); s && r.push(s), e += a.size + 10 }ot(t, e) && (e += 10) } return r }; var vt = function(t) { return t.type === 'PRIV' ? mt(t) : t.type[0] === 'W' ? yt(t) : pt(t) }; var mt = function(t) { if (!(t.size < 2)) { const e = Tt(t.data, !0); const r = new Uint8Array(t.data.subarray(e.length + 1)); return { key: t.type, info: e, data: r.buffer } } }; var pt = function(t) { if (!(t.size < 2)) { if (t.type === 'TXXX') { let e = 1; const r = Tt(t.data.subarray(e), !0); e += r.length + 1; const i = Tt(t.data.subarray(e)); return { key: t.type, info: r, data: i } } const n = Tt(t.data.subarray(1)); return { key: t.type, data: n } } }; var yt = function(t) { if (t.type === 'WXXX') { if (t.size < 2) return; let e = 1; const r = Tt(t.data.subarray(e), !0); e += r.length + 1; const i = Tt(t.data.subarray(e)); return { key: t.type, info: r, data: i } } const n = Tt(t.data); return { key: t.type, data: n } }; var Et = function(t) { if (t.data.byteLength === 8) { const e = new Uint8Array(t.data); const r = 1 & e[3]; let i = (e[4] << 23) + (e[5] << 15) + (e[6] << 7) + e[7]; return i /= 45, r && (i += 47721858.84), Math.round(i) } }; var Tt = function(t, e) { void 0 === e && (e = !1); const r = St(); if (r) { const i = r.decode(t); if (e) { const n = i.indexOf('\0'); return n !== -1 ? i.substring(0, n) : i } return i.replace(/\0/g, '') } for (var a, s, o, l = t.length, u = '', h = 0; h < l;) { if ((a = t[h++]) === 0 && e) return u; if (a !== 0 && a !== 3) switch (a >> 4) { case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:u += String.fromCharCode(a); break; case 12:case 13:s = t[h++], u += String.fromCharCode((31 & a) << 6 | 63 & s); break; case 14:s = t[h++], o = t[h++], u += String.fromCharCode((15 & a) << 12 | (63 & s) << 6 | (63 & o) << 0) } } return u }; function St() { if (!navigator.userAgent.includes('PlayStation 4')) return at || void 0 === self.TextDecoder || (at = new self.TextDecoder('utf-8')), at } const Lt = function(t) { for (var e = '', r = 0; r < t.length; r++) { let i = t[r].toString(16); i.length < 2 && (i = '0' + i), e += i } return e }; const At = Math.pow(2, 32) - 1; const Rt = [].push; const kt = { video: 1, audio: 2, id3: 3, text: 4 }; function bt(t) { return String.fromCharCode.apply(null, t) } function Dt(t, e) { const r = t[e] << 8 | t[e + 1]; return r < 0 ? 65536 + r : r } function It(t, e) { const r = Ct(t, e); return r < 0 ? 4294967296 + r : r } function wt(t, e) { let r = It(t, e); return r *= Math.pow(2, 32), r += It(t, e + 4) } function Ct(t, e) { return t[e] << 24 | t[e + 1] << 16 | t[e + 2] << 8 | t[e + 3] } function _t(t, e, r) { t[e] = r >> 24, t[e + 1] = r >> 16 & 255, t[e + 2] = r >> 8 & 255, t[e + 3] = 255 & r } function xt(t, e) { const r = []; if (!e.length) return r; for (let i = t.byteLength, n = 0; n < i;) { const a = It(t, n); const s = a > 1 ? n + a : i; if (bt(t.subarray(n + 4, n + 8)) === e[0]) if (e.length === 1)r.push(t.subarray(n + 8, s)); else { const o = xt(t.subarray(n + 8, s), e.slice(1)); o.length && Rt.apply(r, o) }n = s } return r } function Pt(t) { const e = []; const r = t[0]; let i = 8; const n = It(t, i); i += 4; let a = 0; let s = 0; r === 0 ? (a = It(t, i), s = It(t, i + 4), i += 8) : (a = wt(t, i), s = wt(t, i + 8), i += 16), i += 2; let o = t.length + s; const l = Dt(t, i); i += 2; for (let u = 0; u < l; u++) { let h = i; const d = It(t, h); h += 4; const c = 2147483647 & d; if ((2147483648 & d) >>> 31 == 1) return w.warn('SIDX has hierarchical references (not supported)'), null; const f = It(t, h); h += 4, e.push({ referenceSize: c, subsegmentDuration: f, info: { duration: f / n, start: o, end: o + c - 1 } }), o += c, i = h += 4 } return { earliestPresentationTime: a, timescale: n, version: r, referencesCount: l, references: e } } function Ft(t) { for (var e = [], r = xt(t, ['moov', 'trak']), n = 0; n < r.length; n++) { const a = r[n]; const s = xt(a, ['tkhd'])[0]; if (s) { let o = s[0]; const l = It(s, o === 0 ? 12 : 20); const u = xt(a, ['mdia', 'mdhd'])[0]; if (u) { const h = It(u, (o = u[0]) === 0 ? 12 : 20); const d = xt(a, ['mdia', 'hdlr'])[0]; if (d) { const c = bt(d.subarray(8, 12)); const f = { soun: O, vide: N }[c]; if (f) { const g = Mt(xt(a, ['mdia', 'minf', 'stbl', 'stsd'])[0]); e[l] = { timescale: h, type: f }, e[f] = i({ timescale: h, id: l }, g) } } } } } return xt(t, ['moov', 'mvex', 'trex']).forEach(function(t) { const r = It(t, 4); const i = e[r]; i && (i.default = { duration: It(t, 12), flags: It(t, 20) }) }), e } function Mt(t) { const e = t.subarray(8); const r = e.subarray(86); const i = bt(e.subarray(4, 8)); let n = i; const a = i === 'enca' || i === 'encv'; if (a) { const s = xt(e, [i])[0]; xt(s.subarray(i === 'enca' ? 28 : 78), ['sinf']).forEach(function(t) { const e = xt(t, ['schm'])[0]; if (e) { const r = bt(e.subarray(4, 8)); if (r === 'cbcs' || r === 'cenc') { const i = xt(t, ['frma'])[0]; i && (n = bt(i)) } } }) } switch (n) { case 'avc1':case 'avc2':case 'avc3':case 'avc4':var o = xt(r, ['avcC'])[0]; n += '.' + Nt(o[1]) + Nt(o[2]) + Nt(o[3]); break; case 'mp4a':var l = xt(e, [i])[0]; var u = xt(l.subarray(28), ['esds'])[0]; if (u && u.length > 12) { let h = 4; if (u[h++] !== 3) break; h = Ot(u, h), h += 2; const d = u[h++]; if (128 & d && (h += 2), 64 & d && (h += u[h++]), u[h++] !== 4) break; h = Ot(u, h); const c = u[h++]; if (c !== 64) break; if (n += '.' + Nt(c), h += 12, u[h++] !== 5) break; h = Ot(u, h); const f = u[h++]; let g = (248 & f) >> 3; g === 31 && (g += 1 + ((7 & f) << 3) + ((224 & u[h]) >> 5)), n += '.' + g } break; case 'hvc1':case 'hev1':var v = xt(r, ['hvcC'])[0]; var m = v[1]; var p = ['', 'A', 'B', 'C'][m >> 6]; var y = 31 & m; var E = It(v, 2); var T = (32 & m) >> 5 ? 'H' : 'L'; var S = v[12]; var L = v.subarray(6, 12); n += '.' + p + y, n += '.' + E.toString(16).toUpperCase(), n += '.' + T + S; for (var A = '', R = L.length; R--;) { const k = L[R]; (k || A) && (A = '.' + k.toString(16).toUpperCase() + A) }n += A; break; case 'dvh1':case 'dvhe':var b = xt(r, ['dvcC'])[0]; var D = b[2] >> 1 & 127; var I = b[2] << 5 & 32 | b[3] >> 3 & 31; n += '.' + Ut(D) + '.' + Ut(I); break; case 'vp09':var w = xt(r, ['vpcC'])[0]; var C = w[4]; var _ = w[5]; var x = w[6] >> 4 & 15; n += '.' + Ut(C) + '.' + Ut(_) + '.' + Ut(x); break; case 'av01':var P = xt(r, ['av1C'])[0]; var F = P[1] >>> 5; var M = 31 & P[1]; var O = P[2] >>> 7 ? 'H' : 'M'; var N = (64 & P[2]) >> 6; var U = (32 & P[2]) >> 5; var B = F === 2 && N ? U ? 12 : 10 : N ? 10 : 8; var G = (16 & P[2]) >> 4; var K = (8 & P[2]) >> 3; var H = (4 & P[2]) >> 2; var V = 3 & P[2]; n += '.' + F + '.' + Ut(M) + O + '.' + Ut(B) + '.' + G + '.' + K + H + V + '.' + Ut(1) + '.' + Ut(1) + '.' + Ut(1) + '.0' } return { codec: n, encrypted: a } } function Ot(t, e) { for (let r = e + 5; 128 & t[e++] && e < r;);return e } function Nt(t) { return ('0' + t.toString(16).toUpperCase()).slice(-2) } function Ut(t) { return (t < 10 ? '0' : '') + t } function Bt(t) { const e = xt(t, ['schm'])[0]; if (e) { const r = bt(e.subarray(4, 8)); if (r === 'cbcs' || r === 'cenc') return xt(t, ['schi', 'tenc'])[0] } return w.error('[eme] missing \'schm\' box'), null } function Gt(t) { const e = It(t, 0); let r = 8; 1 & e && (r += 4), 4 & e && (r += 4); for (var i = 0, n = It(t, 4), a = 0; a < n; a++)256 & e && (i += It(t, r), r += 4), 512 & e && (r += 4), 1024 & e && (r += 4), 2048 & e && (r += 4); return i } function Kt(t, e) { const r = new Uint8Array(t.length + e.length); return r.set(t), r.set(e, t.length), r } function Ht(t, e) { const r = []; const i = e.samples; const n = e.timescale; const a = e.id; let s = !1; return xt(i, ['moof']).map(function(o) { const l = o.byteOffset - 8; xt(o, ['traf']).map(function(o) { const u = xt(o, ['tfdt']).map(function(t) { const e = t[0]; let r = It(t, 4); return e === 1 && (r *= Math.pow(2, 32), r += It(t, 8)), r / n })[0]; return void 0 !== u && (t = u), xt(o, ['tfhd']).map(function(u) { const h = It(u, 4); const d = 16777215 & It(u, 0); let c = 0; const f = (16 & d) != 0; let g = 0; const v = (32 & d) != 0; let m = 8; h === a && ((1 & d) != 0 && (m += 8), (2 & d) != 0 && (m += 4), (8 & d) != 0 && (c = It(u, m), m += 4), f && (g = It(u, m), m += 4), v && (m += 4), e.type === 'video' && (s = (function(t) { if (!t) return !1; const e = t.indexOf('.'); const r = e < 0 ? t : t.substring(0, e); return r === 'hvc1' || r === 'hev1' || r === 'dvh1' || r === 'dvhe' }(e.codec))), xt(o, ['trun']).map(function(a) { const o = a[0]; const u = 16777215 & It(a, 0); const h = (1 & u) != 0; let d = 0; const f = (4 & u) != 0; const v = (256 & u) != 0; let m = 0; const p = (512 & u) != 0; let y = 0; const E = (1024 & u) != 0; const T = (2048 & u) != 0; let S = 0; const L = It(a, 4); let A = 8; h && (d = It(a, A), A += 4), f && (A += 4); for (let R = d + l, k = 0; k < L; k++) { if (v ? (m = It(a, A), A += 4) : m = c, p ? (y = It(a, A), A += 4) : y = g, E && (A += 4), T && (S = o === 0 ? It(a, A) : Ct(a, A), A += 4), e.type === N) for (let b = 0; b < y;) { const D = It(i, R); Vt(s, i[R += 4]) && Yt(i.subarray(R, R + D), s ? 2 : 1, t + S / n, r), R += D, b += D + 4 }t += m / n } })) }) }) }), r } function Vt(t, e) { if (t) { const r = e >> 1 & 63; return r === 39 || r === 40 } return (31 & e) == 6 } function Yt(t, e, r, i) { const n = Wt(t); let a = 0; a += e; for (let s = 0, o = 0, l = 0; a < n.length;) { s = 0; do { if (a >= n.length) break; s += l = n[a++] } while (l === 255); o = 0; do { if (a >= n.length) break; o += l = n[a++] } while (l === 255); const u = n.length - a; let h = a; if (o < u)a += o; else if (o > u) { w.error('Malformed SEI payload. ' + o + ' is too small, only ' + u + ' bytes left to parse.'); break } if (s === 4) { if (n[h++] === 181) { const d = Dt(n, h); if (h += 2, d === 49) { const c = It(n, h); if (h += 4, c === 1195456820) { const f = n[h++]; if (f === 3) { const g = n[h++]; const v = 64 & g; const m = v ? 2 + 3 * (31 & g) : 0; const p = new Uint8Array(m); if (v) { p[0] = g; for (let y = 1; y < m; y++)p[y] = n[h++] }i.push({ type: f, payloadType: s, pts: r, bytes: p }) } } } } } else if (s === 5 && o > 16) { for (var E = [], T = 0; T < 16; T++) { const S = n[h++].toString(16); E.push(S.length == 1 ? '0' + S : S), T !== 3 && T !== 5 && T !== 7 && T !== 9 || E.push('-') } for (var L = o - 16, A = new Uint8Array(L), R = 0; R < L; R++)A[R] = n[h++]; i.push({ payloadType: s, pts: r, uuid: E.join(''), userData: Tt(A), userDataBytes: A }) } } } function Wt(t) { for (var e = t.byteLength, r = [], i = 1; i < e - 2;)t[i] === 0 && t[i + 1] === 0 && t[i + 2] === 3 ? (r.push(i + 2), i += 2) : i++; if (r.length === 0) return t; const n = e - r.length; const a = new Uint8Array(n); let s = 0; for (i = 0; i < n; s++, i++)s === r[0] && (s++, r.shift()), a[i] = t[s]; return a } function jt(t, e, r) { if (t.byteLength !== 16) throw new RangeError('Invalid system id'); let i, n, a; if (e) { i = 1, n = new Uint8Array(16 * e.length); for (let s = 0; s < e.length; s++) { const o = e[s]; if (o.byteLength !== 16) throw new RangeError('Invalid key'); n.set(o, 16 * s) } } else i = 0, n = new Uint8Array(); i > 0 ? (a = new Uint8Array(4), e.length > 0 && new DataView(a.buffer).setUint32(0, e.length, !1)) : a = new Uint8Array(); const l = new Uint8Array(4); return r && r.byteLength > 0 && new DataView(l.buffer).setUint32(0, r.byteLength, !1), (function(t) { for (var e = arguments.length, r = new Array(e > 1 ? e - 1 : 0), i = 1; i < e; i++)r[i - 1] = arguments[i]; for (var n = r.length, a = 8, s = n; s--;)a += r[s].byteLength; const o = new Uint8Array(a); for (o[0] = a >> 24 & 255, o[1] = a >> 16 & 255, o[2] = a >> 8 & 255, o[3] = 255 & a, o.set(t, 4), s = 0, a = 8; s < n; s++)o.set(r[s], a), a += r[s].byteLength; return o }([112, 115, 115, 104], new Uint8Array([i, 0, 0, 0]), t, a, n, l, r || new Uint8Array())) } let qt = {}; const Xt = (function() { function t(t, e, r, i, n) { void 0 === i && (i = [1]), void 0 === n && (n = null), this.uri = void 0, this.method = void 0, this.keyFormat = void 0, this.keyFormatVersions = void 0, this.encrypted = void 0, this.isCommonEncryption = void 0, this.iv = null, this.key = null, this.keyId = null, this.pssh = null, this.method = t, this.uri = e, this.keyFormat = r, this.keyFormatVersions = i, this.iv = n, this.encrypted = !!t && t !== 'NONE', this.isCommonEncryption = this.encrypted && t !== 'AES-128' }t.clearKeyUriToKeyIdMap = function() { qt = {} }; const e = t.prototype; return e.isSupported = function() { if (this.method) { if (this.method === 'AES-128' || this.method === 'NONE') return !0; if (this.keyFormat === 'identity') return this.method === 'SAMPLE-AES'; switch (this.keyFormat) { case z:case J:case Q:case X:return ['ISO-23001-7', 'SAMPLE-AES', 'SAMPLE-AES-CENC', 'SAMPLE-AES-CTR'].indexOf(this.method) !== -1 } } return !1 }, e.getDecryptData = function(e) { if (!this.encrypted || !this.uri) return null; if (this.method === 'AES-128' && this.uri && !this.iv) { typeof e !== 'number' && (this.method !== 'AES-128' || this.iv || w.warn('missing IV for initialization segment with method="' + this.method + '" - compliance issue'), e = 0); const r = (function(t) { for (var e = new Uint8Array(16), r = 12; r < 16; r++)e[r] = t >> 8 * (15 - r) & 255; return e }(e)); return new t(this.method, this.uri, 'identity', this.keyFormatVersions, r) } const i = Y(this.uri); if (i) switch (this.keyFormat) { case J:this.pssh = i, i.length >= 22 && (this.keyId = i.subarray(i.length - 22, i.length - 6)); break; case Q:var n = new Uint8Array([154, 4, 240, 121, 152, 64, 66, 134, 171, 146, 230, 91, 224, 136, 95, 149]); this.pssh = jt(n, null, i); var a = new Uint16Array(i.buffer, i.byteOffset, i.byteLength / 2); var s = String.fromCharCode.apply(null, Array.from(a)); var o = s.substring(s.indexOf('<'), s.length); var l = (new DOMParser()).parseFromString(o, 'text/xml').getElementsByTagName('KID')[0]; if (l) { const u = l.childNodes[0] ? l.childNodes[0].nodeValue : l.getAttribute('VALUE'); if (u) { const h = V(u).subarray(0, 16); !(function(t) { const e = function(t, e, r) { const i = t[e]; t[e] = t[r], t[r] = i }; e(t, 0, 3), e(t, 1, 2), e(t, 4, 5), e(t, 6, 7) }(h)), this.keyId = h } } break; default:var d = i.subarray(0, 16); if (d.length !== 16) { const c = new Uint8Array(16); c.set(d, 16 - d.length), d = c } this.keyId = d } if (!this.keyId || this.keyId.byteLength !== 16) { let f = qt[this.uri]; if (!f) { const g = Object.keys(qt).length % Number.MAX_SAFE_INTEGER; f = new Uint8Array(16), new DataView(f.buffer, 12, 4).setUint32(0, g), qt[this.uri] = f } this.keyId = f } return this }, t }()); const zt = /\{\$([a-zA-Z0-9-_]+)\}/g; function Qt(t) { return zt.test(t) } function Jt(t, e, r) { if (t.variableList !== null || t.hasVariableRefs) for (let i = r.length; i--;) { const n = r[i]; const a = e[n]; a && (e[n] = $t(t, a)) } } function $t(t, e) { if (t.variableList !== null || t.hasVariableRefs) { const r = t.variableList; return e.replace(zt, function(e) { const i = e.substring(2, e.length - 1); const n = r == null ? void 0 : r[i]; return void 0 === n ? (t.playlistParsingError || (t.playlistParsingError = new Error('Missing preceding EXT-X-DEFINE tag for Variable Reference: "' + i + '"')), e) : n }) } return e } function Zt(t, e, r) { let i; let n; let a = t.variableList; if (a || (t.variableList = a = {}), 'QUERYPARAM' in e) { i = e.QUERYPARAM; try { const s = new self.URL(r).searchParams; if (!s.has(i)) throw new Error('"' + i + '" does not match any query parameter in URI: "' + r + '"'); n = s.get(i) } catch (e) { t.playlistParsingError || (t.playlistParsingError = new Error('EXT-X-DEFINE QUERYPARAM: ' + e.message)) } } else i = e.NAME, n = e.VALUE; i in a ? t.playlistParsingError || (t.playlistParsingError = new Error('EXT-X-DEFINE duplicate Variable Name declarations: "' + i + '"')) : a[i] = n || '' } function te(t, e, r) { const i = e.IMPORT; if (r && i in r) { let n = t.variableList; n || (t.variableList = n = {}), n[i] = r[i] } else t.playlistParsingError || (t.playlistParsingError = new Error('EXT-X-DEFINE IMPORT attribute not found in Multivariant Playlist: "' + i + '"')) } function ee(t) { if (void 0 === t && (t = !0), typeof self !== 'undefined') return (t || !self.MediaSource) && self.ManagedMediaSource || self.MediaSource || self.WebKitMediaSource } const re = { audio: { a3ds: 1, 'ac-3': 0.95, 'ac-4': 1, alac: 0.9, alaw: 1, dra1: 1, 'dts+': 1, 'dts-': 1, dtsc: 1, dtse: 1, dtsh: 1, 'ec-3': 0.9, enca: 1, fLaC: 0.9, flac: 0.9, FLAC: 0.9, g719: 1, g726: 1, m4ae: 1, mha1: 1, mha2: 1, mhm1: 1, mhm2: 1, mlpa: 1, mp4a: 1, 'raw ': 1, Opus: 1, opus: 1, samr: 1, sawb: 1, sawp: 1, sevc: 1, sqcp: 1, ssmv: 1, twos: 1, ulaw: 1 }, video: { avc1: 1, avc2: 1, avc3: 1, avc4: 1, avcp: 1, av01: 0.8, drac: 1, dva1: 1, dvav: 1, dvh1: 0.7, dvhe: 0.7, encv: 1, hev1: 0.75, hvc1: 0.75, mjp2: 1, mp4v: 1, mvc1: 1, mvc2: 1, mvc3: 1, mvc4: 1, resv: 1, rv60: 1, s263: 1, svc1: 1, svc2: 1, 'vc-1': 1, vp08: 1, vp09: 0.9 }, text: { stpp: 1, wvtt: 1 } }; function ie(t, e, r) { return void 0 === r && (r = !0), !t.split(',').some(function(t) { return !ne(t, e, r) }) } function ne(t, e, r) { let i; void 0 === r && (r = !0); const n = ee(r); return (i = n == null ? void 0 : n.isTypeSupported(ae(t, e))) != null && i } function ae(t, e) { return e + '/mp4;codecs="' + t + '"' } function se(t) { if (t) { const e = t.substring(0, 4); return re.video[e] } return 2 } function oe(t) { return t.split(',').reduce(function(t, e) { const r = re.video[e]; return r ? (2 * r + t) / (t ? 3 : 2) : (re.audio[e] + t) / (t ? 2 : 1) }, 0) } const le = {}; const ue = /flac|opus/i; function he(t, e) { return void 0 === e && (e = !0), t.replace(ue, function(t) { return (function(t, e) { if (void 0 === e && (e = !0), le[t]) return le[t]; for (let r = { flac: ['flac', 'fLaC', 'FLAC'], opus: ['opus', 'Opus'] }[t], i = 0; i < r.length; i++) if (ne(r[i], 'audio', e)) return le[t] = r[i], r[i]; return t }(t.toLowerCase(), e)) }) } function de(t, e) { return t && t !== 'mp4a' ? t : e ? e.split(',')[0] : e } const ce = /#EXT-X-STREAM-INF:([^\r\n]*)(?:[\r\n](?:#[^\r\n]*)?)*([^\r\n]+)|#EXT-X-(SESSION-DATA|SESSION-KEY|DEFINE|CONTENT-STEERING|START):([^\r\n]*)[\r\n]+/g; const fe = /#EXT-X-MEDIA:(.*)/g; const ge = /^#EXT(?:INF|-X-TARGETDURATION):/m; const ve = new RegExp([/#EXTINF:\s*(\d*(?:\.\d+)?)(?:,(.*)\s+)?/.source, /(?!#) *(\S[^\r\n]*)/.source, /#EXT-X-BYTERANGE:*(.+)/.source, /#EXT-X-PROGRAM-DATE-TIME:(.+)/.source, /#.*/.source].join('|'), 'g'); const me = new RegExp([/#(EXTM3U)/.source, /#EXT-X-(DATERANGE|DEFINE|KEY|MAP|PART|PART-INF|PLAYLIST-TYPE|PRELOAD-HINT|RENDITION-REPORT|SERVER-CONTROL|SKIP|START):(.+)/.source, /#EXT-X-(BITRATE|DISCONTINUITY-SEQUENCE|MEDIA-SEQUENCE|TARGETDURATION|VERSION): *(\d+)/.source, /#EXT-X-(DISCONTINUITY|ENDLIST|GAP|INDEPENDENT-SEGMENTS)/.source, /(#)([^:]*):(.*)/.source, /(#)(.*)(?:.*)\r?\n?/.source].join('|')); const pe = (function() { function t() {} return t.findGroup = function(t, e) { for (let r = 0; r < t.length; r++) { const i = t[r]; if (i.id === e) return i } }, t.resolve = function(t, e) { return p.buildAbsoluteURL(e, t, { alwaysNormalize: !0 }) }, t.isMediaPlaylist = function(t) { return ge.test(t) }, t.parseMasterPlaylist = function(e, r) { let i; const n = { contentSteering: null, levels: [], playlistParsingError: null, sessionData: null, sessionKeys: null, startTimeOffset: null, variableList: null, hasVariableRefs: Qt(e) }; const a = []; for (ce.lastIndex = 0; (i = ce.exec(e)) != null;) if (i[1]) { var s; const o = new x(i[1]); Jt(n, o, ['CODECS', 'SUPPLEMENTAL-CODECS', 'ALLOWED-CPC', 'PATHWAY-ID', 'STABLE-VARIANT-ID', 'AUDIO', 'VIDEO', 'SUBTITLES', 'CLOSED-CAPTIONS', 'NAME']); const l = $t(n, i[2]); const u = { attrs: o, bitrate: o.decimalInteger('BANDWIDTH') || o.decimalInteger('AVERAGE-BANDWIDTH'), name: o.NAME, url: t.resolve(l, r) }; const h = o.decimalResolution('RESOLUTION'); h && (u.width = h.width, u.height = h.height), Te(o.CODECS, u), (s = u.unknownCodecs) != null && s.length || a.push(u), n.levels.push(u) } else if (i[3]) { const d = i[3]; const c = i[4]; switch (d) { case 'SESSION-DATA':var f = new x(c); Jt(n, f, ['DATA-ID', 'LANGUAGE', 'VALUE', 'URI']); var g = f['DATA-ID']; g && (n.sessionData === null && (n.sessionData = {}), n.sessionData[g] = f); break; case 'SESSION-KEY':var v = ye(c, r, n); v.encrypted && v.isSupported() ? (n.sessionKeys === null && (n.sessionKeys = []), n.sessionKeys.push(v)) : w.warn('[Keys] Ignoring invalid EXT-X-SESSION-KEY tag: "' + c + '"'); break; case 'DEFINE':var m = new x(c); Jt(n, m, ['NAME', 'VALUE', 'QUERYPARAM']), Zt(n, m, r); break; case 'CONTENT-STEERING':var p = new x(c); Jt(n, p, ['SERVER-URI', 'PATHWAY-ID']), n.contentSteering = { uri: t.resolve(p['SERVER-URI'], r), pathwayId: p['PATHWAY-ID'] || '.' }; break; case 'START':n.startTimeOffset = Ee(c) } } const y = a.length > 0 && a.length < n.levels.length; return n.levels = y ? a : n.levels, n.levels.length === 0 && (n.playlistParsingError = new Error('no levels found in manifest')), n }, t.parseMasterPlaylistMedia = function(e, r, i) { let n; const a = {}; const s = i.levels; const o = { AUDIO: s.map(function(t) { return { id: t.attrs.AUDIO, audioCodec: t.audioCodec } }), SUBTITLES: s.map(function(t) { return { id: t.attrs.SUBTITLES, textCodec: t.textCodec } }), 'CLOSED-CAPTIONS': [] }; let l = 0; for (fe.lastIndex = 0; (n = fe.exec(e)) !== null;) { const u = new x(n[1]); const h = u.TYPE; if (h) { const d = o[h]; const c = a[h] || []; a[h] = c, Jt(i, u, ['URI', 'GROUP-ID', 'LANGUAGE', 'ASSOC-LANGUAGE', 'STABLE-RENDITION-ID', 'NAME', 'INSTREAM-ID', 'CHARACTERISTICS', 'CHANNELS']); const f = u.LANGUAGE; const g = u['ASSOC-LANGUAGE']; const v = u.CHANNELS; const m = u.CHARACTERISTICS; const p = u['INSTREAM-ID']; const y = { attrs: u, bitrate: 0, id: l++, groupId: u['GROUP-ID'] || '', name: u.NAME || f || '', type: h, default: u.bool('DEFAULT'), autoselect: u.bool('AUTOSELECT'), forced: u.bool('FORCED'), lang: f, url: u.URI ? t.resolve(u.URI, r) : '' }; if (g && (y.assocLang = g), v && (y.channels = v), m && (y.characteristics = m), p && (y.instreamId = p), d != null && d.length) { const E = t.findGroup(d, y.groupId) || d[0]; Se(y, E, 'audioCodec'), Se(y, E, 'textCodec') }c.push(y) } } return a }, t.parseLevelPlaylist = function(t, e, r, i, n, a) { let s; let l; let u; const h = new H(e); const d = h.fragments; let c = null; let f = 0; let g = 0; let v = 0; let m = 0; let p = null; let E = new G(i, e); let T = -1; let S = !1; let L = null; for (ve.lastIndex = 0, h.m3u8 = t, h.hasVariableRefs = Qt(t); (s = ve.exec(t)) !== null;) { S && (S = !1, (E = new G(i, e)).start = v, E.sn = f, E.cc = m, E.level = r, c && (E.initSegment = c, E.rawProgramDateTime = c.rawProgramDateTime, c.rawProgramDateTime = null, L && (E.setByteRange(L), L = null))); const A = s[1]; if (A) { E.duration = parseFloat(A); const R = (' ' + s[2]).slice(1); E.title = R || null, E.tagList.push(R ? ['INF', A, R] : ['INF', A]) } else if (s[3]) { if (y(E.duration)) { E.start = v, u && Re(E, u, h), E.sn = f, E.level = r, E.cc = m, d.push(E); const k = (' ' + s[3]).slice(1); E.relurl = $t(h, k), Le(E, p), p = E, v += E.duration, f++, g = 0, S = !0 } } else if (s[4]) { const b = (' ' + s[4]).slice(1); p ? E.setByteRange(b, p) : E.setByteRange(b) } else if (s[5])E.rawProgramDateTime = (' ' + s[5]).slice(1), E.tagList.push(['PROGRAM-DATE-TIME', E.rawProgramDateTime]), T === -1 && (T = d.length); else { if (!(s = s[0].match(me))) { w.warn('No matches on slow regex match for level playlist!'); continue } for (l = 1; l < s.length && void 0 === s[l]; l++);const D = (' ' + s[l]).slice(1); const I = (' ' + s[l + 1]).slice(1); const C = s[l + 2] ? (' ' + s[l + 2]).slice(1) : ''; switch (D) { case 'PLAYLIST-TYPE':h.type = I.toUpperCase(); break; case 'MEDIA-SEQUENCE':f = h.startSN = parseInt(I); break; case 'SKIP':var _ = new x(I); Jt(h, _, ['RECENTLY-REMOVED-DATERANGES']); var P = _.decimalInteger('SKIPPED-SEGMENTS'); if (y(P)) { h.skippedSegments = P; for (let M = P; M--;)d.unshift(null); f += P } var O = _.enumeratedString('RECENTLY-REMOVED-DATERANGES'); O && (h.recentlyRemovedDateranges = O.split('\t')); break; case 'TARGETDURATION':h.targetduration = Math.max(parseInt(I), 1); break; case 'VERSION':h.version = parseInt(I); break; case 'INDEPENDENT-SEGMENTS':case 'EXTM3U':break; case 'ENDLIST':h.live = !1; break; case '#':(I || C) && E.tagList.push(C ? [I, C] : [I]); break; case 'DISCONTINUITY':m++, E.tagList.push(['DIS']); break; case 'GAP':E.gap = !0, E.tagList.push([D]); break; case 'BITRATE':E.tagList.push([D, I]); break; case 'DATERANGE':var N = new x(I); Jt(h, N, ['ID', 'CLASS', 'START-DATE', 'END-DATE', 'SCTE35-CMD', 'SCTE35-OUT', 'SCTE35-IN']), Jt(h, N, N.clientAttrs); var U = new F(N, h.dateRanges[N.ID]); U.isValid || h.skippedSegments ? h.dateRanges[U.id] = U : w.warn('Ignoring invalid DATERANGE tag: "' + I + '"'), E.tagList.push(['EXT-X-DATERANGE', I]); break; case 'DEFINE':var B = new x(I); Jt(h, B, ['NAME', 'VALUE', 'IMPORT', 'QUERYPARAM']), 'IMPORT' in B ? te(h, B, a) : Zt(h, B, e); break; case 'DISCONTINUITY-SEQUENCE':m = parseInt(I); break; case 'KEY':var V = ye(I, e, h); if (V.isSupported()) { if (V.method === 'NONE') { u = void 0; break }u || (u = {}), u[V.keyFormat] && (u = o({}, u)), u[V.keyFormat] = V } else w.warn('[Keys] Ignoring invalid EXT-X-KEY tag: "' + I + '"'); break; case 'START':h.startTimeOffset = Ee(I); break; case 'MAP':var Y = new x(I); if (Jt(h, Y, ['BYTERANGE', 'URI']), E.duration) { const W = new G(i, e); Ae(W, Y, r, u), c = W, E.initSegment = c, c.rawProgramDateTime && !E.rawProgramDateTime && (E.rawProgramDateTime = c.rawProgramDateTime) } else { const j = E.byteRangeEndOffset; if (j) { const q = E.byteRangeStartOffset; L = j - q + '@' + q } else L = null; Ae(E, Y, r, u), c = E, S = !0 } break; case 'SERVER-CONTROL':var X = new x(I); h.canBlockReload = X.bool('CAN-BLOCK-RELOAD'), h.canSkipUntil = X.optionalFloat('CAN-SKIP-UNTIL', 0), h.canSkipDateRanges = h.canSkipUntil > 0 && X.bool('CAN-SKIP-DATERANGES'), h.partHoldBack = X.optionalFloat('PART-HOLD-BACK', 0), h.holdBack = X.optionalFloat('HOLD-BACK', 0); break; case 'PART-INF':var z = new x(I); h.partTarget = z.decimalFloatingPoint('PART-TARGET'); break; case 'PART':var Q = h.partList; Q || (Q = h.partList = []); var J = g > 0 ? Q[Q.length - 1] : void 0; var $ = g++; var Z = new x(I); Jt(h, Z, ['BYTERANGE', 'URI']); var tt = new K(Z, E, e, $, J); Q.push(tt), E.duration += tt.duration; break; case 'PRELOAD-HINT':var et = new x(I); Jt(h, et, ['URI']), h.preloadHint = et; break; case 'RENDITION-REPORT':var rt = new x(I); Jt(h, rt, ['URI']), h.renditionReports = h.renditionReports || [], h.renditionReports.push(rt); break; default:w.warn('line parsed but not handled: ' + s) } } }p && !p.relurl ? (d.pop(), v -= p.duration, h.partList && (h.fragmentHint = p)) : h.partList && (Le(E, p), E.cc = m, h.fragmentHint = E, u && Re(E, u, h)); const it = d.length; const nt = d[0]; const at = d[it - 1]; if ((v += h.skippedSegments * h.targetduration) > 0 && it && at) { h.averagetargetduration = v / it; const st = at.sn; h.endSN = st !== 'initSegment' ? st : 0, h.live || (at.endList = !0), nt && (h.startCC = nt.cc) } else h.endSN = 0, h.startCC = 0; return h.fragmentHint && (v += h.fragmentHint.duration), h.totalduration = v, h.endCC = m, T > 0 && (function(t, e) { for (let r = t[e], i = e; i--;) { const n = t[i]; if (!n) return; n.programDateTime = r.programDateTime - 1e3 * n.duration, r = n } }(d, T)), h }, t }()); function ye(t, e, r) { let i; let n; const a = new x(t); Jt(r, a, ['KEYFORMAT', 'KEYFORMATVERSIONS', 'URI', 'IV', 'URI']); const s = (i = a.METHOD) != null ? i : ''; const o = a.URI; const l = a.hexadecimalInteger('IV'); const u = a.KEYFORMATVERSIONS; const h = (n = a.KEYFORMAT) != null ? n : 'identity'; o && a.IV && !l && w.error('Invalid IV: ' + a.IV); const d = o ? pe.resolve(o, e) : ''; const c = (u || '1').split('/').map(Number).filter(Number.isFinite); return new Xt(s, d, h, c, l) } function Ee(t) { const e = new x(t).decimalFloatingPoint('TIME-OFFSET'); return y(e) ? e : null } function Te(t, e) { let r = (t || '').split(/[ ,]+/).filter(function(t) { return t }); ['video', 'audio', 'text'].forEach(function(t) { const i = r.filter(function(e) { return (function(t, e) { const r = re[e]; return !!r && !!r[t.slice(0, 4)] }(e, t)) }); i.length && (e[t + 'Codec'] = i.join(','), r = r.filter(function(t) { return i.indexOf(t) === -1 })) }), e.unknownCodecs = r } function Se(t, e, r) { const i = e[r]; i && (t[r] = i) } function Le(t, e) { t.rawProgramDateTime ? t.programDateTime = Date.parse(t.rawProgramDateTime) : e != null && e.programDateTime && (t.programDateTime = e.endProgramDateTime), y(t.programDateTime) || (t.programDateTime = null, t.rawProgramDateTime = null) } function Ae(t, e, r, i) { t.relurl = e.URI, e.BYTERANGE && t.setByteRange(e.BYTERANGE), t.level = r, t.sn = 'initSegment', i && (t.levelkeys = i), t.initSegment = null } function Re(t, e, r) { t.levelkeys = e; const i = r.encryptedFragments; i.length && i[i.length - 1].levelkeys === e || !Object.keys(e).some(function(t) { return e[t].isCommonEncryption }) || i.push(t) } const ke = 'manifest'; const be = 'level'; const De = 'audioTrack'; const Ie = 'subtitleTrack'; const we = 'main'; const Ce = 'audio'; const _e = 'subtitle'; function xe(t) { switch (t.type) { case De:return Ce; case Ie:return _e; default:return we } } function Pe(t, e) { let r = t.url; return void 0 !== r && r.indexOf('data:') !== 0 || (r = e.url), r } const Fe = (function() { function t(t) { this.hls = void 0, this.loaders = Object.create(null), this.variableList = null, this.hls = t, this.registerListeners() } const e = t.prototype; return e.startLoad = function(t) {}, e.stopLoad = function() { this.destroyInternalLoaders() }, e.registerListeners = function() { const t = this.hls; t.on(S.MANIFEST_LOADING, this.onManifestLoading, this), t.on(S.LEVEL_LOADING, this.onLevelLoading, this), t.on(S.AUDIO_TRACK_LOADING, this.onAudioTrackLoading, this), t.on(S.SUBTITLE_TRACK_LOADING, this.onSubtitleTrackLoading, this) }, e.unregisterListeners = function() { const t = this.hls; t.off(S.MANIFEST_LOADING, this.onManifestLoading, this), t.off(S.LEVEL_LOADING, this.onLevelLoading, this), t.off(S.AUDIO_TRACK_LOADING, this.onAudioTrackLoading, this), t.off(S.SUBTITLE_TRACK_LOADING, this.onSubtitleTrackLoading, this) }, e.createInternalLoader = function(t) { const e = this.hls.config; const r = e.pLoader; const i = e.loader; const n = new (r || i)(e); return this.loaders[t.type] = n, n }, e.getInternalLoader = function(t) { return this.loaders[t.type] }, e.resetInternalLoader = function(t) { this.loaders[t] && delete this.loaders[t] }, e.destroyInternalLoaders = function() { for (const t in this.loaders) { const e = this.loaders[t]; e && e.destroy(), this.resetInternalLoader(t) } }, e.destroy = function() { this.variableList = null, this.unregisterListeners(), this.destroyInternalLoaders() }, e.onManifestLoading = function(t, e) { const r = e.url; this.variableList = null, this.load({ id: null, level: 0, responseType: 'text', type: ke, url: r, deliveryDirectives: null }) }, e.onLevelLoading = function(t, e) { const r = e.id; const i = e.level; const n = e.pathwayId; const a = e.url; const s = e.deliveryDirectives; this.load({ id: r, level: i, pathwayId: n, responseType: 'text', type: be, url: a, deliveryDirectives: s }) }, e.onAudioTrackLoading = function(t, e) { const r = e.id; const i = e.groupId; const n = e.url; const a = e.deliveryDirectives; this.load({ id: r, groupId: i, level: null, responseType: 'text', type: De, url: n, deliveryDirectives: a }) }, e.onSubtitleTrackLoading = function(t, e) { const r = e.id; const i = e.groupId; const n = e.url; const a = e.deliveryDirectives; this.load({ id: r, groupId: i, level: null, responseType: 'text', type: Ie, url: n, deliveryDirectives: a }) }, e.load = function(t) { let e; let r; let i; const n = this; const a = this.hls.config; let s = this.getInternalLoader(t); if (s) { const l = s.context; if (l && l.url === t.url && l.level === t.level) return void w.trace('[playlist-loader]: playlist request ongoing'); w.log('[playlist-loader]: aborting previous loader for type: ' + t.type), s.abort() } if (r = t.type === ke ? a.manifestLoadPolicy.default : o({}, a.playlistLoadPolicy.default, { timeoutRetry: null, errorRetry: null }), s = this.createInternalLoader(t), y((e = t.deliveryDirectives) == null ? void 0 : e.part) && (t.type === be && t.level !== null ? i = this.hls.levels[t.level].details : t.type === De && t.id !== null ? i = this.hls.audioTracks[t.id].details : t.type === Ie && t.id !== null && (i = this.hls.subtitleTracks[t.id].details), i)) { const u = i.partTarget; const h = i.targetduration; if (u && h) { const d = 1e3 * Math.max(3 * u, 0.8 * h); r = o({}, r, { maxTimeToFirstByteMs: Math.min(d, r.maxTimeToFirstByteMs), maxLoadTimeMs: Math.min(d, r.maxTimeToFirstByteMs) }) } } const c = r.errorRetry || r.timeoutRetry || {}; const f = { loadPolicy: r, timeout: r.maxLoadTimeMs, maxRetry: c.maxNumRetry || 0, retryDelay: c.retryDelayMs || 0, maxRetryDelay: c.maxRetryDelayMs || 0 }; const g = { onSuccess: function(t, e, r, i) { const a = n.getInternalLoader(r); n.resetInternalLoader(r.type); const s = t.data; s.indexOf('#EXTM3U') === 0 ? (e.parsing.start = performance.now(), pe.isMediaPlaylist(s) ? n.handleTrackOrLevelPlaylist(t, e, r, i || null, a) : n.handleMasterPlaylist(t, e, r, i)) : n.handleManifestParsingError(t, r, new Error('no EXTM3U delimiter'), i || null, e) }, onError: function(t, e, r, i) { n.handleNetworkError(e, r, !1, t, i) }, onTimeout: function(t, e, r) { n.handleNetworkError(e, r, !0, void 0, t) } }; s.load(t, f, g) }, e.handleMasterPlaylist = function(t, e, r, i) { const n = this.hls; const a = t.data; const s = Pe(t, r); const o = pe.parseMasterPlaylist(a, s); if (o.playlistParsingError) this.handleManifestParsingError(t, r, o.playlistParsingError, i, e); else { const l = o.contentSteering; const u = o.levels; const h = o.sessionData; const d = o.sessionKeys; const c = o.startTimeOffset; const f = o.variableList; this.variableList = f; const g = pe.parseMasterPlaylistMedia(a, s, o); const v = g.AUDIO; const m = void 0 === v ? [] : v; const p = g.SUBTITLES; const y = g['CLOSED-CAPTIONS']; m.length && (m.some(function(t) { return !t.url }) || !u[0].audioCodec || u[0].attrs.AUDIO || (w.log('[playlist-loader]: audio codec signaled in quality level, but no embedded audio track signaled, create one'), m.unshift({ type: 'main', name: 'main', groupId: 'main', default: !1, autoselect: !1, forced: !1, id: -1, attrs: new x({}), bitrate: 0, url: '' }))), n.trigger(S.MANIFEST_LOADED, { levels: u, audioTracks: m, subtitles: p, captions: y, contentSteering: l, url: s, stats: e, networkDetails: i, sessionData: h, sessionKeys: d, startTimeOffset: c, variableList: f }) } }, e.handleTrackOrLevelPlaylist = function(t, e, r, i, n) { const a = this.hls; const s = r.id; const o = r.level; const l = r.type; const u = Pe(t, r); const h = y(o) ? o : y(s) ? s : 0; const d = xe(r); const c = pe.parseLevelPlaylist(t.data, u, h, d, 0, this.variableList); if (l === ke) { const f = { attrs: new x({}), bitrate: 0, details: c, name: '', url: u }; a.trigger(S.MANIFEST_LOADED, { levels: [f], audioTracks: [], url: u, stats: e, networkDetails: i, sessionData: null, sessionKeys: null, contentSteering: null, startTimeOffset: null, variableList: null }) }e.parsing.end = performance.now(), r.levelDetails = c, this.handlePlaylistLoaded(c, t, e, r, i, n) }, e.handleManifestParsingError = function(t, e, r, i, n) { this.hls.trigger(S.ERROR, { type: L.NETWORK_ERROR, details: A.MANIFEST_PARSING_ERROR, fatal: e.type === ke, url: t.url, err: r, error: r, reason: r.message, response: t, context: e, networkDetails: i, stats: n }) }, e.handleNetworkError = function(t, e, r, n, a) { void 0 === r && (r = !1); let s = 'A network ' + (r ? 'timeout' : 'error' + (n ? ' (status ' + n.code + ')' : '')) + ' occurred while loading ' + t.type; t.type === be ? s += ': ' + t.level + ' id: ' + t.id : t.type !== De && t.type !== Ie || (s += ' id: ' + t.id + ' group-id: "' + t.groupId + '"'); const o = new Error(s); w.warn('[playlist-loader]: ' + s); let l = A.UNKNOWN; let u = !1; const h = this.getInternalLoader(t); switch (t.type) { case ke:l = r ? A.MANIFEST_LOAD_TIMEOUT : A.MANIFEST_LOAD_ERROR, u = !0; break; case be:l = r ? A.LEVEL_LOAD_TIMEOUT : A.LEVEL_LOAD_ERROR, u = !1; break; case De:l = r ? A.AUDIO_TRACK_LOAD_TIMEOUT : A.AUDIO_TRACK_LOAD_ERROR, u = !1; break; case Ie:l = r ? A.SUBTITLE_TRACK_LOAD_TIMEOUT : A.SUBTITLE_LOAD_ERROR, u = !1 }h && this.resetInternalLoader(t.type); const d = { type: L.NETWORK_ERROR, details: l, fatal: u, url: t.url, loader: h, context: t, error: o, networkDetails: e, stats: a }; if (n) { const c = (e == null ? void 0 : e.url) || t.url; d.response = i({ url: c, data: void 0 }, n) } this.hls.trigger(S.ERROR, d) }, e.handlePlaylistLoaded = function(t, e, r, i, n, a) { const s = this.hls; const o = i.type; const l = i.level; const u = i.id; const h = i.groupId; const d = i.deliveryDirectives; const c = Pe(e, i); const f = xe(i); const g = typeof i.level === 'number' && f === we ? l : void 0; if (t.fragments.length) { t.targetduration || (t.playlistParsingError = new Error('Missing Target Duration')); const v = t.playlistParsingError; if (v)s.trigger(S.ERROR, { type: L.NETWORK_ERROR, details: A.LEVEL_PARSING_ERROR, fatal: !1, url: c, error: v, reason: v.message, response: e, context: i, level: g, parent: f, networkDetails: n, stats: r }); else switch (t.live && a && (a.getCacheAge && (t.ageHeader = a.getCacheAge() || 0), a.getCacheAge && !isNaN(t.ageHeader) || (t.ageHeader = 0)), o) { case ke:case be:s.trigger(S.LEVEL_LOADED, { details: t, level: g || 0, id: u || 0, stats: r, networkDetails: n, deliveryDirectives: d }); break; case De:s.trigger(S.AUDIO_TRACK_LOADED, { details: t, id: u || 0, groupId: h || '', stats: r, networkDetails: n, deliveryDirectives: d }); break; case Ie:s.trigger(S.SUBTITLE_TRACK_LOADED, { details: t, id: u || 0, groupId: h || '', stats: r, networkDetails: n, deliveryDirectives: d }) } } else { const m = new Error('No Segments found in Playlist'); s.trigger(S.ERROR, { type: L.NETWORK_ERROR, details: A.LEVEL_EMPTY_ERROR, fatal: !1, url: c, error: m, reason: m.message, response: e, context: i, level: g, parent: f, networkDetails: n, stats: r }) } }, t }()); function Me(t, e) { let r; try { r = new Event('addtrack') } catch (t) { (r = document.createEvent('Event')).initEvent('addtrack', !1, !1) }r.track = t, e.dispatchEvent(r) } function Oe(t, e) { const r = t.mode; if (r === 'disabled' && (t.mode = 'hidden'), t.cues && !t.cues.getCueById(e.id)) try { if (t.addCue(e), !t.cues.getCueById(e.id)) throw new Error('addCue is failed for: ' + e) } catch (r) { w.debug('[texttrack-utils]: ' + r); try { const i = new self.TextTrackCue(e.startTime, e.endTime, e.text); i.id = e.id, t.addCue(i) } catch (t) { w.debug('[texttrack-utils]: Legacy TextTrackCue fallback failed: ' + t) } }r === 'disabled' && (t.mode = r) } function Ne(t) { const e = t.mode; if (e === 'disabled' && (t.mode = 'hidden'), t.cues) for (let r = t.cues.length; r--;)t.removeCue(t.cues[r]); e === 'disabled' && (t.mode = e) } function Ue(t, e, r, i) { const n = t.mode; if (n === 'disabled' && (t.mode = 'hidden'), t.cues && t.cues.length > 0) for (let a = (function(t, e, r) { const i = []; const n = (function(t, e) { if (e < t[0].startTime) return 0; const r = t.length - 1; if (e > t[r].endTime) return -1; for (var i = 0, n = r; i <= n;) { const a = Math.floor((n + i) / 2); if (e < t[a].startTime)n = a - 1; else { if (!(e > t[a].startTime && i < r)) return a; i = a + 1 } } return t[i].startTime - e < e - t[n].startTime ? i : n }(t, e)); if (n > -1) for (let a = n, s = t.length; a < s; a++) { const o = t[a]; if (o.startTime >= e && o.endTime <= r)i.push(o); else if (o.startTime > r) return i } return i }(t.cues, e, r)), s = 0; s < a.length; s++)i && !i(a[s]) || t.removeCue(a[s]); n === 'disabled' && (t.mode = n) } function Be(t) { for (var e = [], r = 0; r < t.length; r++) { const i = t[r]; i.kind !== 'subtitles' && i.kind !== 'captions' || !i.label || e.push(t[r]) } return e } const Ge = 'org.id3'; const Ke = 'com.apple.quicktime.HLS'; const He = 'https://aomedia.org/emsg/ID3'; function Ve() { if (typeof self !== 'undefined') return self.VTTCue || self.TextTrackCue } function Ye(t, e, r, n, a) { let s = new t(e, r, ''); try { s.value = n, a && (s.type = a) } catch (o) { s = new t(e, r, JSON.stringify(a ? i({ type: a }, n) : n)) } return s } const We = (function() { const t = Ve(); try { t && new t(0, Number.POSITIVE_INFINITY, '') } catch (t) { return Number.MAX_VALUE } return Number.POSITIVE_INFINITY }()); function je(t, e) { return t.getTime() / 1e3 - e } const qe = (function() { function t(t) { this.hls = void 0, this.id3Track = null, this.media = null, this.dateRangeCuesAppended = {}, this.hls = t, this._registerListeners() } const e = t.prototype; return e.destroy = function() { this._unregisterListeners(), this.id3Track = null, this.media = null, this.dateRangeCuesAppended = {}, this.hls = null }, e._registerListeners = function() { const t = this.hls; t.on(S.MEDIA_ATTACHED, this.onMediaAttached, this), t.on(S.MEDIA_DETACHING, this.onMediaDetaching, this), t.on(S.MANIFEST_LOADING, this.onManifestLoading, this), t.on(S.FRAG_PARSING_METADATA, this.onFragParsingMetadata, this), t.on(S.BUFFER_FLUSHING, this.onBufferFlushing, this), t.on(S.LEVEL_UPDATED, this.onLevelUpdated, this) }, e._unregisterListeners = function() { const t = this.hls; t.off(S.MEDIA_ATTACHED, this.onMediaAttached, this), t.off(S.MEDIA_DETACHING, this.onMediaDetaching, this), t.off(S.MANIFEST_LOADING, this.onManifestLoading, this), t.off(S.FRAG_PARSING_METADATA, this.onFragParsingMetadata, this), t.off(S.BUFFER_FLUSHING, this.onBufferFlushing, this), t.off(S.LEVEL_UPDATED, this.onLevelUpdated, this) }, e.onMediaAttached = function(t, e) { this.media = e.media }, e.onMediaDetaching = function() { this.id3Track && (Ne(this.id3Track), this.id3Track = null, this.media = null, this.dateRangeCuesAppended = {}) }, e.onManifestLoading = function() { this.dateRangeCuesAppended = {} }, e.createTrack = function(t) { const e = this.getID3Track(t.textTracks); return e.mode = 'hidden', e }, e.getID3Track = function(t) { if (this.media) { for (let e = 0; e < t.length; e++) { const r = t[e]; if (r.kind === 'metadata' && r.label === 'id3') return Me(r, this.media), r } return this.media.addTextTrack('metadata', 'id3') } }, e.onFragParsingMetadata = function(t, e) { if (this.media) { const r = this.hls.config; const i = r.enableEmsgMetadataCues; const n = r.enableID3MetadataCues; if (i || n) { const a = e.samples; this.id3Track || (this.id3Track = this.createTrack(this.media)); const s = Ve(); if (s) for (let o = 0; o < a.length; o++) { const l = a[o].type; if ((l !== He || i) && n) { const u = gt(a[o].data); if (u) { const h = a[o].pts; let d = h + a[o].duration; d > We && (d = We), d - h <= 0 && (d = h + 0.25); for (let c = 0; c < u.length; c++) { const f = u[c]; if (!ct(f)) { this.updateId3CueEnds(h, l); const g = Ye(s, h, d, f, l); g && this.id3Track.addCue(g) } } } } } } } }, e.updateId3CueEnds = function(t, e) { let r; const i = (r = this.id3Track) == null ? void 0 : r.cues; if (i) for (let n = i.length; n--;) { const a = i[n]; a.type === e && a.startTime < t && a.endTime === We && (a.endTime = t) } }, e.onBufferFlushing = function(t, e) { const r = e.startOffset; const i = e.endOffset; const n = e.type; const a = this.id3Track; const s = this.hls; if (s) { const o = s.config; const l = o.enableEmsgMetadataCues; const u = o.enableID3MetadataCues; a && (l || u) && Ue(a, r, i, n === 'audio' ? function(t) { return t.type === Ge && u } : n === 'video' ? function(t) { return t.type === He && l } : function(t) { return t.type === Ge && u || t.type === He && l }) } }, e.onLevelUpdated = function(t, e) { const r = this; const i = e.details; if (this.media && i.hasProgramDateTime && this.hls.config.enableDateRangeMetadataCues) { const n = this.dateRangeCuesAppended; const a = this.id3Track; const s = i.dateRanges; const o = Object.keys(s); if (a) for (var l = Object.keys(n).filter(function(t) { return !o.includes(t) }), u = function() { const t = l[h]; Object.keys(n[t].cues).forEach(function(e) { a.removeCue(n[t].cues[e]) }), delete n[t] }, h = l.length; h--;)u(); const d = i.fragments[i.fragments.length - 1]; if (o.length !== 0 && y(d == null ? void 0 : d.programDateTime)) { this.id3Track || (this.id3Track = this.createTrack(this.media)); for (var c = d.programDateTime / 1e3 - d.start, f = Ve(), g = function() { const t = o[v]; const e = s[t]; const i = je(e.startDate, c); const a = n[t]; const l = (a == null ? void 0 : a.cues) || {}; let u = (a == null ? void 0 : a.durationKnown) || !1; let h = We; const d = e.endDate; if (d)h = je(d, c), u = !0; else if (e.endOnNext && !u) { const g = o.reduce(function(t, r) { if (r !== e.id) { const i = s[r]; if (i.class === e.class && i.startDate > e.startDate && (!t || e.startDate < t.startDate)) return i } return t }, null); g && (h = je(g.startDate, c), u = !0) } for (var m, p, y = Object.keys(e.attr), E = 0; E < y.length; E++) { const T = y[E]; if ((p = T) !== 'ID' && p !== 'CLASS' && p !== 'START-DATE' && p !== 'DURATION' && p !== 'END-DATE' && p !== 'END-ON-NEXT') { const S = l[T]; if (S)u && !a.durationKnown && (S.endTime = h); else if (f) { let L = e.attr[T]; P(T) && (m = L, L = Uint8Array.from(m.replace(/^0x/, '').replace(/([\da-fA-F]{2}) ?/g, '0x$1 ').replace(/ +$/, '').split(' ')).buffer); const A = Ye(f, i, h, { key: T, data: L }, Ke); A && (A.id = t, r.id3Track.addCue(A), l[T] = A) } } }n[t] = { cues: l, dateRange: e, durationKnown: u } }, v = 0; v < o.length; v++)g() } } }, t }()); const Xe = (function() { function t(t) { const e = this; this.hls = void 0, this.config = void 0, this.media = null, this.levelDetails = null, this.currentTime = 0, this.stallCount = 0, this._latency = null, this.timeupdateHandler = function() { return e.timeupdate() }, this.hls = t, this.config = t.config, this.registerListeners() } const e = t.prototype; return e.destroy = function() { this.unregisterListeners(), this.onMediaDetaching(), this.levelDetails = null, this.hls = this.timeupdateHandler = null }, e.registerListeners = function() { this.hls.on(S.MEDIA_ATTACHED, this.onMediaAttached, this), this.hls.on(S.MEDIA_DETACHING, this.onMediaDetaching, this), this.hls.on(S.MANIFEST_LOADING, this.onManifestLoading, this), this.hls.on(S.LEVEL_UPDATED, this.onLevelUpdated, this), this.hls.on(S.ERROR, this.onError, this) }, e.unregisterListeners = function() { this.hls.off(S.MEDIA_ATTACHED, this.onMediaAttached, this), this.hls.off(S.MEDIA_DETACHING, this.onMediaDetaching, this), this.hls.off(S.MANIFEST_LOADING, this.onManifestLoading, this), this.hls.off(S.LEVEL_UPDATED, this.onLevelUpdated, this), this.hls.off(S.ERROR, this.onError, this) }, e.onMediaAttached = function(t, e) { this.media = e.media, this.media.addEventListener('timeupdate', this.timeupdateHandler) }, e.onMediaDetaching = function() { this.media && (this.media.removeEventListener('timeupdate', this.timeupdateHandler), this.media = null) }, e.onManifestLoading = function() { this.levelDetails = null, this._latency = null, this.stallCount = 0 }, e.onLevelUpdated = function(t, e) { const r = e.details; this.levelDetails = r, r.advanced && this.timeupdate(), !r.live && this.media && this.media.removeEventListener('timeupdate', this.timeupdateHandler) }, e.onError = function(t, e) { let r; e.details === A.BUFFER_STALLED_ERROR && (this.stallCount++, (r = this.levelDetails) != null && r.live && w.warn('[playback-rate-controller]: Stall detected, adjusting target latency')) }, e.timeupdate = function() { const t = this.media; const e = this.levelDetails; if (t && e) { this.currentTime = t.currentTime; const r = this.computeLatency(); if (r !== null) { this._latency = r; const i = this.config; const n = i.lowLatencyMode; const a = i.maxLiveSyncPlaybackRate; if (n && a !== 1 && e.live) { const s = this.targetLatency; if (s !== null) { const o = r - s; if (o < Math.min(this.maxLatency, s + e.targetduration) && o > 0.05 && this.forwardBufferLength > 1) { const l = Math.min(2, Math.max(1, a)); const u = Math.round(2 / (1 + Math.exp(-0.75 * o - this.edgeStalled)) * 20) / 20; t.playbackRate = Math.min(l, Math.max(1, u)) } else t.playbackRate !== 1 && t.playbackRate !== 0 && (t.playbackRate = 1) } } } } }, e.estimateLiveEdge = function() { const t = this.levelDetails; return t === null ? null : t.edge + t.age }, e.computeLatency = function() { const t = this.estimateLiveEdge(); return t === null ? null : t - this.currentTime }, s(t, [{ key: 'latency', get: function() { return this._latency || 0 } }, { key: 'maxLatency', get: function() { const t = this.config; const e = this.levelDetails; return void 0 !== t.liveMaxLatencyDuration ? t.liveMaxLatencyDuration : e ? t.liveMaxLatencyDurationCount * e.targetduration : 0 } }, { key: 'targetLatency', get: function() { const t = this.levelDetails; if (t === null) return null; const e = t.holdBack; const r = t.partHoldBack; const i = t.targetduration; const n = this.config; const a = n.liveSyncDuration; const s = n.liveSyncDurationCount; const o = n.lowLatencyMode; const l = this.hls.userConfig; let u = o && r || e; (l.liveSyncDuration || l.liveSyncDurationCount || u === 0) && (u = void 0 !== a ? a : s * i); const h = i; return u + Math.min(1 * this.stallCount, h) } }, { key: 'liveSyncPosition', get: function() { const t = this.estimateLiveEdge(); const e = this.targetLatency; const r = this.levelDetails; if (t === null || e === null || r === null) return null; const i = r.edge; const n = t - e - this.edgeStalled; const a = i - r.totalduration; const s = i - (this.config.lowLatencyMode && r.partTarget || r.targetduration); return Math.min(Math.max(a, n), s) } }, { key: 'drift', get: function() { const t = this.levelDetails; return t === null ? 1 : t.drift } }, { key: 'edgeStalled', get: function() { const t = this.levelDetails; if (t === null) return 0; const e = 3 * (this.config.lowLatencyMode && t.partTarget || t.targetduration); return Math.max(t.age - e, 0) } }, { key: 'forwardBufferLength', get: function() { const t = this.media; const e = this.levelDetails; if (!t || !e) return 0; const r = t.buffered.length; return (r ? t.buffered.end(r - 1) : e.edge) - this.currentTime } }]), t }()); const ze = ['NONE', 'TYPE-0', 'TYPE-1', null]; const Qe = ['SDR', 'PQ', 'HLG']; const Je = ''; const $e = 'YES'; const Ze = 'v2'; function tr(t) { const e = t.canSkipUntil; const r = t.canSkipDateRanges; const i = t.age; return e && i < e / 2 ? r ? Ze : $e : Je } const er = (function() { function t(t, e, r) { this.msn = void 0, this.part = void 0, this.skip = void 0, this.msn = t, this.part = e, this.skip = r } return t.prototype.addDirectives = function(t) { const e = new self.URL(t); return void 0 !== this.msn && e.searchParams.set('_HLS_msn', this.msn.toString()), void 0 !== this.part && e.searchParams.set('_HLS_part', this.part.toString()), this.skip && e.searchParams.set('_HLS_skip', this.skip), e.href }, t }()); const rr = (function() { function t(t) { this._attrs = void 0, this.audioCodec = void 0, this.bitrate = void 0, this.codecSet = void 0, this.url = void 0, this.frameRate = void 0, this.height = void 0, this.id = void 0, this.name = void 0, this.videoCodec = void 0, this.width = void 0, this.details = void 0, this.fragmentError = 0, this.loadError = 0, this.loaded = void 0, this.realBitrate = 0, this.supportedPromise = void 0, this.supportedResult = void 0, this._avgBitrate = 0, this._audioGroups = void 0, this._subtitleGroups = void 0, this._urlId = 0, this.url = [t.url], this._attrs = [t.attrs], this.bitrate = t.bitrate, t.details && (this.details = t.details), this.id = t.id || 0, this.name = t.name, this.width = t.width || 0, this.height = t.height || 0, this.frameRate = t.attrs.optionalFloat('FRAME-RATE', 0), this._avgBitrate = t.attrs.decimalInteger('AVERAGE-BANDWIDTH'), this.audioCodec = t.audioCodec, this.videoCodec = t.videoCodec, this.codecSet = [t.videoCodec, t.audioCodec].filter(function(t) { return !!t }).map(function(t) { return t.substring(0, 4) }).join(','), this.addGroupId('audio', t.attrs.AUDIO), this.addGroupId('text', t.attrs.SUBTITLES) } const e = t.prototype; return e.hasAudioGroup = function(t) { return ir(this._audioGroups, t) }, e.hasSubtitleGroup = function(t) { return ir(this._subtitleGroups, t) }, e.addGroupId = function(t, e) { if (e) if (t === 'audio') { let r = this._audioGroups; r || (r = this._audioGroups = []), r.indexOf(e) === -1 && r.push(e) } else if (t === 'text') { let i = this._subtitleGroups; i || (i = this._subtitleGroups = []), i.indexOf(e) === -1 && i.push(e) } }, e.addFallback = function() {}, s(t, [{ key: 'maxBitrate', get: function() { return Math.max(this.realBitrate, this.bitrate) } }, { key: 'averageBitrate', get: function() { return this._avgBitrate || this.realBitrate || this.bitrate } }, { key: 'attrs', get: function() { return this._attrs[0] } }, { key: 'codecs', get: function() { return this.attrs.CODECS || '' } }, { key: 'pathwayId', get: function() { return this.attrs['PATHWAY-ID'] || '.' } }, { key: 'videoRange', get: function() { return this.attrs['VIDEO-RANGE'] || 'SDR' } }, { key: 'score', get: function() { return this.attrs.optionalFloat('SCORE', 0) } }, { key: 'uri', get: function() { return this.url[0] || '' } }, { key: 'audioGroups', get: function() { return this._audioGroups } }, { key: 'subtitleGroups', get: function() { return this._subtitleGroups } }, { key: 'urlId', get: function() { return 0 }, set: function(t) {} }, { key: 'audioGroupIds', get: function() { return this.audioGroups ? [this.audioGroupId] : void 0 } }, { key: 'textGroupIds', get: function() { return this.subtitleGroups ? [this.textGroupId] : void 0 } }, { key: 'audioGroupId', get: function() { let t; return (t = this.audioGroups) == null ? void 0 : t[0] } }, { key: 'textGroupId', get: function() { let t; return (t = this.subtitleGroups) == null ? void 0 : t[0] } }]), t }()); function ir(t, e) { return !(!e || !t) && t.indexOf(e) !== -1 } function nr(t, e) { const r = e.startPTS; if (y(r)) { let i; let n = 0; e.sn > t.sn ? (n = r - t.start, i = t) : (n = t.start - r, i = e), i.duration !== n && (i.duration = n) } else e.sn > t.sn ? t.cc === e.cc && t.minEndPTS ? e.start = t.start + (t.minEndPTS - t.start) : e.start = t.start + t.duration : e.start = Math.max(t.start - e.duration, 0) } function ar(t, e, r, i, n, a) { i - r <= 0 && (w.warn('Fragment should have a positive duration', e), i = r + e.duration, a = n + e.duration); let s = r; let o = i; const l = e.startPTS; const u = e.endPTS; if (y(l)) { const h = Math.abs(l - r); y(e.deltaPTS) ? e.deltaPTS = Math.max(h, e.deltaPTS) : e.deltaPTS = h, s = Math.max(r, l), r = Math.min(r, l), n = Math.min(n, e.startDTS), o = Math.min(i, u), i = Math.max(i, u), a = Math.max(a, e.endDTS) } const d = r - e.start; e.start !== 0 && (e.start = r), e.duration = i - e.start, e.startPTS = r, e.maxStartPTS = s, e.startDTS = n, e.endPTS = i, e.minEndPTS = o, e.endDTS = a; let c; const f = e.sn; if (!t || f < t.startSN || f > t.endSN) return 0; const g = f - t.startSN; const v = t.fragments; for (v[g] = e, c = g; c > 0; c--)nr(v[c], v[c - 1]); for (c = g; c < v.length - 1; c++)nr(v[c], v[c + 1]); return t.fragmentHint && nr(v[v.length - 1], t.fragmentHint), t.PTSKnown = t.alignedSliding = !0, d } function sr(t, e) { for (var r = null, i = t.fragments, n = i.length - 1; n >= 0; n--) { const a = i[n].initSegment; if (a) { r = a; break } }t.fragmentHint && delete t.fragmentHint.endPTS; let s; let l; let u; let h; let d; let c = 0; if ((function(t, e, r) { for (let i = e.skippedSegments, n = Math.max(t.startSN, e.startSN) - e.startSN, a = (t.fragmentHint ? 1 : 0) + (i ? e.endSN : Math.min(t.endSN, e.endSN)) - e.startSN, s = e.startSN - t.startSN, o = e.fragmentHint ? e.fragments.concat(e.fragmentHint) : e.fragments, l = t.fragmentHint ? t.fragments.concat(t.fragmentHint) : t.fragments, u = n; u <= a; u++) { const h = l[s + u]; let d = o[u]; i && !d && u < i && (d = e.fragments[u] = h), h && d && r(h, d) } }(t, e, function(t, i) { t.relurl && (c = t.cc - i.cc), y(t.startPTS) && y(t.endPTS) && (i.start = i.startPTS = t.startPTS, i.startDTS = t.startDTS, i.maxStartPTS = t.maxStartPTS, i.endPTS = t.endPTS, i.endDTS = t.endDTS, i.minEndPTS = t.minEndPTS, i.duration = t.endPTS - t.startPTS, i.duration && (s = i), e.PTSKnown = e.alignedSliding = !0), i.elementaryStreams = t.elementaryStreams, i.loader = t.loader, i.stats = t.stats, t.initSegment && (i.initSegment = t.initSegment, r = t.initSegment) })), r && (e.fragmentHint ? e.fragments.concat(e.fragmentHint) : e.fragments).forEach(function(t) { let e; !t || t.initSegment && t.initSegment.relurl !== ((e = r) == null ? void 0 : e.relurl) || (t.initSegment = r) }), e.skippedSegments) if (e.deltaUpdateFailed = e.fragments.some(function(t) { return !t }), e.deltaUpdateFailed) { w.warn('[level-helper] Previous playlist missing segments skipped in delta playlist'); for (let f = e.skippedSegments; f--;)e.fragments.shift(); e.startSN = e.fragments[0].sn, e.startCC = e.fragments[0].cc } else e.canSkipDateRanges && (e.dateRanges = (l = t.dateRanges, u = e.dateRanges, h = e.recentlyRemovedDateranges, d = o({}, l), h && h.forEach(function(t) { delete d[t] }), Object.keys(u).forEach(function(t) { const e = new F(u[t].attr, d[t]); e.isValid ? d[t] = e : w.warn('Ignoring invalid Playlist Delta Update DATERANGE tag: "' + JSON.stringify(u[t].attr) + '"') }), d)); const g = e.fragments; if (c) { w.warn('discontinuity sliding from playlist, take drift into account'); for (let v = 0; v < g.length; v++)g[v].cc += c }e.skippedSegments && (e.startCC = e.fragments[0].cc), (function(t, e, r) { if (t && e) for (let i = 0, n = 0, a = t.length; n <= a; n++) { const s = t[n]; const o = e[n + i]; s && o && s.index === o.index && s.fragment.sn === o.fragment.sn ? r(s, o) : i-- } }(t.partList, e.partList, function(t, e) { e.elementaryStreams = t.elementaryStreams, e.stats = t.stats })), s ? ar(e, s, s.startPTS, s.endPTS, s.startDTS, s.endDTS) : or(t, e), g.length && (e.totalduration = e.edge - g[0].start), e.driftStartTime = t.driftStartTime, e.driftStart = t.driftStart; const m = e.advancedDateTime; if (e.advanced && m) { const p = e.edge; e.driftStart || (e.driftStartTime = m, e.driftStart = p), e.driftEndTime = m, e.driftEnd = p } else e.driftEndTime = t.driftEndTime, e.driftEnd = t.driftEnd, e.advancedDateTime = t.advancedDateTime } function or(t, e) { const r = e.startSN + e.skippedSegments - t.startSN; const i = t.fragments; r < 0 || r >= i.length || lr(e, i[r].start) } function lr(t, e) { if (e) { for (let r = t.fragments, i = t.skippedSegments; i < r.length; i++)r[i].start += e; t.fragmentHint && (t.fragmentHint.start += e) } } function ur(t, e, r) { let i; return t != null && t.details ? hr((i = t.details) == null ? void 0 : i.partList, e, r) : null } function hr(t, e, r) { if (t) for (let i = t.length; i--;) { const n = t[i]; if (n.index === r && n.fragment.sn === e) return n } return null } function dr(t) { t.forEach(function(t, e) { const r = t.details; r != null && r.fragments && r.fragments.forEach(function(t) { t.level = e }) }) } function cr(t) { switch (t.details) { case A.FRAG_LOAD_TIMEOUT:case A.KEY_LOAD_TIMEOUT:case A.LEVEL_LOAD_TIMEOUT:case A.MANIFEST_LOAD_TIMEOUT:return !0 } return !1 } function fr(t, e) { const r = cr(e); return t.default[(r ? 'timeout' : 'error') + 'Retry'] } function gr(t, e) { const r = t.backoff === 'linear' ? 1 : Math.pow(2, e); return Math.min(r * t.retryDelayMs, t.maxRetryDelayMs) } function vr(t) { return i(i({}, t), { errorRetry: null, timeoutRetry: null }) } function mr(t, e, r, i) { if (!t) return !1; const n = i == null ? void 0 : i.code; const a = e < t.maxNumRetry && ((function(t) { return t === 0 && !1 === navigator.onLine || !!t && (t < 400 || t > 499) }(n)) || !!r); return t.shouldRetry ? t.shouldRetry(t, e, r, i, a) : a } const pr = function(t, e) { for (let r = 0, i = t.length - 1, n = null, a = null; r <= i;) { const s = e(a = t[n = (r + i) / 2 | 0]); if (s > 0)r = n + 1; else { if (!(s < 0)) return a; i = n - 1 } } return null }; function yr(t, e, r, i) { void 0 === r && (r = 0), void 0 === i && (i = 0); let n = null; if (t) { n = e[t.sn - e[0].sn + 1] || null; const a = t.endDTS - r; a > 0 && a < 15e-7 && (r += 15e-7) } else r === 0 && e[0].start === 0 && (n = e[0]); if (n && (!t || t.level === n.level) && Er(r, i, n) === 0) return n; const s = pr(e, Er.bind(null, r, i)); return !s || s === t && n ? n : s } function Er(t, e, r) { if (void 0 === t && (t = 0), void 0 === e && (e = 0), r.start <= t && r.start + r.duration > t) return 0; const i = Math.min(e, r.duration + (r.deltaPTS ? r.deltaPTS : 0)); return r.start + r.duration - i <= t ? 1 : r.start - i > t && r.start ? -1 : 0 } function Tr(t, e, r) { const i = 1e3 * Math.min(e, r.duration + (r.deltaPTS ? r.deltaPTS : 0)); return (r.endProgramDateTime || 0) - i > t } const Sr = 0; const Lr = 2; const Ar = 3; const Rr = 5; const kr = 0; const br = 1; const Dr = 2; const Ir = (function() { function t(t) { this.hls = void 0, this.playlistError = 0, this.penalizedRenditions = {}, this.log = void 0, this.warn = void 0, this.error = void 0, this.hls = t, this.log = w.log.bind(w, '[info]:'), this.warn = w.warn.bind(w, '[warning]:'), this.error = w.error.bind(w, '[error]:'), this.registerListeners() } const e = t.prototype; return e.registerListeners = function() { const t = this.hls; t.on(S.ERROR, this.onError, this), t.on(S.MANIFEST_LOADING, this.onManifestLoading, this), t.on(S.LEVEL_UPDATED, this.onLevelUpdated, this) }, e.unregisterListeners = function() { const t = this.hls; t && (t.off(S.ERROR, this.onError, this), t.off(S.ERROR, this.onErrorOut, this), t.off(S.MANIFEST_LOADING, this.onManifestLoading, this), t.off(S.LEVEL_UPDATED, this.onLevelUpdated, this)) }, e.destroy = function() { this.unregisterListeners(), this.hls = null, this.penalizedRenditions = {} }, e.startLoad = function(t) {}, e.stopLoad = function() { this.playlistError = 0 }, e.getVariantLevelIndex = function(t) { return (t == null ? void 0 : t.type) === we ? t.level : this.hls.loadLevel }, e.onManifestLoading = function() { this.playlistError = 0, this.penalizedRenditions = {} }, e.onLevelUpdated = function() { this.playlistError = 0 }, e.onError = function(t, e) { let r, i; if (!e.fatal) { const n = this.hls; const a = e.context; switch (e.details) { case A.FRAG_LOAD_ERROR:case A.FRAG_LOAD_TIMEOUT:case A.KEY_LOAD_ERROR:case A.KEY_LOAD_TIMEOUT:return void (e.errorAction = this.getFragRetryOrSwitchAction(e)); case A.FRAG_PARSING_ERROR:if ((r = e.frag) != null && r.gap) return void (e.errorAction = { action: Sr, flags: kr }); case A.FRAG_GAP:case A.FRAG_DECRYPT_ERROR:return e.errorAction = this.getFragRetryOrSwitchAction(e), void (e.errorAction.action = Lr); case A.LEVEL_EMPTY_ERROR:case A.LEVEL_PARSING_ERROR:var s; var o; var l = e.parent === we ? e.level : n.loadLevel; return void (e.details === A.LEVEL_EMPTY_ERROR && (s = e.context) != null && (o = s.levelDetails) != null && o.live ? e.errorAction = this.getPlaylistRetryOrSwitchAction(e, l) : (e.levelRetry = !1, e.errorAction = this.getLevelSwitchAction(e, l))); case A.LEVEL_LOAD_ERROR:case A.LEVEL_LOAD_TIMEOUT:return void (typeof (a == null ? void 0 : a.level) === 'number' && (e.errorAction = this.getPlaylistRetryOrSwitchAction(e, a.level))); case A.AUDIO_TRACK_LOAD_ERROR:case A.AUDIO_TRACK_LOAD_TIMEOUT:case A.SUBTITLE_LOAD_ERROR:case A.SUBTITLE_TRACK_LOAD_TIMEOUT:if (a) { const u = n.levels[n.loadLevel]; if (u && (a.type === De && u.hasAudioGroup(a.groupId) || a.type === Ie && u.hasSubtitleGroup(a.groupId))) return e.errorAction = this.getPlaylistRetryOrSwitchAction(e, n.loadLevel), e.errorAction.action = Lr, void (e.errorAction.flags = br) } return; case A.KEY_SYSTEM_STATUS_OUTPUT_RESTRICTED:var h = n.levels[n.loadLevel]; var d = h == null ? void 0 : h.attrs['HDCP-LEVEL']; return void (d ? e.errorAction = { action: Lr, flags: Dr, hdcpLevel: d } : this.keySystemError(e)); case A.BUFFER_ADD_CODEC_ERROR:case A.REMUX_ALLOC_ERROR:case A.BUFFER_APPEND_ERROR:return void (e.errorAction = this.getLevelSwitchAction(e, (i = e.level) != null ? i : n.loadLevel)); case A.INTERNAL_EXCEPTION:case A.BUFFER_APPENDING_ERROR:case A.BUFFER_FULL_ERROR:case A.LEVEL_SWITCH_ERROR:case A.BUFFER_STALLED_ERROR:case A.BUFFER_SEEK_OVER_HOLE:case A.BUFFER_NUDGE_ON_STALL:return void (e.errorAction = { action: Sr, flags: kr }) }e.type === L.KEY_SYSTEM_ERROR && this.keySystemError(e) } }, e.keySystemError = function(t) { const e = this.getVariantLevelIndex(t.frag); t.levelRetry = !1, t.errorAction = this.getLevelSwitchAction(t, e) }, e.getPlaylistRetryOrSwitchAction = function(t, e) { const r = fr(this.hls.config.playlistLoadPolicy, t); const i = this.playlistError++; if (mr(r, i, cr(t), t.response)) return { action: Rr, flags: kr, retryConfig: r, retryCount: i }; const n = this.getLevelSwitchAction(t, e); return r && (n.retryConfig = r, n.retryCount = i), n }, e.getFragRetryOrSwitchAction = function(t) { const e = this.hls; const r = this.getVariantLevelIndex(t.frag); const i = e.levels[r]; const n = e.config; const a = n.fragLoadPolicy; const s = n.keyLoadPolicy; const o = fr(t.details.startsWith('key') ? s : a, t); const l = e.levels.reduce(function(t, e) { return t + e.fragmentError }, 0); if (i && (t.details !== A.FRAG_GAP && i.fragmentError++, mr(o, l, cr(t), t.response))) return { action: Rr, flags: kr, retryConfig: o, retryCount: l }; const u = this.getLevelSwitchAction(t, r); return o && (u.retryConfig = o, u.retryCount = l), u }, e.getLevelSwitchAction = function(t, e) { const r = this.hls; e == null && (e = r.loadLevel); const i = this.hls.levels[e]; if (i) { let n; let a; const s = t.details; i.loadError++, s === A.BUFFER_APPEND_ERROR && i.fragmentError++; let o = -1; const l = r.levels; const u = r.loadLevel; const h = r.minAutoLevel; const d = r.maxAutoLevel; r.autoLevelEnabled || (r.loadLevel = -1); for (var c, f = (n = t.frag) == null ? void 0 : n.type, g = (f === Ce && s === A.FRAG_PARSING_ERROR || t.sourceBufferName === 'audio' && (s === A.BUFFER_ADD_CODEC_ERROR || s === A.BUFFER_APPEND_ERROR)) && l.some(function(t) { const e = t.audioCodec; return i.audioCodec !== e }), v = t.sourceBufferName === 'video' && (s === A.BUFFER_ADD_CODEC_ERROR || s === A.BUFFER_APPEND_ERROR) && l.some(function(t) { const e = t.codecSet; const r = t.audioCodec; return i.codecSet !== e && i.audioCodec === r }), m = (a = t.context) != null ? a : {}, p = m.type, y = m.groupId, E = function() { const e = (T + u) % l.length; if (e !== u && e >= h && e <= d && l[e].loadError === 0) { let r; let n; const a = l[e]; if (s === A.FRAG_GAP && t.frag) { const c = l[e].details; if (c) { const m = yr(t.frag, c.fragments, t.frag.start); if (m != null && m.gap) return 0 } } else { if (p === De && a.hasAudioGroup(y) || p === Ie && a.hasSubtitleGroup(y)) return 0; if (f === Ce && (r = i.audioGroups) != null && r.some(function(t) { return a.hasAudioGroup(t) }) || f === _e && (n = i.subtitleGroups) != null && n.some(function(t) { return a.hasSubtitleGroup(t) }) || g && i.audioCodec === a.audioCodec || !g && i.audioCodec !== a.audioCodec || v && i.codecSet === a.codecSet) return 0 } return o = e, 1 } }, T = l.length; T-- && ((c = E()) === 0 || c !== 1););if (o > -1 && r.loadLevel !== o) return t.levelRetry = !0, this.playlistError = 0, { action: Lr, flags: kr, nextAutoLevel: o } } return { action: Lr, flags: br } }, e.onErrorOut = function(t, e) { let r; switch ((r = e.errorAction) == null ? void 0 : r.action) { case Sr:break; case Lr:this.sendAlternateToPenaltyBox(e), e.errorAction.resolved || e.details === A.FRAG_GAP ? /MediaSource readyState: ended/.test(e.error.message) && (this.warn('MediaSource ended after "' + e.sourceBufferName + '" sourceBuffer append error. Attempting to recover from media error.'), this.hls.recoverMediaError()) : e.fatal = !0 }e.fatal && this.hls.stopLoad() }, e.sendAlternateToPenaltyBox = function(t) { const e = this.hls; const r = t.errorAction; if (r) { const i = r.flags; const n = r.hdcpLevel; const a = r.nextAutoLevel; switch (i) { case kr:this.switchLevel(t, a); break; case Dr:n && (e.maxHdcpLevel = ze[ze.indexOf(n) - 1], r.resolved = !0), this.warn('Restricting playback to HDCP-LEVEL of "' + e.maxHdcpLevel + '" or lower') }r.resolved || this.switchLevel(t, a) } }, e.switchLevel = function(t, e) { void 0 !== e && t.errorAction && (this.warn('switching to level ' + e + ' after ' + t.details), this.hls.nextAutoLevel = e, t.errorAction.resolved = !0, this.hls.nextLoadLevel = this.hls.nextAutoLevel) }, t }()); const wr = (function() { function t(t, e) { this.hls = void 0, this.timer = -1, this.requestScheduled = -1, this.canLoad = !1, this.log = void 0, this.warn = void 0, this.log = w.log.bind(w, e + ':'), this.warn = w.warn.bind(w, e + ':'), this.hls = t } const e = t.prototype; return e.destroy = function() { this.clearTimer(), this.hls = this.log = this.warn = null }, e.clearTimer = function() { this.timer !== -1 && (self.clearTimeout(this.timer), this.timer = -1) }, e.startLoad = function() { this.canLoad = !0, this.requestScheduled = -1, this.loadPlaylist() }, e.stopLoad = function() { this.canLoad = !1, this.clearTimer() }, e.switchParams = function(t, e, r) { const i = e == null ? void 0 : e.renditionReports; if (i) { for (var n = -1, a = 0; a < i.length; a++) { const s = i[a]; let o = void 0; try { o = new self.URL(s.URI, e.url).href } catch (t) { w.warn('Could not construct new URL for Rendition Report: ' + t), o = s.URI || '' } if (o === t) { n = a; break }o === t.substring(0, o.length) && (n = a) } if (n !== -1) { const l = i[n]; const u = parseInt(l['LAST-MSN']) || (e == null ? void 0 : e.lastPartSn); let h = parseInt(l['LAST-PART']) || (e == null ? void 0 : e.lastPartIndex); if (this.hls.config.lowLatencyMode) { const d = Math.min(e.age - e.partTarget, e.targetduration); h >= 0 && d > e.partTarget && (h += 1) } const c = r && tr(r); return new er(u, h >= 0 ? h : void 0, c) } } }, e.loadPlaylist = function(t) { this.requestScheduled === -1 && (this.requestScheduled = self.performance.now()) }, e.shouldLoadPlaylist = function(t) { return this.canLoad && !!t && !!t.url && (!t.details || t.details.live) }, e.shouldReloadPlaylist = function(t) { return this.timer === -1 && this.requestScheduled === -1 && this.shouldLoadPlaylist(t) }, e.playlistLoaded = function(t, e, r) { const i = this; const n = e.details; const a = e.stats; const s = self.performance.now(); const o = a.loading.first ? Math.max(0, s - a.loading.first) : 0; if (n.advancedDateTime = Date.now() - o, n.live || r != null && r.live) { if (n.reloaded(r), r && this.log('live playlist ' + t + ' ' + (n.advanced ? 'REFRESHED ' + n.lastPartSn + '-' + n.lastPartIndex : n.updated ? 'UPDATED' : 'MISSED')), r && n.fragments.length > 0 && sr(r, n), !this.canLoad || !n.live) return; let l; let u = void 0; let h = void 0; if (n.canBlockReload && n.endSN && n.advanced) { const d = this.hls.config.lowLatencyMode; const c = n.lastPartSn; const f = n.endSN; const g = n.lastPartIndex; const v = c === f; g !== -1 ? (u = v ? f + 1 : c, h = v ? d ? 0 : g : g + 1) : u = f + 1; const m = n.age; const p = m + n.ageHeader; let y = Math.min(p - n.partTarget, 1.5 * n.targetduration); if (y > 0) { if (r && y > r.tuneInGoal) this.warn('CDN Tune-in goal increased from: ' + r.tuneInGoal + ' to: ' + y + ' with playlist age: ' + n.age), y = 0; else { const E = Math.floor(y / n.targetduration); u += E, void 0 !== h && (h += Math.round(y % n.targetduration / n.partTarget)), this.log('CDN Tune-in age: ' + n.ageHeader + 's last advanced ' + m.toFixed(2) + 's goal: ' + y + ' skip sn ' + E + ' to part ' + h) }n.tuneInGoal = y } if (l = this.getDeliveryDirectives(n, e.deliveryDirectives, u, h), d || !v) return void this.loadPlaylist(l) } else (n.canBlockReload || n.canSkipUntil) && (l = this.getDeliveryDirectives(n, e.deliveryDirectives, u, h)); const T = this.hls.mainForwardBufferInfo; const S = T ? T.end - T.len : 0; const L = (function(t, e) { void 0 === e && (e = 1 / 0); let r = 1e3 * t.targetduration; if (t.updated) { const i = t.fragments; if (i.length && 4 * r > e) { const n = 1e3 * i[i.length - 1].duration; n < r && (r = n) } } else r /= 2; return Math.round(r) }(n, 1e3 * (n.edge - S))); n.updated && s > this.requestScheduled + L && (this.requestScheduled = a.loading.start), void 0 !== u && n.canBlockReload ? this.requestScheduled = a.loading.first + L - (1e3 * n.partTarget || 1e3) : this.requestScheduled === -1 || this.requestScheduled + L < s ? this.requestScheduled = s : this.requestScheduled - s <= 0 && (this.requestScheduled += L); let A = this.requestScheduled - s; A = Math.max(0, A), this.log('reload live playlist ' + t + ' in ' + Math.round(A) + ' ms'), this.timer = self.setTimeout(function() { return i.loadPlaylist(l) }, A) } else this.clearTimer() }, e.getDeliveryDirectives = function(t, e, r, i) { let n = tr(t); return e != null && e.skip && t.deltaUpdateFailed && (r = e.msn, i = e.part, n = Je), new er(r, i, n) }, e.checkRetry = function(t) { const e = this; const r = t.details; const i = cr(t); const n = t.errorAction; const a = n || {}; const s = a.action; const o = a.retryCount; const l = void 0 === o ? 0 : o; const u = a.retryConfig; const h = !!n && !!u && (s === Rr || !n.resolved && s === Lr); if (h) { let d; if (this.requestScheduled = -1, l >= u.maxNumRetry) return !1; if (i && (d = t.context) != null && d.deliveryDirectives) this.warn('Retrying playlist loading ' + (l + 1) + '/' + u.maxNumRetry + ' after "' + r + '" without delivery-directives'), this.loadPlaylist(); else { const c = gr(u, l); this.timer = self.setTimeout(function() { return e.loadPlaylist() }, c), this.warn('Retrying playlist loading ' + (l + 1) + '/' + u.maxNumRetry + ' after "' + r + '" in ' + c + 'ms') }t.levelRetry = !0, n.resolved = !0 } return h }, t }()); const Cr = (function() { function t(t, e, r) { void 0 === e && (e = 0), void 0 === r && (r = 0), this.halfLife = void 0, this.alpha_ = void 0, this.estimate_ = void 0, this.totalWeight_ = void 0, this.halfLife = t, this.alpha_ = t ? Math.exp(Math.log(0.5) / t) : 0, this.estimate_ = e, this.totalWeight_ = r } const e = t.prototype; return e.sample = function(t, e) { const r = Math.pow(this.alpha_, t); this.estimate_ = e * (1 - r) + r * this.estimate_, this.totalWeight_ += t }, e.getTotalWeight = function() { return this.totalWeight_ }, e.getEstimate = function() { if (this.alpha_) { const t = 1 - Math.pow(this.alpha_, this.totalWeight_); if (t) return this.estimate_ / t } return this.estimate_ }, t }()); const _r = (function() { function t(t, e, r, i) { void 0 === i && (i = 100), this.defaultEstimate_ = void 0, this.minWeight_ = void 0, this.minDelayMs_ = void 0, this.slow_ = void 0, this.fast_ = void 0, this.defaultTTFB_ = void 0, this.ttfb_ = void 0, this.defaultEstimate_ = r, this.minWeight_ = 0.001, this.minDelayMs_ = 50, this.slow_ = new Cr(t), this.fast_ = new Cr(e), this.defaultTTFB_ = i, this.ttfb_ = new Cr(t) } const e = t.prototype; return e.update = function(t, e) { const r = this.slow_; const i = this.fast_; const n = this.ttfb_; r.halfLife !== t && (this.slow_ = new Cr(t, r.getEstimate(), r.getTotalWeight())), i.halfLife !== e && (this.fast_ = new Cr(e, i.getEstimate(), i.getTotalWeight())), n.halfLife !== t && (this.ttfb_ = new Cr(t, n.getEstimate(), n.getTotalWeight())) }, e.sample = function(t, e) { const r = (t = Math.max(t, this.minDelayMs_)) / 1e3; const i = 8 * e / r; this.fast_.sample(r, i), this.slow_.sample(r, i) }, e.sampleTTFB = function(t) { const e = t / 1e3; const r = Math.sqrt(2) * Math.exp(-Math.pow(e, 2) / 2); this.ttfb_.sample(r, Math.max(t, 5)) }, e.canEstimate = function() { return this.fast_.getTotalWeight() >= this.minWeight_ }, e.getEstimate = function() { return this.canEstimate() ? Math.min(this.fast_.getEstimate(), this.slow_.getEstimate()) : this.defaultEstimate_ }, e.getEstimateTTFB = function() { return this.ttfb_.getTotalWeight() >= this.minWeight_ ? this.ttfb_.getEstimate() : this.defaultTTFB_ }, e.destroy = function() {}, t }()); const xr = { supported: !0, configurations: [], decodingInfoResults: [{ supported: !0, powerEfficient: !0, smooth: !0 }] }; const Pr = {}; function Fr(t, e, r) { const n = t.videoCodec; const a = t.audioCodec; if (!n || !a || !r) return Promise.resolve(xr); const s = { width: t.width, height: t.height, bitrate: Math.ceil(Math.max(0.9 * t.bitrate, t.averageBitrate)), framerate: t.frameRate || 30 }; const o = t.videoRange; o !== 'SDR' && (s.transferFunction = o.toLowerCase()); const l = n.split(',').map(function(t) { return { type: 'media-source', video: i(i({}, s), {}, { contentType: ae(t, 'video') }) } }); return a && t.audioGroups && t.audioGroups.forEach(function(t) { let r; t && ((r = e.groups[t]) == null || r.tracks.forEach(function(e) { if (e.groupId === t) { const r = e.channels || ''; const i = parseFloat(r); y(i) && i > 2 && l.push.apply(l, a.split(',').map(function(t) { return { type: 'media-source', audio: { contentType: ae(t, 'audio'), channels: '' + i } } })) } })) }), Promise.all(l.map(function(t) { const e = (function(t) { const e = t.audio; const r = t.video; const i = r || e; if (i) { const n = i.contentType.split('"')[1]; if (r) return 'r' + r.height + 'x' + r.width + 'f' + Math.ceil(r.framerate) + (r.transferFunction || 'sd') + '_' + n + '_' + Math.ceil(r.bitrate / 1e5); if (e) return 'c' + e.channels + (e.spatialRendering ? 's' : 'n') + '_' + n } return '' }(t)); return Pr[e] || (Pr[e] = r.decodingInfo(t)) })).then(function(t) { return { supported: !t.some(function(t) { return !t.supported }), configurations: l, decodingInfoResults: t } }).catch(function(t) { return { supported: !1, configurations: l, decodingInfoResults: [], error: t } }) } function Mr(t, e) { let r = !1; let i = []; return t && (r = t !== 'SDR', i = [t]), e && (i = e.allowedVideoRanges || Qe.slice(0), i = (r = void 0 !== e.preferHDR ? e.preferHDR : (function() { if (typeof matchMedia === 'function') { const t = matchMedia('(dynamic-range: high)'); const e = matchMedia('bad query'); if (t.media !== e.media) return !0 === t.matches } return !1 }())) ? i.filter(function(t) { return t !== 'SDR' }) : ['SDR']), { preferHDR: r, allowedVideoRanges: i } } function Or(t, e) { w.log('[abr] start candidates with "' + t + '" ignored because ' + e) } function Nr(t, e, r) { if ('attrs' in t) { const i = e.indexOf(t); if (i !== -1) return i } for (let n = 0; n < e.length; n++) if (Ur(t, e[n], r)) return n; return -1 } function Ur(t, e, r) { const i = t.groupId; const n = t.name; const a = t.lang; const s = t.assocLang; const o = t.characteristics; const l = t.default; const u = t.forced; return (void 0 === i || e.groupId === i) && (void 0 === n || e.name === n) && (void 0 === a || e.lang === a) && (void 0 === a || e.assocLang === s) && (void 0 === l || e.default === l) && (void 0 === u || e.forced === u) && (void 0 === o || (function(t, e) { void 0 === e && (e = ''); const r = t.split(','); const i = e.split(','); return r.length === i.length && !r.some(function(t) { return i.indexOf(t) === -1 }) }(o, e.characteristics))) && (void 0 === r || r(t, e)) } function Br(t, e) { const r = t.audioCodec; const i = t.channels; return !(void 0 !== r && (e.audioCodec || '').substring(0, 4) !== r.substring(0, 4) || void 0 !== i && i !== (e.channels || '2')) } function Gr(t, e, r) { for (let i = e; i; i--) if (r(t[i])) return i; for (let n = e + 1; n < t.length; n++) if (r(t[n])) return n; return -1 } const Kr = (function() { function t(t) { const e = this; this.hls = void 0, this.lastLevelLoadSec = 0, this.lastLoadedFragLevel = -1, this.firstSelection = -1, this._nextAutoLevel = -1, this.nextAutoLevelKey = '', this.audioTracksByGroup = null, this.codecTiers = null, this.timer = -1, this.fragCurrent = null, this.partCurrent = null, this.bitrateTestDelay = 0, this.bwEstimator = void 0, this._abandonRulesCheck = function() { const t = e.fragCurrent; const r = e.partCurrent; const i = e.hls; const n = i.autoLevelEnabled; const a = i.media; if (t && a) { const s = performance.now(); const o = r ? r.stats : t.stats; const l = r ? r.duration : t.duration; const u = s - o.loading.start; const h = i.minAutoLevel; if (o.aborted || o.loaded && o.loaded === o.total || t.level <= h) return e.clearTimer(), void (e._nextAutoLevel = -1); if (n && !a.paused && a.playbackRate && a.readyState) { const d = i.mainForwardBufferInfo; if (d !== null) { const c = e.bwEstimator.getEstimateTTFB(); const f = Math.abs(a.playbackRate); if (!(u <= Math.max(c, l / (2 * f) * 1e3))) { const g = d.len / f; const v = o.loading.first ? o.loading.first - o.loading.start : -1; const m = o.loaded && v > -1; const p = e.getBwEstimate(); const E = i.levels; const T = E[t.level]; const L = o.total || Math.max(o.loaded, Math.round(l * T.averageBitrate / 8)); let A = m ? u - v : u; A < 1 && m && (A = Math.min(u, 8 * o.loaded / p)); const R = m ? 1e3 * o.loaded / A : 0; const k = R ? (L - o.loaded) / R : 8 * L / p + c / 1e3; if (!(k <= g)) { let b; const D = R ? 8 * R : p; let I = Number.POSITIVE_INFINITY; for (b = t.level - 1; b > h; b--) { const C = E[b].maxBitrate; if ((I = e.getTimeToLoadFrag(c / 1e3, D, l * C, !E[b].details)) < g) break } if (!(I >= k || I > 10 * l)) { i.nextLoadLevel = i.nextAutoLevel = b, m ? e.bwEstimator.sample(u - Math.min(c, v), o.loaded) : e.bwEstimator.sampleTTFB(u); const _ = E[b].maxBitrate; e.getBwEstimate() * e.hls.config.abrBandWidthUpFactor > _ && e.resetEstimator(_), e.clearTimer(), w.warn('[abr] Fragment ' + t.sn + (r ? ' part ' + r.index : '') + ' of level ' + t.level + ' is loading too slowly;\n      Time to underbuffer: ' + g.toFixed(3) + ' s\n      Estimated load time for current fragment: ' + k.toFixed(3) + ' s\n      Estimated load time for down switch fragment: ' + I.toFixed(3) + ' s\n      TTFB estimate: ' + (0 | v) + ' ms\n      Current BW estimate: ' + (y(p) ? 0 | p : 'Unknown') + ' bps\n      New BW estimate: ' + (0 | e.getBwEstimate()) + ' bps\n      Switching to level ' + b + ' @ ' + (0 | _) + ' bps'), i.trigger(S.FRAG_LOAD_EMERGENCY_ABORTED, { frag: t, part: r, stats: o }) } } } } } } }, this.hls = t, this.bwEstimator = this.initEstimator(), this.registerListeners() } const e = t.prototype; return e.resetEstimator = function(t) { t && (w.log('setting initial bwe to ' + t), this.hls.config.abrEwmaDefaultEstimate = t), this.firstSelection = -1, this.bwEstimator = this.initEstimator() }, e.initEstimator = function() { const t = this.hls.config; return new _r(t.abrEwmaSlowVoD, t.abrEwmaFastVoD, t.abrEwmaDefaultEstimate) }, e.registerListeners = function() { const t = this.hls; t.on(S.MANIFEST_LOADING, this.onManifestLoading, this), t.on(S.FRAG_LOADING, this.onFragLoading, this), t.on(S.FRAG_LOADED, this.onFragLoaded, this), t.on(S.FRAG_BUFFERED, this.onFragBuffered, this), t.on(S.LEVEL_SWITCHING, this.onLevelSwitching, this), t.on(S.LEVEL_LOADED, this.onLevelLoaded, this), t.on(S.LEVELS_UPDATED, this.onLevelsUpdated, this), t.on(S.MAX_AUTO_LEVEL_UPDATED, this.onMaxAutoLevelUpdated, this), t.on(S.ERROR, this.onError, this) }, e.unregisterListeners = function() { const t = this.hls; t && (t.off(S.MANIFEST_LOADING, this.onManifestLoading, this), t.off(S.FRAG_LOADING, this.onFragLoading, this), t.off(S.FRAG_LOADED, this.onFragLoaded, this), t.off(S.FRAG_BUFFERED, this.onFragBuffered, this), t.off(S.LEVEL_SWITCHING, this.onLevelSwitching, this), t.off(S.LEVEL_LOADED, this.onLevelLoaded, this), t.off(S.LEVELS_UPDATED, this.onLevelsUpdated, this), t.off(S.MAX_AUTO_LEVEL_UPDATED, this.onMaxAutoLevelUpdated, this), t.off(S.ERROR, this.onError, this)) }, e.destroy = function() { this.unregisterListeners(), this.clearTimer(), this.hls = this._abandonRulesCheck = null, this.fragCurrent = this.partCurrent = null }, e.onManifestLoading = function(t, e) { this.lastLoadedFragLevel = -1, this.firstSelection = -1, this.lastLevelLoadSec = 0, this.fragCurrent = this.partCurrent = null, this.onLevelsUpdated(), this.clearTimer() }, e.onLevelsUpdated = function() { this.lastLoadedFragLevel > -1 && this.fragCurrent && (this.lastLoadedFragLevel = this.fragCurrent.level), this._nextAutoLevel = -1, this.onMaxAutoLevelUpdated(), this.codecTiers = null, this.audioTracksByGroup = null }, e.onMaxAutoLevelUpdated = function() { this.firstSelection = -1, this.nextAutoLevelKey = '' }, e.onFragLoading = function(t, e) { let r; const i = e.frag; this.ignoreFragment(i) || (i.bitrateTest || (this.fragCurrent = i, this.partCurrent = (r = e.part) != null ? r : null), this.clearTimer(), this.timer = self.setInterval(this._abandonRulesCheck, 100)) }, e.onLevelSwitching = function(t, e) { this.clearTimer() }, e.onError = function(t, e) { if (!e.fatal) switch (e.details) { case A.BUFFER_ADD_CODEC_ERROR:case A.BUFFER_APPEND_ERROR:this.lastLoadedFragLevel = -1, this.firstSelection = -1; break; case A.FRAG_LOAD_TIMEOUT:var r = e.frag; var i = this.fragCurrent; var n = this.partCurrent; if (r && i && r.sn === i.sn && r.level === i.level) { const a = performance.now(); const s = n ? n.stats : r.stats; const o = a - s.loading.start; const l = s.loading.first ? s.loading.first - s.loading.start : -1; if (s.loaded && l > -1) { const u = this.bwEstimator.getEstimateTTFB(); this.bwEstimator.sample(o - Math.min(u, l), s.loaded) } else this.bwEstimator.sampleTTFB(o) } } }, e.getTimeToLoadFrag = function(t, e, r, i) { return t + r / e + (i ? this.lastLevelLoadSec : 0) }, e.onLevelLoaded = function(t, e) { const r = this.hls.config; const i = e.stats.loading; const n = i.end - i.start; y(n) && (this.lastLevelLoadSec = n / 1e3), e.details.live ? this.bwEstimator.update(r.abrEwmaSlowLive, r.abrEwmaFastLive) : this.bwEstimator.update(r.abrEwmaSlowVoD, r.abrEwmaFastVoD) }, e.onFragLoaded = function(t, e) { const r = e.frag; const i = e.part; const n = i ? i.stats : r.stats; if (r.type === we && this.bwEstimator.sampleTTFB(n.loading.first - n.loading.start), !this.ignoreFragment(r)) { if (this.clearTimer(), r.level === this._nextAutoLevel && (this._nextAutoLevel = -1), this.firstSelection = -1, this.hls.config.abrMaxWithRealBitrate) { const a = i ? i.duration : r.duration; const s = this.hls.levels[r.level]; const o = (s.loaded ? s.loaded.bytes : 0) + n.loaded; const l = (s.loaded ? s.loaded.duration : 0) + a; s.loaded = { bytes: o, duration: l }, s.realBitrate = Math.round(8 * o / l) } if (r.bitrateTest) { const u = { stats: n, frag: r, part: i, id: r.type }; this.onFragBuffered(S.FRAG_BUFFERED, u), r.bitrateTest = !1 } else this.lastLoadedFragLevel = r.level } }, e.onFragBuffered = function(t, e) { const r = e.frag; const i = e.part; const n = i != null && i.stats.loaded ? i.stats : r.stats; if (!n.aborted && !this.ignoreFragment(r)) { const a = n.parsing.end - n.loading.start - Math.min(n.loading.first - n.loading.start, this.bwEstimator.getEstimateTTFB()); this.bwEstimator.sample(a, n.loaded), n.bwEstimate = this.getBwEstimate(), r.bitrateTest ? this.bitrateTestDelay = a / 1e3 : this.bitrateTestDelay = 0 } }, e.ignoreFragment = function(t) { return t.type !== we || t.sn === 'initSegment' }, e.clearTimer = function() { this.timer > -1 && (self.clearInterval(this.timer), this.timer = -1) }, e.getAutoLevelKey = function() { return this.getBwEstimate() + '_' + this.getStarvationDelay().toFixed(2) }, e.getNextABRAutoLevel = function() { const t = this.fragCurrent; const e = this.partCurrent; const r = this.hls; const i = r.maxAutoLevel; const n = r.config; const a = r.minAutoLevel; const s = e ? e.duration : t ? t.duration : 0; const o = this.getBwEstimate(); const l = this.getStarvationDelay(); let u = n.abrBandWidthFactor; let h = n.abrBandWidthUpFactor; if (l) { const d = this.findBestLevel(o, a, i, l, 0, u, h); if (d >= 0) return d } let c = s ? Math.min(s, n.maxStarvationDelay) : n.maxStarvationDelay; if (!l) { const f = this.bitrateTestDelay; f && (c = (s ? Math.min(s, n.maxLoadingDelay) : n.maxLoadingDelay) - f, w.info('[abr] bitrate test took ' + Math.round(1e3 * f) + 'ms, set first fragment max fetchDuration to ' + Math.round(1e3 * c) + ' ms'), u = h = 1) } const g = this.findBestLevel(o, a, i, l, c, u, h); if (w.info('[abr] ' + (l ? 'rebuffering expected' : 'buffer is empty') + ', optimal quality level ' + g), g > -1) return g; const v = r.levels[a]; const m = r.levels[r.loadLevel]; return (v == null ? void 0 : v.bitrate) < (m == null ? void 0 : m.bitrate) ? a : r.loadLevel }, e.getStarvationDelay = function() { const t = this.hls; const e = t.media; if (!e) return 1 / 0; const r = e && e.playbackRate !== 0 ? Math.abs(e.playbackRate) : 1; const i = t.mainForwardBufferInfo; return (i ? i.len : 0) / r }, e.getBwEstimate = function() { return this.bwEstimator.canEstimate() ? this.bwEstimator.getEstimate() : this.hls.config.abrEwmaDefaultEstimate }, e.findBestLevel = function(t, e, r, i, n, a, s) { let o; const l = this; const u = i + n; const h = this.lastLoadedFragLevel; const d = h === -1 ? this.hls.firstLevel : h; const c = this.fragCurrent; const f = this.partCurrent; const g = this.hls; const v = g.levels; const m = g.allAudioTracks; const p = g.loadLevel; const E = g.config; if (v.length === 1) return 0; let T; const S = v[d]; const L = !(S == null || (o = S.details) == null || !o.live); const A = p === -1 || h === -1; let R = 'SDR'; let k = (S == null ? void 0 : S.frameRate) || 0; const b = E.audioPreference; const D = E.videoPreference; const I = this.audioTracksByGroup || (this.audioTracksByGroup = (function(t) { return t.reduce(function(t, e) { let r = t.groups[e.groupId]; r || (r = t.groups[e.groupId] = { tracks: [], channels: { 2: 0 }, hasDefault: !1, hasAutoSelect: !1 }), r.tracks.push(e); const i = e.channels || '2'; return r.channels[i] = (r.channels[i] || 0) + 1, r.hasDefault = r.hasDefault || e.default, r.hasAutoSelect = r.hasAutoSelect || e.autoselect, r.hasDefault && (t.hasDefaultAudio = !0), r.hasAutoSelect && (t.hasAutoSelectAudio = !0), t }, { hasDefaultAudio: !1, hasAutoSelectAudio: !1, groups: {} }) }(m))); if (A) { if (this.firstSelection !== -1) return this.firstSelection; const C = this.codecTiers || (this.codecTiers = (function(t, e, r, i) { return t.slice(r, i + 1).reduce(function(t, r) { if (!r.codecSet) return t; const i = r.audioGroups; let n = t[r.codecSet]; n || (t[r.codecSet] = n = { minBitrate: 1 / 0, minHeight: 1 / 0, minFramerate: 1 / 0, maxScore: 0, videoRanges: { SDR: 0 }, channels: { 2: 0 }, hasDefaultAudio: !i, fragmentError: 0 }), n.minBitrate = Math.min(n.minBitrate, r.bitrate); const a = Math.min(r.height, r.width); return n.minHeight = Math.min(n.minHeight, a), n.minFramerate = Math.min(n.minFramerate, r.frameRate), n.maxScore = Math.max(n.maxScore, r.score), n.fragmentError += r.fragmentError, n.videoRanges[r.videoRange] = (n.videoRanges[r.videoRange] || 0) + 1, i && i.forEach(function(t) { if (t) { const r = e.groups[t]; r && (n.hasDefaultAudio = n.hasDefaultAudio || e.hasDefaultAudio ? r.hasDefault : r.hasAutoSelect || !e.hasDefaultAudio && !e.hasAutoSelectAudio, Object.keys(r.channels).forEach(function(t) { n.channels[t] = (n.channels[t] || 0) + r.channels[t] })) } }), t }, {}) }(v, I, e, r))); const _ = (function(t, e, r, i, n) { for (var a = Object.keys(t), s = i == null ? void 0 : i.channels, o = i == null ? void 0 : i.audioCodec, l = s && parseInt(s) === 2, u = !0, h = !1, d = 1 / 0, c = 1 / 0, f = 1 / 0, g = 0, v = [], m = Mr(e, n), p = m.preferHDR, E = m.allowedVideoRanges, T = function() { const e = t[a[S]]; u = e.channels[2] > 0, d = Math.min(d, e.minHeight), c = Math.min(c, e.minFramerate), f = Math.min(f, e.minBitrate); const r = E.filter(function(t) { return e.videoRanges[t] > 0 }); r.length > 0 && (h = !0, v = r) }, S = a.length; S--;)T(); d = y(d) ? d : 0, c = y(c) ? c : 0; const L = Math.max(1080, d); const A = Math.max(30, c); return f = y(f) ? f : r, r = Math.max(f, r), h || (e = void 0, v = []), { codecSet: a.reduce(function(e, i) { const n = t[i]; if (i === e) return e; if (n.minBitrate > r) return Or(i, 'min bitrate of ' + n.minBitrate + ' > current estimate of ' + r), e; if (!n.hasDefaultAudio) return Or(i, 'no renditions with default or auto-select sound found'), e; if (o && i.indexOf(o.substring(0, 4)) % 5 != 0) return Or(i, 'audio codec preference "' + o + '" not found'), e; if (s && !l) { if (!n.channels[s]) return Or(i, 'no renditions with ' + s + ' channel sound found (channels options: ' + Object.keys(n.channels) + ')'), e } else if ((!o || l) && u && n.channels[2] === 0) return Or(i, 'no renditions with stereo sound found'), e; return n.minHeight > L ? (Or(i, 'min resolution of ' + n.minHeight + ' > maximum of ' + L), e) : n.minFramerate > A ? (Or(i, 'min framerate of ' + n.minFramerate + ' > maximum of ' + A), e) : v.some(function(t) { return n.videoRanges[t] > 0 }) ? n.maxScore < g ? (Or(i, 'max score of ' + n.maxScore + ' < selected max of ' + g), e) : e && (oe(i) >= oe(e) || n.fragmentError > t[e].fragmentError) ? e : (g = n.maxScore, i) : (Or(i, 'no variants with VIDEO-RANGE of ' + JSON.stringify(v) + ' found'), e) }, void 0), videoRanges: v, preferHDR: p, minFramerate: c, minBitrate: f } }(C, R, t, b, D)); const x = _.codecSet; const P = _.videoRanges; const F = _.minFramerate; const M = _.minBitrate; const O = _.preferHDR; T = x, R = O ? P[P.length - 1] : P[0], k = F, t = Math.max(t, M), w.log('[abr] picked start tier ' + JSON.stringify(_)) } else T = S == null ? void 0 : S.codecSet, R = S == null ? void 0 : S.videoRange; for (var N, U = f ? f.duration : c ? c.duration : 0, B = this.bwEstimator.getEstimateTTFB() / 1e3, G = [], K = function() { let e; const o = v[H]; const c = H > d; if (!o) return 0; if (E.useMediaCapabilities && !o.supportedResult && !o.supportedPromise) { const g = navigator.mediaCapabilities; typeof (g == null ? void 0 : g.decodingInfo) === 'function' && (function(t, e, r, i, n, a) { const s = t.audioCodec ? t.audioGroups : null; const o = a == null ? void 0 : a.audioCodec; const l = a == null ? void 0 : a.channels; const u = l ? parseInt(l) : o ? 1 / 0 : 2; let h = null; if (s != null && s.length) try { h = s.length === 1 && s[0] ? e.groups[s[0]].channels : s.reduce(function(t, r) { if (r) { const i = e.groups[r]; if (!i) throw new Error('Audio track group ' + r + ' not found'); Object.keys(i.channels).forEach(function(e) { t[e] = (t[e] || 0) + i.channels[e] }) } return t }, { 2: 0 }) } catch (t) { return !0 } return void 0 !== t.videoCodec && (t.width > 1920 && t.height > 1088 || t.height > 1920 && t.width > 1088 || t.frameRate > Math.max(i, 30) || t.videoRange !== 'SDR' && t.videoRange !== r || t.bitrate > Math.max(n, 8e6)) || !!h && y(u) && Object.keys(h).some(function(t) { return parseInt(t) > u }) }(o, I, R, k, t, b)) ? (o.supportedPromise = Fr(o, I, g), o.supportedPromise.then(function(t) { if (l.hls) { o.supportedResult = t; const e = l.hls.levels; const r = e.indexOf(o); t.error ? w.warn('[abr] MediaCapabilities decodingInfo error: "' + t.error + '" for level ' + r + ' ' + JSON.stringify(t)) : t.supported || (w.warn('[abr] Unsupported MediaCapabilities decodingInfo result for level ' + r + ' ' + JSON.stringify(t)), r > -1 && e.length > 1 && (w.log('[abr] Removing unsupported level ' + r), l.hls.removeLevel(r))) } })) : o.supportedResult = xr } if (T && o.codecSet !== T || R && o.videoRange !== R || c && k > o.frameRate || !c && k > 0 && k < o.frameRate || o.supportedResult && ((e = o.supportedResult.decodingInfoResults) == null || !e[0].smooth)) return G.push(H), 0; let m; const D = o.details; const C = (f ? D == null ? void 0 : D.partTarget : D == null ? void 0 : D.averagetargetduration) || U; m = c ? s * t : a * t; const _ = U && i >= 2 * U && n === 0 ? v[H].averageBitrate : v[H].maxBitrate; const x = l.getTimeToLoadFrag(B, m, _ * C, void 0 === D); if (m >= _ && (H === h || o.loadError === 0 && o.fragmentError === 0) && (x <= B || !y(x) || L && !l.bitrateTestDelay || x < u)) { const P = l.forcedAutoLevel; return H === p || P !== -1 && P === p || (G.length && w.trace('[abr] Skipped level(s) ' + G.join(',') + ' of ' + r + ' max with CODECS and VIDEO-RANGE:"' + v[G[0]].codecs + '" ' + v[G[0]].videoRange + '; not compatible with "' + S.codecs + '" ' + R), w.info('[abr] switch candidate:' + d + '->' + H + ' adjustedbw(' + Math.round(m) + ')-bitrate=' + Math.round(m - _) + ' ttfb:' + B.toFixed(1) + ' avgDuration:' + C.toFixed(1) + ' maxFetchDuration:' + u.toFixed(1) + ' fetchDuration:' + x.toFixed(1) + ' firstSelection:' + A + ' codecSet:' + T + ' videoRange:' + R + ' hls.loadLevel:' + p)), A && (l.firstSelection = H), { v: H } } }, H = r; H >= e; H--) if ((N = K()) !== 0 && N) return N.v; return -1 }, s(t, [{ key: 'firstAutoLevel', get: function() { const t = this.hls; const e = t.maxAutoLevel; const r = t.minAutoLevel; const i = this.getBwEstimate(); const n = this.hls.config.maxStarvationDelay; const a = this.findBestLevel(i, r, e, 0, n, 1, 1); if (a > -1) return a; const s = this.hls.firstLevel; const o = Math.min(Math.max(s, r), e); return w.warn('[abr] Could not find best starting auto level. Defaulting to first in playlist ' + s + ' clamped to ' + o), o } }, { key: 'forcedAutoLevel', get: function() { return this.nextAutoLevelKey ? -1 : this._nextAutoLevel } }, { key: 'nextAutoLevel', get: function() { const t = this.forcedAutoLevel; const e = this.bwEstimator.canEstimate(); const r = this.lastLoadedFragLevel > -1; if (!(t === -1 || e && r && this.nextAutoLevelKey !== this.getAutoLevelKey())) return t; const i = e && r ? this.getNextABRAutoLevel() : this.firstAutoLevel; if (t !== -1) { const n = this.hls.levels; if (n.length > Math.max(t, i) && n[t].loadError <= n[i].loadError) return t } return this._nextAutoLevel = i, this.nextAutoLevelKey = this.getAutoLevelKey(), i }, set: function(t) { const e = this.hls; const r = e.maxAutoLevel; const i = e.minAutoLevel; const n = Math.min(Math.max(t, i), r); this._nextAutoLevel !== n && (this.nextAutoLevelKey = '', this._nextAutoLevel = n) } }]), t }()); const Hr = (function() { function t() { this._boundTick = void 0, this._tickTimer = null, this._tickInterval = null, this._tickCallCount = 0, this._boundTick = this.tick.bind(this) } const e = t.prototype; return e.destroy = function() { this.onHandlerDestroying(), this.onHandlerDestroyed() }, e.onHandlerDestroying = function() { this.clearNextTick(), this.clearInterval() }, e.onHandlerDestroyed = function() {}, e.hasInterval = function() { return !!this._tickInterval }, e.hasNextTick = function() { return !!this._tickTimer }, e.setInterval = function(t) { return !this._tickInterval && (this._tickCallCount = 0, this._tickInterval = self.setInterval(this._boundTick, t), !0) }, e.clearInterval = function() { return !!this._tickInterval && (self.clearInterval(this._tickInterval), this._tickInterval = null, !0) }, e.clearNextTick = function() { return !!this._tickTimer && (self.clearTimeout(this._tickTimer), this._tickTimer = null, !0) }, e.tick = function() { this._tickCallCount++, this._tickCallCount === 1 && (this.doTick(), this._tickCallCount > 1 && this.tickImmediate(), this._tickCallCount = 0) }, e.tickImmediate = function() { this.clearNextTick(), this._tickTimer = self.setTimeout(this._boundTick, 0) }, e.doTick = function() {}, t }()); const Vr = 'NOT_LOADED'; const Yr = 'APPENDING'; const Wr = 'PARTIAL'; const jr = 'OK'; const qr = (function() { function t(t) { this.activePartLists = Object.create(null), this.endListFragments = Object.create(null), this.fragments = Object.create(null), this.timeRanges = Object.create(null), this.bufferPadding = 0.2, this.hls = void 0, this.hasGaps = !1, this.hls = t, this._registerListeners() } const e = t.prototype; return e._registerListeners = function() { const t = this.hls; t.on(S.BUFFER_APPENDED, this.onBufferAppended, this), t.on(S.FRAG_BUFFERED, this.onFragBuffered, this), t.on(S.FRAG_LOADED, this.onFragLoaded, this) }, e._unregisterListeners = function() { const t = this.hls; t.off(S.BUFFER_APPENDED, this.onBufferAppended, this), t.off(S.FRAG_BUFFERED, this.onFragBuffered, this), t.off(S.FRAG_LOADED, this.onFragLoaded, this) }, e.destroy = function() { this._unregisterListeners(), this.fragments = this.activePartLists = this.endListFragments = this.timeRanges = null }, e.getAppendedFrag = function(t, e) { const r = this.activePartLists[e]; if (r) for (let i = r.length; i--;) { const n = r[i]; if (!n) break; const a = n.end; if (n.start <= t && a !== null && t <= a) return n } return this.getBufferedFrag(t, e) }, e.getBufferedFrag = function(t, e) { for (let r = this.fragments, i = Object.keys(r), n = i.length; n--;) { const a = r[i[n]]; if ((a == null ? void 0 : a.body.type) === e && a.buffered) { const s = a.body; if (s.start <= t && t <= s.end) return s } } return null }, e.detectEvictedFragments = function(t, e, r, i) { const n = this; this.timeRanges && (this.timeRanges[t] = e); const a = (i == null ? void 0 : i.fragment.sn) || -1; Object.keys(this.fragments).forEach(function(i) { const s = n.fragments[i]; if (s && !(a >= s.body.sn)) if (s.buffered || s.loaded) { const o = s.range[t]; o && o.time.some(function(t) { const r = !n.isTimeBuffered(t.startPTS, t.endPTS, e); return r && n.removeFragment(s.body), r }) } else s.body.type === r && n.removeFragment(s.body) }) }, e.detectPartialFragments = function(t) { const e = this; const r = this.timeRanges; const i = t.frag; const n = t.part; if (r && i.sn !== 'initSegment') { const a = zr(i); const s = this.fragments[a]; if (!(!s || s.buffered && i.gap)) { const o = !i.relurl; Object.keys(r).forEach(function(t) { const a = i.elementaryStreams[t]; if (a) { const l = r[t]; const u = o || !0 === a.partial; s.range[t] = e.getBufferedTimes(i, n, u, l) } }), s.loaded = null, Object.keys(s.range).length ? (s.buffered = !0, (s.body.endList = i.endList || s.body.endList) && (this.endListFragments[s.body.type] = s), Xr(s) || this.removeParts(i.sn - 1, i.type)) : this.removeFragment(s.body) } } }, e.removeParts = function(t, e) { const r = this.activePartLists[e]; r && (this.activePartLists[e] = r.filter(function(e) { return e.fragment.sn >= t })) }, e.fragBuffered = function(t, e) { const r = zr(t); let i = this.fragments[r]; !i && e && (i = this.fragments[r] = { body: t, appendedPTS: null, loaded: null, buffered: !1, range: Object.create(null) }, t.gap && (this.hasGaps = !0)), i && (i.loaded = null, i.buffered = !0) }, e.getBufferedTimes = function(t, e, r, i) { for (var n = { time: [], partial: r }, a = t.start, s = t.end, o = t.minEndPTS || s, l = t.maxStartPTS || a, u = 0; u < i.length; u++) { const h = i.start(u) - this.bufferPadding; const d = i.end(u) + this.bufferPadding; if (l >= h && o <= d) { n.time.push({ startPTS: Math.max(a, i.start(u)), endPTS: Math.min(s, i.end(u)) }); break } if (a < d && s > h) { const c = Math.max(a, i.start(u)); const f = Math.min(s, i.end(u)); f > c && (n.partial = !0, n.time.push({ startPTS: c, endPTS: f })) } else if (s <= h) break } return n }, e.getPartialFragment = function(t) { let e; let r; let i; let n = null; let a = 0; const s = this.bufferPadding; const o = this.fragments; return Object.keys(o).forEach(function(l) { const u = o[l]; u && Xr(u) && (r = u.body.start - s, i = u.body.end + s, t >= r && t <= i && (e = Math.min(t - r, i - t), a <= e && (n = u.body, a = e))) }), n }, e.isEndListAppended = function(t) { const e = this.endListFragments[t]; return void 0 !== e && (e.buffered || Xr(e)) }, e.getState = function(t) { const e = zr(t); const r = this.fragments[e]; return r ? r.buffered ? Xr(r) ? Wr : jr : Yr : Vr }, e.isTimeBuffered = function(t, e, r) { for (var i, n, a = 0; a < r.length; a++) { if (i = r.start(a) - this.bufferPadding, n = r.end(a) + this.bufferPadding, t >= i && e <= n) return !0; if (e <= i) return !1 } return !1 }, e.onFragLoaded = function(t, e) { const r = e.frag; const i = e.part; if (r.sn !== 'initSegment' && !r.bitrateTest) { const n = i ? null : e; const a = zr(r); this.fragments[a] = { body: r, appendedPTS: null, loaded: n, buffered: !1, range: Object.create(null) } } }, e.onBufferAppended = function(t, e) { const r = this; const i = e.frag; const n = e.part; const a = e.timeRanges; if (i.sn !== 'initSegment') { const s = i.type; if (n) { let o = this.activePartLists[s]; o || (this.activePartLists[s] = o = []), o.push(n) } this.timeRanges = a, Object.keys(a).forEach(function(t) { const e = a[t]; r.detectEvictedFragments(t, e, s, n) }) } }, e.onFragBuffered = function(t, e) { this.detectPartialFragments(e) }, e.hasFragment = function(t) { const e = zr(t); return !!this.fragments[e] }, e.hasParts = function(t) { let e; return !((e = this.activePartLists[t]) == null || !e.length) }, e.removeFragmentsInRange = function(t, e, r, i, n) { const a = this; i && !this.hasGaps || Object.keys(this.fragments).forEach(function(s) { const o = a.fragments[s]; if (o) { const l = o.body; l.type !== r || i && !l.gap || l.start < e && l.end > t && (o.buffered || n) && a.removeFragment(l) } }) }, e.removeFragment = function(t) { const e = zr(t); t.stats.loaded = 0, t.clearElementaryStreamInfo(); const r = this.activePartLists[t.type]; if (r) { const i = t.sn; this.activePartLists[t.type] = r.filter(function(t) { return t.fragment.sn !== i }) } delete this.fragments[e], t.endList && delete this.endListFragments[t.type] }, e.removeAllFragments = function() { this.fragments = Object.create(null), this.endListFragments = Object.create(null), this.activePartLists = Object.create(null), this.hasGaps = !1 }, t }()); function Xr(t) { let e, r, i; return t.buffered && (t.body.gap || ((e = t.range.video) == null ? void 0 : e.partial) || ((r = t.range.audio) == null ? void 0 : r.partial) || ((i = t.range.audiovideo) == null ? void 0 : i.partial)) } function zr(t) { return t.type + '_' + t.level + '_' + t.sn } const Qr = { length: 0, start: function() { return 0 }, end: function() { return 0 } }; const Jr = (function() { function t() {} return t.isBuffered = function(e, r) { try { if (e) for (let i = t.getBuffered(e), n = 0; n < i.length; n++) if (r >= i.start(n) && r <= i.end(n)) return !0 } catch (t) {} return !1 }, t.bufferInfo = function(e, r, i) { try { if (e) { let n; const a = t.getBuffered(e); const s = []; for (n = 0; n < a.length; n++)s.push({ start: a.start(n), end: a.end(n) }); return this.bufferedInfo(s, r, i) } } catch (t) {} return { len: 0, start: r, end: r, nextStart: void 0 } }, t.bufferedInfo = function(t, e, r) { e = Math.max(0, e), t.sort(function(t, e) { const r = t.start - e.start; return r || e.end - t.end }); let i = []; if (r) for (let n = 0; n < t.length; n++) { const a = i.length; if (a) { const s = i[a - 1].end; t[n].start - s < r ? t[n].end > s && (i[a - 1].end = t[n].end) : i.push(t[n]) } else i.push(t[n]) } else i = t; for (var o, l = 0, u = e, h = e, d = 0; d < i.length; d++) { const c = i[d].start; const f = i[d].end; if (e + r >= c && e < f)u = c, l = (h = f) - e; else if (e + r < c) { o = c; break } } return { len: l, start: u || 0, end: h || 0, nextStart: o } }, t.getBuffered = function(t) { try { return t.buffered } catch (t) { return w.log('failed to get media.buffered', t), Qr } }, t }()); const $r = function(t, e, r, i, n, a) { void 0 === i && (i = 0), void 0 === n && (n = -1), void 0 === a && (a = !1), this.level = void 0, this.sn = void 0, this.part = void 0, this.id = void 0, this.size = void 0, this.partial = void 0, this.transmuxing = { start: 0, executeStart: 0, executeEnd: 0, end: 0 }, this.buffering = { audio: { start: 0, executeStart: 0, executeEnd: 0, end: 0 }, video: { start: 0, executeStart: 0, executeEnd: 0, end: 0 }, audiovideo: { start: 0, executeStart: 0, executeEnd: 0, end: 0 } }, this.level = t, this.sn = e, this.id = r, this.size = i, this.part = n, this.partial = a }; function Zr(t, e) { for (let r = 0, i = t.length; r < i; r++) { var n; if (((n = t[r]) == null ? void 0 : n.cc) === e) return t[r] } return null } function ti(t, e) { if (t) { const r = t.start + e; t.start = t.startPTS = r, t.endPTS = r + t.duration } } function ei(t, e) { for (let r = e.fragments, i = 0, n = r.length; i < n; i++)ti(r[i], t); e.fragmentHint && ti(e.fragmentHint, t), e.alignedSliding = !0 } function ri(t, e, r) { e && ((function(t, e, r) { if (function(t, e, r) { return !(!e || !(r.endCC > r.startCC || t && t.cc < r.startCC)) }(t, r, e)) { const i = (function(t, e) { const r = t.fragments; const i = e.fragments; if (i.length && r.length) { const n = Zr(r, i[0].cc); if (n && (!n || n.startPTS)) return n; w.log('No frag in previous level to align on') } else w.log('No fragments to align') }(r, e)); i && y(i.start) && (w.log('Adjusting PTS using last level due to CC increase within current level ' + e.url), ei(i.start, e)) } }(t, r, e)), !r.alignedSliding && e && ii(r, e), r.alignedSliding || !e || r.skippedSegments || or(e, r)) } function ii(t, e) { if (t.hasProgramDateTime && e.hasProgramDateTime) { const r = t.fragments; const i = e.fragments; if (r.length && i.length) { let n; let a; const s = Math.min(e.endCC, t.endCC); e.startCC < s && t.startCC < s && (n = Zr(i, s), a = Zr(r, s)), n && a || (a = Zr(r, (n = i[Math.floor(i.length / 2)]).cc) || r[Math.floor(r.length / 2)]); const o = n.programDateTime; const l = a.programDateTime; o && l && ei((l - o) / 1e3 - (a.start - n.start), t) } } } const ni = Math.pow(2, 17); const ai = (function() { function t(t) { this.config = void 0, this.loader = null, this.partLoadTimeout = -1, this.config = t } const e = t.prototype; return e.destroy = function() { this.loader && (this.loader.destroy(), this.loader = null) }, e.abort = function() { this.loader && this.loader.abort() }, e.load = function(t, e) { const r = this; const n = t.url; if (!n) return Promise.reject(new li({ type: L.NETWORK_ERROR, details: A.FRAG_LOAD_ERROR, fatal: !1, frag: t, error: new Error('Fragment does not have a ' + (n ? 'part list' : 'url')), networkDetails: null })); this.abort(); const a = this.config; const s = a.fLoader; const o = a.loader; return new Promise(function(l, u) { if (r.loader && r.loader.destroy(), t.gap) { if (t.tagList.some(function(t) { return t[0] === 'GAP' })) return void u(oi(t)); t.gap = !1 } const h = r.loader = t.loader = s ? new s(a) : new o(a); const d = si(t); const c = vr(a.fragLoadPolicy.default); const f = { loadPolicy: c, timeout: c.maxLoadTimeMs, maxRetry: 0, retryDelay: 0, maxRetryDelay: 0, highWaterMark: t.sn === 'initSegment' ? 1 / 0 : ni }; t.stats = h.stats, h.load(d, f, { onSuccess: function(e, i, n, a) { r.resetLoader(t, h); let s = e.data; n.resetIV && t.decryptdata && (t.decryptdata.iv = new Uint8Array(s.slice(0, 16)), s = s.slice(16)), l({ frag: t, part: null, payload: s, networkDetails: a }) }, onError: function(e, a, s, o) { r.resetLoader(t, h), u(new li({ type: L.NETWORK_ERROR, details: A.FRAG_LOAD_ERROR, fatal: !1, frag: t, response: i({ url: n, data: void 0 }, e), error: new Error('HTTP Error ' + e.code + ' ' + e.text), networkDetails: s, stats: o })) }, onAbort: function(e, i, n) { r.resetLoader(t, h), u(new li({ type: L.NETWORK_ERROR, details: A.INTERNAL_ABORTED, fatal: !1, frag: t, error: new Error('Aborted'), networkDetails: n, stats: e })) }, onTimeout: function(e, i, n) { r.resetLoader(t, h), u(new li({ type: L.NETWORK_ERROR, details: A.FRAG_LOAD_TIMEOUT, fatal: !1, frag: t, error: new Error('Timeout after ' + f.timeout + 'ms'), networkDetails: n, stats: e })) }, onProgress: function(r, i, n, a) { e && e({ frag: t, part: null, payload: n, networkDetails: a }) } }) }) }, e.loadPart = function(t, e, r) { const n = this; this.abort(); const a = this.config; const s = a.fLoader; const o = a.loader; return new Promise(function(l, u) { if (n.loader && n.loader.destroy(), t.gap || e.gap)u(oi(t, e)); else { const h = n.loader = t.loader = s ? new s(a) : new o(a); const d = si(t, e); const c = vr(a.fragLoadPolicy.default); const f = { loadPolicy: c, timeout: c.maxLoadTimeMs, maxRetry: 0, retryDelay: 0, maxRetryDelay: 0, highWaterMark: ni }; e.stats = h.stats, h.load(d, f, { onSuccess: function(i, a, s, o) { n.resetLoader(t, h), n.updateStatsFromPart(t, e); const u = { frag: t, part: e, payload: i.data, networkDetails: o }; r(u), l(u) }, onError: function(r, a, s, o) { n.resetLoader(t, h), u(new li({ type: L.NETWORK_ERROR, details: A.FRAG_LOAD_ERROR, fatal: !1, frag: t, part: e, response: i({ url: d.url, data: void 0 }, r), error: new Error('HTTP Error ' + r.code + ' ' + r.text), networkDetails: s, stats: o })) }, onAbort: function(r, i, a) { t.stats.aborted = e.stats.aborted, n.resetLoader(t, h), u(new li({ type: L.NETWORK_ERROR, details: A.INTERNAL_ABORTED, fatal: !1, frag: t, part: e, error: new Error('Aborted'), networkDetails: a, stats: r })) }, onTimeout: function(r, i, a) { n.resetLoader(t, h), u(new li({ type: L.NETWORK_ERROR, details: A.FRAG_LOAD_TIMEOUT, fatal: !1, frag: t, part: e, error: new Error('Timeout after ' + f.timeout + 'ms'), networkDetails: a, stats: r })) } }) } }) }, e.updateStatsFromPart = function(t, e) { const r = t.stats; const i = e.stats; const n = i.total; if (r.loaded += i.loaded, n) { const a = Math.round(t.duration / e.duration); const s = Math.min(Math.round(r.loaded / n), a); const o = (a - s) * Math.round(r.loaded / s); r.total = r.loaded + o } else r.total = Math.max(r.loaded, r.total); const l = r.loading; const u = i.loading; l.start ? l.first += u.first - u.start : (l.start = u.start, l.first = u.first), l.end = u.end }, e.resetLoader = function(t, e) { t.loader = null, this.loader === e && (self.clearTimeout(this.partLoadTimeout), this.loader = null), e.destroy() }, t }()); function si(t, e) { void 0 === e && (e = null); const r = e || t; const i = { frag: t, part: e, responseType: 'arraybuffer', url: r.url, headers: {}, rangeStart: 0, rangeEnd: 0 }; const n = r.byteRangeStartOffset; const a = r.byteRangeEndOffset; if (y(n) && y(a)) { let s; let o = n; let l = a; if (t.sn === 'initSegment' && ((s = t.decryptdata) == null ? void 0 : s.method) === 'AES-128') { const u = a - n; u % 16 && (l = a + (16 - u % 16)), n !== 0 && (i.resetIV = !0, o = n - 16) }i.rangeStart = o, i.rangeEnd = l } return i } function oi(t, e) { const r = new Error('GAP ' + (t.gap ? 'tag' : 'attribute') + ' found'); const i = { type: L.MEDIA_ERROR, details: A.FRAG_GAP, fatal: !1, frag: t, error: r, networkDetails: null }; return e && (i.part = e), (e || t).stats.aborted = !0, new li(i) } var li = (function(t) { function e(e) { let r; return (r = t.call(this, e.error.message) || this).data = void 0, r.data = e, r } return l(e, t), e }(c(Error))); const ui = (function() { function t(t, e) { this.subtle = void 0, this.aesIV = void 0, this.subtle = t, this.aesIV = e } return t.prototype.decrypt = function(t, e) { return this.subtle.decrypt({ name: 'AES-CBC', iv: this.aesIV }, e, t) }, t }()); const hi = (function() { function t(t, e) { this.subtle = void 0, this.key = void 0, this.subtle = t, this.key = e } return t.prototype.expandKey = function() { return this.subtle.importKey('raw', this.key, { name: 'AES-CBC' }, !1, ['encrypt', 'decrypt']) }, t }()); const di = (function() { function t() { this.rcon = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54], this.subMix = [new Uint32Array(256), new Uint32Array(256), new Uint32Array(256), new Uint32Array(256)], this.invSubMix = [new Uint32Array(256), new Uint32Array(256), new Uint32Array(256), new Uint32Array(256)], this.sBox = new Uint32Array(256), this.invSBox = new Uint32Array(256), this.key = new Uint32Array(0), this.ksRows = 0, this.keySize = 0, this.keySchedule = void 0, this.invKeySchedule = void 0, this.initTable() } const e = t.prototype; return e.uint8ArrayToUint32Array_ = function(t) { for (var e = new DataView(t), r = new Uint32Array(4), i = 0; i < 4; i++)r[i] = e.getUint32(4 * i); return r }, e.initTable = function() { const t = this.sBox; const e = this.invSBox; const r = this.subMix; const i = r[0]; const n = r[1]; const a = r[2]; const s = r[3]; const o = this.invSubMix; const l = o[0]; const u = o[1]; const h = o[2]; const d = o[3]; const c = new Uint32Array(256); let f = 0; let g = 0; let v = 0; for (v = 0; v < 256; v++)c[v] = v < 128 ? v << 1 : v << 1 ^ 283; for (v = 0; v < 256; v++) { let m = g ^ g << 1 ^ g << 2 ^ g << 3 ^ g << 4; m = m >>> 8 ^ 255 & m ^ 99, t[f] = m, e[m] = f; const p = c[f]; const y = c[p]; const E = c[y]; let T = 257 * c[m] ^ 16843008 * m; i[f] = T << 24 | T >>> 8, n[f] = T << 16 | T >>> 16, a[f] = T << 8 | T >>> 24, s[f] = T, T = 16843009 * E ^ 65537 * y ^ 257 * p ^ 16843008 * f, l[m] = T << 24 | T >>> 8, u[m] = T << 16 | T >>> 16, h[m] = T << 8 | T >>> 24, d[m] = T, f ? (f = p ^ c[c[c[E ^ p]]], g ^= c[c[g]]) : f = g = 1 } }, e.expandKey = function(t) { for (var e = this.uint8ArrayToUint32Array_(t), r = !0, i = 0; i < e.length && r;)r = e[i] === this.key[i], i++; if (!r) { this.key = e; const n = this.keySize = e.length; if (n !== 4 && n !== 6 && n !== 8) throw new Error('Invalid aes key size=' + n); let a; let s; let o; let l; const u = this.ksRows = 4 * (n + 6 + 1); const h = this.keySchedule = new Uint32Array(u); const d = this.invKeySchedule = new Uint32Array(u); const c = this.sBox; const f = this.rcon; const g = this.invSubMix; const v = g[0]; const m = g[1]; const p = g[2]; const y = g[3]; for (a = 0; a < u; a++)a < n ? o = h[a] = e[a] : (l = o, a % n == 0 ? (l = c[(l = l << 8 | l >>> 24) >>> 24] << 24 | c[l >>> 16 & 255] << 16 | c[l >>> 8 & 255] << 8 | c[255 & l], l ^= f[a / n | 0] << 24) : n > 6 && a % n == 4 && (l = c[l >>> 24] << 24 | c[l >>> 16 & 255] << 16 | c[l >>> 8 & 255] << 8 | c[255 & l]), h[a] = o = (h[a - n] ^ l) >>> 0); for (s = 0; s < u; s++)a = u - s, l = 3 & s ? h[a] : h[a - 4], d[s] = s < 4 || a <= 4 ? l : v[c[l >>> 24]] ^ m[c[l >>> 16 & 255]] ^ p[c[l >>> 8 & 255]] ^ y[c[255 & l]], d[s] = d[s] >>> 0 } }, e.networkToHostOrderSwap = function(t) { return t << 24 | (65280 & t) << 8 | (16711680 & t) >> 8 | t >>> 24 }, e.decrypt = function(t, e, r) { for (var i, n, a, s, o, l, u, h, d, c, f, g, v, m, p = this.keySize + 6, y = this.invKeySchedule, E = this.invSBox, T = this.invSubMix, S = T[0], L = T[1], A = T[2], R = T[3], k = this.uint8ArrayToUint32Array_(r), b = k[0], D = k[1], I = k[2], w = k[3], C = new Int32Array(t), _ = new Int32Array(C.length), x = this.networkToHostOrderSwap; e < C.length;) { for (d = x(C[e]), c = x(C[e + 1]), f = x(C[e + 2]), g = x(C[e + 3]), o = d ^ y[0], l = g ^ y[1], u = f ^ y[2], h = c ^ y[3], v = 4, m = 1; m < p; m++)i = S[o >>> 24] ^ L[l >> 16 & 255] ^ A[u >> 8 & 255] ^ R[255 & h] ^ y[v], n = S[l >>> 24] ^ L[u >> 16 & 255] ^ A[h >> 8 & 255] ^ R[255 & o] ^ y[v + 1], a = S[u >>> 24] ^ L[h >> 16 & 255] ^ A[o >> 8 & 255] ^ R[255 & l] ^ y[v + 2], s = S[h >>> 24] ^ L[o >> 16 & 255] ^ A[l >> 8 & 255] ^ R[255 & u] ^ y[v + 3], o = i, l = n, u = a, h = s, v += 4; i = E[o >>> 24] << 24 ^ E[l >> 16 & 255] << 16 ^ E[u >> 8 & 255] << 8 ^ E[255 & h] ^ y[v], n = E[l >>> 24] << 24 ^ E[u >> 16 & 255] << 16 ^ E[h >> 8 & 255] << 8 ^ E[255 & o] ^ y[v + 1], a = E[u >>> 24] << 24 ^ E[h >> 16 & 255] << 16 ^ E[o >> 8 & 255] << 8 ^ E[255 & l] ^ y[v + 2], s = E[h >>> 24] << 24 ^ E[o >> 16 & 255] << 16 ^ E[l >> 8 & 255] << 8 ^ E[255 & u] ^ y[v + 3], _[e] = x(i ^ b), _[e + 1] = x(s ^ D), _[e + 2] = x(a ^ I), _[e + 3] = x(n ^ w), b = d, D = c, I = f, w = g, e += 4 } return _.buffer }, t }()); const ci = (function() { function t(t, e) { const r = (void 0 === e ? {} : e).removePKCS7Padding; const i = void 0 === r || r; if (this.logEnabled = !0, this.removePKCS7Padding = void 0, this.subtle = null, this.softwareDecrypter = null, this.key = null, this.fastAesKey = null, this.remainderData = null, this.currentIV = null, this.currentResult = null, this.useSoftware = void 0, this.useSoftware = t.enableSoftwareAES, this.removePKCS7Padding = i, i) try { const n = self.crypto; n && (this.subtle = n.subtle || n.webkitSubtle) } catch (t) {} this.useSoftware = !this.subtle } const e = t.prototype; return e.destroy = function() { this.subtle = null, this.softwareDecrypter = null, this.key = null, this.fastAesKey = null, this.remainderData = null, this.currentIV = null, this.currentResult = null }, e.isSync = function() { return this.useSoftware }, e.flush = function() { const t = this.currentResult; const e = this.remainderData; if (!t || e) return this.reset(), null; let r; let i; let n; const a = new Uint8Array(t); return this.reset(), this.removePKCS7Padding ? (i = (r = a).byteLength, (n = i && new DataView(r.buffer).getUint8(i - 1)) ? nt(r, 0, i - n) : r) : a }, e.reset = function() { this.currentResult = null, this.currentIV = null, this.remainderData = null, this.softwareDecrypter && (this.softwareDecrypter = null) }, e.decrypt = function(t, e, r) { const i = this; return this.useSoftware ? new Promise(function(n, a) { i.softwareDecrypt(new Uint8Array(t), e, r); const s = i.flush(); s ? n(s.buffer) : a(new Error('[softwareDecrypt] Failed to decrypt data')) }) : this.webCryptoDecrypt(new Uint8Array(t), e, r) }, e.softwareDecrypt = function(t, e, r) { const i = this.currentIV; const n = this.currentResult; const a = this.remainderData; this.logOnce('JS AES decrypt'), a && (t = Kt(a, t), this.remainderData = null); const s = this.getValidChunk(t); if (!s.length) return null; i && (r = i); let o = this.softwareDecrypter; o || (o = this.softwareDecrypter = new di()), o.expandKey(e); const l = n; return this.currentResult = o.decrypt(s.buffer, 0, r), this.currentIV = nt(s, -16).buffer, l || null }, e.webCryptoDecrypt = function(t, e, r) { const i = this; if (this.key !== e || !this.fastAesKey) { if (!this.subtle) return Promise.resolve(this.onWebCryptoError(t, e, r)); this.key = e, this.fastAesKey = new hi(this.subtle, e) } return this.fastAesKey.expandKey().then(function(e) { return i.subtle ? (i.logOnce('WebCrypto AES decrypt'), new ui(i.subtle, new Uint8Array(r)).decrypt(t.buffer, e)) : Promise.reject(new Error('web crypto not initialized')) }).catch(function(n) { return w.warn('[decrypter]: WebCrypto Error, disable WebCrypto API, ' + n.name + ': ' + n.message), i.onWebCryptoError(t, e, r) }) }, e.onWebCryptoError = function(t, e, r) { this.useSoftware = !0, this.logEnabled = !0, this.softwareDecrypt(t, e, r); const i = this.flush(); if (i) return i.buffer; throw new Error('WebCrypto and softwareDecrypt: failed to decrypt data') }, e.getValidChunk = function(t) { let e = t; const r = t.length - t.length % 16; return r !== t.length && (e = nt(t, 0, r), this.remainderData = nt(t, r)), e }, e.logOnce = function(t) { this.logEnabled && (w.log('[decrypter]: ' + t), this.logEnabled = !1) }, t }()); const fi = function(t) { for (var e = '', r = t.length, i = 0; i < r; i++)e += '[' + t.start(i).toFixed(3) + '-' + t.end(i).toFixed(3) + ']'; return e }; const gi = 'STOPPED'; const vi = 'IDLE'; const mi = 'KEY_LOADING'; const pi = 'FRAG_LOADING'; const yi = 'FRAG_LOADING_WAITING_RETRY'; const Ei = 'WAITING_TRACK'; const Ti = 'PARSING'; const Si = 'PARSED'; const Li = 'ENDED'; const Ai = 'ERROR'; const Ri = 'WAITING_INIT_PTS'; const ki = 'WAITING_LEVEL'; const bi = (function(t) { function e(e, r, i, n, a) { let s; return (s = t.call(this) || this).hls = void 0, s.fragPrevious = null, s.fragCurrent = null, s.fragmentTracker = void 0, s.transmuxer = null, s._state = gi, s.playlistType = void 0, s.media = null, s.mediaBuffer = null, s.config = void 0, s.bitrateTest = !1, s.lastCurrentTime = 0, s.nextLoadPosition = 0, s.startPosition = 0, s.startTimeOffset = null, s.loadedmetadata = !1, s.retryDate = 0, s.levels = null, s.fragmentLoader = void 0, s.keyLoader = void 0, s.levelLastLoaded = null, s.startFragRequested = !1, s.decrypter = void 0, s.initPTS = [], s.onvseeking = null, s.onvended = null, s.logPrefix = '', s.log = void 0, s.warn = void 0, s.playlistType = a, s.logPrefix = n, s.log = w.log.bind(w, n + ':'), s.warn = w.warn.bind(w, n + ':'), s.hls = e, s.fragmentLoader = new ai(e.config), s.keyLoader = i, s.fragmentTracker = r, s.config = e.config, s.decrypter = new ci(e.config), e.on(S.MANIFEST_LOADED, s.onManifestLoaded, (function(t) { if (void 0 === t) throw new ReferenceError('this hasn\'t been initialised - super() hasn\'t been called'); return t }(s))), s }l(e, t); const r = e.prototype; return r.doTick = function() { this.onTickEnd() }, r.onTickEnd = function() {}, r.startLoad = function(t) {}, r.stopLoad = function() { this.fragmentLoader.abort(), this.keyLoader.abort(this.playlistType); const t = this.fragCurrent; t != null && t.loader && (t.abortRequests(), this.fragmentTracker.removeFragment(t)), this.resetTransmuxer(), this.fragCurrent = null, this.fragPrevious = null, this.clearInterval(), this.clearNextTick(), this.state = gi }, r._streamEnded = function(t, e) { if (e.live || t.nextStart || !t.end || !this.media) return !1; const r = e.partList; if (r != null && r.length) { const i = r[r.length - 1]; return Jr.isBuffered(this.media, i.start + i.duration / 2) } const n = e.fragments[e.fragments.length - 1].type; return this.fragmentTracker.isEndListAppended(n) }, r.getLevelDetails = function() { let t; if (this.levels && this.levelLastLoaded !== null) return (t = this.levelLastLoaded) == null ? void 0 : t.details }, r.onMediaAttached = function(t, e) { const r = this.media = this.mediaBuffer = e.media; this.onvseeking = this.onMediaSeeking.bind(this), this.onvended = this.onMediaEnded.bind(this), r.addEventListener('seeking', this.onvseeking), r.addEventListener('ended', this.onvended); const i = this.config; this.levels && i.autoStartLoad && this.state === gi && this.startLoad(i.startPosition) }, r.onMediaDetaching = function() { const t = this.media; t != null && t.ended && (this.log('MSE detaching and video ended, reset startPosition'), this.startPosition = this.lastCurrentTime = 0), t && this.onvseeking && this.onvended && (t.removeEventListener('seeking', this.onvseeking), t.removeEventListener('ended', this.onvended), this.onvseeking = this.onvended = null), this.keyLoader && this.keyLoader.detach(), this.media = this.mediaBuffer = null, this.loadedmetadata = !1, this.fragmentTracker.removeAllFragments(), this.stopLoad() }, r.onMediaSeeking = function() { const t = this.config; const e = this.fragCurrent; const r = this.media; const i = this.mediaBuffer; const n = this.state; const a = r ? r.currentTime : 0; const s = Jr.bufferInfo(i || r, a, t.maxBufferHole); if (this.log('media seeking to ' + (y(a) ? a.toFixed(3) : a) + ', state: ' + n), this.state === Li) this.resetLoadingState(); else if (e) { const o = t.maxFragLookUpTolerance; const l = e.start - o; const u = e.start + e.duration + o; if (!s.len || u < s.start || l > s.end) { const h = a > u; (a < l || h) && (h && e.loader && (this.log('seeking outside of buffer while fragment load in progress, cancel fragment load'), e.abortRequests(), this.resetLoadingState()), this.fragPrevious = null) } }r && (this.fragmentTracker.removeFragmentsInRange(a, 1 / 0, this.playlistType, !0), this.lastCurrentTime = a), this.loadedmetadata || s.len || (this.nextLoadPosition = this.startPosition = a), this.tickImmediate() }, r.onMediaEnded = function() { this.startPosition = this.lastCurrentTime = 0 }, r.onManifestLoaded = function(t, e) { this.startTimeOffset = e.startTimeOffset, this.initPTS = [] }, r.onHandlerDestroying = function() { this.hls.off(S.MANIFEST_LOADED, this.onManifestLoaded, this), this.stopLoad(), t.prototype.onHandlerDestroying.call(this), this.hls = null }, r.onHandlerDestroyed = function() { this.state = gi, this.fragmentLoader && this.fragmentLoader.destroy(), this.keyLoader && this.keyLoader.destroy(), this.decrypter && this.decrypter.destroy(), this.hls = this.log = this.warn = this.decrypter = this.keyLoader = this.fragmentLoader = this.fragmentTracker = null, t.prototype.onHandlerDestroyed.call(this) }, r.loadFragment = function(t, e, r) { this._loadFragForPlayback(t, e, r) }, r._loadFragForPlayback = function(t, e, r) { const i = this; this._doFragLoad(t, e, r, function(e) { if (i.fragContextChanged(t)) return i.warn('Fragment ' + t.sn + (e.part ? ' p: ' + e.part.index : '') + ' of level ' + t.level + ' was dropped during download.'), void i.fragmentTracker.removeFragment(t); t.stats.chunkCount++, i._handleFragmentLoadProgress(e) }).then(function(e) { if (e) { const r = i.state; i.fragContextChanged(t) ? (r === pi || !i.fragCurrent && r === Ti) && (i.fragmentTracker.removeFragment(t), i.state = vi) : ('payload' in e && (i.log('Loaded fragment ' + t.sn + ' of level ' + t.level), i.hls.trigger(S.FRAG_LOADED, e)), i._handleFragmentLoadComplete(e)) } }).catch(function(e) { i.state !== gi && i.state !== Ai && (i.warn(e), i.resetFragmentLoading(t)) }) }, r.clearTrackerIfNeeded = function(t) { let e; const r = this.fragmentTracker; if (r.getState(t) === Yr) { const i = t.type; const n = this.getFwdBufferInfo(this.mediaBuffer, i); const a = Math.max(t.duration, n ? n.len : this.config.maxBufferLength); const s = this.backtrackFragment; ((s ? t.sn - s.sn : 0) == 1 || this.reduceMaxBufferLength(a)) && r.removeFragment(t) } else ((e = this.mediaBuffer) == null ? void 0 : e.buffered.length) === 0 ? r.removeAllFragments() : r.hasParts(t.type) && (r.detectPartialFragments({ frag: t, part: null, stats: t.stats, id: t.type }), r.getState(t) === Wr && r.removeFragment(t)) }, r.checkLiveUpdate = function(t) { if (t.updated && !t.live) { const e = t.fragments[t.fragments.length - 1]; this.fragmentTracker.detectPartialFragments({ frag: e, part: null, stats: e.stats, id: e.type }) }t.fragments[0] || (t.deltaUpdateFailed = !0) }, r.flushMainBuffer = function(t, e, r) { if (void 0 === r && (r = null), t - e) { const i = { startOffset: t, endOffset: e, type: r }; this.hls.trigger(S.BUFFER_FLUSHING, i) } }, r._loadInitSegment = function(t, e) { const r = this; this._doFragLoad(t, e).then(function(e) { if (!e || r.fragContextChanged(t) || !r.levels) throw new Error('init load aborted'); return e }).then(function(e) { const i = r.hls; const n = e.payload; const a = t.decryptdata; if (n && n.byteLength > 0 && a != null && a.key && a.iv && a.method === 'AES-128') { const s = self.performance.now(); return r.decrypter.decrypt(new Uint8Array(n), a.key.buffer, a.iv.buffer).catch(function(e) { throw i.trigger(S.ERROR, { type: L.MEDIA_ERROR, details: A.FRAG_DECRYPT_ERROR, fatal: !1, error: e, reason: e.message, frag: t }), e }).then(function(n) { const a = self.performance.now(); return i.trigger(S.FRAG_DECRYPTED, { frag: t, payload: n, stats: { tstart: s, tdecrypt: a } }), e.payload = n, r.completeInitSegmentLoad(e) }) } return r.completeInitSegmentLoad(e) }).catch(function(e) { r.state !== gi && r.state !== Ai && (r.warn(e), r.resetFragmentLoading(t)) }) }, r.completeInitSegmentLoad = function(t) { if (!this.levels) throw new Error('init load aborted, missing levels'); const e = t.frag.stats; this.state = vi, t.frag.data = new Uint8Array(t.payload), e.parsing.start = e.buffering.start = self.performance.now(), e.parsing.end = e.buffering.end = self.performance.now(), this.tick() }, r.fragContextChanged = function(t) { const e = this.fragCurrent; return !t || !e || t.sn !== e.sn || t.level !== e.level }, r.fragBufferedComplete = function(t, e) { let r; let i; let n; let a; const s = this.mediaBuffer ? this.mediaBuffer : this.media; if (this.log('Buffered ' + t.type + ' sn: ' + t.sn + (e ? ' part: ' + e.index : '') + ' of ' + (this.playlistType === we ? 'level' : 'track') + ' ' + t.level + ' (frag:[' + ((r = t.startPTS) != null ? r : NaN).toFixed(3) + '-' + ((i = t.endPTS) != null ? i : NaN).toFixed(3) + '] > buffer:' + (s ? fi(Jr.getBuffered(s)) : '(detached)') + ')'), t.sn !== 'initSegment') { let o; if (t.type !== _e) { const l = t.elementaryStreams; if (!Object.keys(l).some(function(t) { return !!l[t] })) return void (this.state = vi) } const u = (o = this.levels) == null ? void 0 : o[t.level]; u != null && u.fragmentError && (this.log('Resetting level fragment error count of ' + u.fragmentError + ' on frag buffered'), u.fragmentError = 0) } this.state = vi, s && (!this.loadedmetadata && t.type == we && s.buffered.length && ((n = this.fragCurrent) == null ? void 0 : n.sn) === ((a = this.fragPrevious) == null ? void 0 : a.sn) && (this.loadedmetadata = !0, this.seekToStartPos()), this.tick()) }, r.seekToStartPos = function() {}, r._handleFragmentLoadComplete = function(t) { const e = this.transmuxer; if (e) { const r = t.frag; const i = t.part; const n = t.partsLoaded; const a = !n || n.length === 0 || n.some(function(t) { return !t }); const s = new $r(r.level, r.sn, r.stats.chunkCount + 1, 0, i ? i.index : -1, !a); e.flush(s) } }, r._handleFragmentLoadProgress = function(t) {}, r._doFragLoad = function(t, e, r, i) { let n; const a = this; void 0 === r && (r = null); const s = e == null ? void 0 : e.details; if (!this.levels || !s) throw new Error('frag load aborted, missing level' + (s ? '' : ' detail') + 's'); let o = null; if (!t.encrypted || (n = t.decryptdata) != null && n.key ? !t.encrypted && s.encryptedFragments.length && this.keyLoader.loadClear(t, s.encryptedFragments) : (this.log('Loading key for ' + t.sn + ' of [' + s.startSN + '-' + s.endSN + '], ' + (this.logPrefix === '[stream-controller]' ? 'level' : 'track') + ' ' + t.level), this.state = mi, this.fragCurrent = t, o = this.keyLoader.load(t).then(function(t) { if (!a.fragContextChanged(t.frag)) return a.hls.trigger(S.KEY_LOADED, t), a.state === mi && (a.state = vi), t }), this.hls.trigger(S.KEY_LOADING, { frag: t }), this.fragCurrent === null && (o = Promise.reject(new Error('frag load aborted, context changed in KEY_LOADING')))), r = Math.max(t.start, r || 0), this.config.lowLatencyMode && t.sn !== 'initSegment') { const l = s.partList; if (l && i) { r > t.end && s.fragmentHint && (t = s.fragmentHint); const u = this.getNextPart(l, t, r); if (u > -1) { let h; const d = l[u]; return this.log('Loading part sn: ' + t.sn + ' p: ' + d.index + ' cc: ' + t.cc + ' of playlist [' + s.startSN + '-' + s.endSN + '] parts [0-' + u + '-' + (l.length - 1) + '] ' + (this.logPrefix === '[stream-controller]' ? 'level' : 'track') + ': ' + t.level + ', target: ' + parseFloat(r.toFixed(3))), this.nextLoadPosition = d.start + d.duration, this.state = pi, h = o ? o.then(function(r) { return !r || a.fragContextChanged(r.frag) ? null : a.doFragPartsLoad(t, d, e, i) }).catch(function(t) { return a.handleFragLoadError(t) }) : this.doFragPartsLoad(t, d, e, i).catch(function(t) { return a.handleFragLoadError(t) }), this.hls.trigger(S.FRAG_LOADING, { frag: t, part: d, targetBufferTime: r }), this.fragCurrent === null ? Promise.reject(new Error('frag load aborted, context changed in FRAG_LOADING parts')) : h } if (!t.url || this.loadedEndOfParts(l, r)) return Promise.resolve(null) } } this.log('Loading fragment ' + t.sn + ' cc: ' + t.cc + ' ' + (s ? 'of [' + s.startSN + '-' + s.endSN + '] ' : '') + (this.logPrefix === '[stream-controller]' ? 'level' : 'track') + ': ' + t.level + ', target: ' + parseFloat(r.toFixed(3))), y(t.sn) && !this.bitrateTest && (this.nextLoadPosition = t.start + t.duration), this.state = pi; let c; const f = this.config.progressive; return c = f && o ? o.then(function(e) { return !e || a.fragContextChanged(e == null ? void 0 : e.frag) ? null : a.fragmentLoader.load(t, i) }).catch(function(t) { return a.handleFragLoadError(t) }) : Promise.all([this.fragmentLoader.load(t, f ? i : void 0), o]).then(function(t) { const e = t[0]; return !f && e && i && i(e), e }).catch(function(t) { return a.handleFragLoadError(t) }), this.hls.trigger(S.FRAG_LOADING, { frag: t, targetBufferTime: r }), this.fragCurrent === null ? Promise.reject(new Error('frag load aborted, context changed in FRAG_LOADING')) : c }, r.doFragPartsLoad = function(t, e, r, i) { const n = this; return new Promise(function(a, s) { let o; const l = []; const u = (o = r.details) == null ? void 0 : o.partList; !(function e(o) { n.fragmentLoader.loadPart(t, o, i).then(function(i) { l[o.index] = i; const s = i.part; n.hls.trigger(S.FRAG_LOADED, i); const h = ur(r, t.sn, o.index + 1) || hr(u, t.sn, o.index + 1); if (!h) return a({ frag: t, part: s, partsLoaded: l }); e(h) }).catch(s) }(e)) }) }, r.handleFragLoadError = function(t) { if ('data' in t) { const e = t.data; t.data && e.details === A.INTERNAL_ABORTED ? this.handleFragLoadAborted(e.frag, e.part) : this.hls.trigger(S.ERROR, e) } else this.hls.trigger(S.ERROR, { type: L.OTHER_ERROR, details: A.INTERNAL_EXCEPTION, err: t, error: t, fatal: !0 }); return null }, r._handleTransmuxerFlush = function(t) { const e = this.getCurrentContext(t); if (e && this.state === Ti) { const r = e.frag; const i = e.part; const n = e.level; const a = self.performance.now(); r.stats.parsing.end = a, i && (i.stats.parsing.end = a), this.updateLevelTiming(r, i, n, t.partial) } else this.fragCurrent || this.state === gi || this.state === Ai || (this.state = vi) }, r.getCurrentContext = function(t) { const e = this.levels; const r = this.fragCurrent; const i = t.level; const n = t.sn; const a = t.part; if (e == null || !e[i]) return this.warn('Levels object was unset while buffering fragment ' + n + ' of level ' + i + '. The current chunk will not be buffered.'), null; const s = e[i]; const o = a > -1 ? ur(s, n, a) : null; const l = o ? o.fragment : (function(t, e, r) { if (t == null || !t.details) return null; const i = t.details; let n = i.fragments[e - i.startSN]; return n || ((n = i.fragmentHint) && n.sn === e ? n : e < i.startSN && r && r.sn === e ? r : null) }(s, n, r)); return l ? (r && r !== l && (l.stats = r.stats), { frag: l, part: o, level: s }) : null }, r.bufferFragmentData = function(t, e, r, i, n) { let a; if (t && this.state === Ti) { const s = t.data1; const o = t.data2; let l = s; if (s && o && (l = Kt(s, o)), (a = l) != null && a.length) { const u = { type: t.type, frag: e, part: r, chunkMeta: i, parent: e.type, data: l }; if (this.hls.trigger(S.BUFFER_APPENDING, u), t.dropped && t.independent && !r) { if (n) return; this.flushBufferGap(e) } } } }, r.flushBufferGap = function(t) { const e = this.media; if (e) if (Jr.isBuffered(e, e.currentTime)) { const r = e.currentTime; const i = Jr.bufferInfo(e, r, 0); const n = t.duration; const a = Math.min(2 * this.config.maxFragLookUpTolerance, 0.25 * n); const s = Math.max(Math.min(t.start - a, i.end - a), r + a); t.start - s > a && this.flushMainBuffer(s, t.start) } else this.flushMainBuffer(0, t.start) }, r.getFwdBufferInfo = function(t, e) { const r = this.getLoadPosition(); return y(r) ? this.getFwdBufferInfoAtPos(t, r, e) : null }, r.getFwdBufferInfoAtPos = function(t, e, r) { const i = this.config.maxBufferHole; const n = Jr.bufferInfo(t, e, i); if (n.len === 0 && void 0 !== n.nextStart) { const a = this.fragmentTracker.getBufferedFrag(e, r); if (a && n.nextStart < a.end) return Jr.bufferInfo(t, e, Math.max(n.nextStart, i)) } return n }, r.getMaxBufferLength = function(t) { let e; const r = this.config; return e = t ? Math.max(8 * r.maxBufferSize / t, r.maxBufferLength) : r.maxBufferLength, Math.min(e, r.maxMaxBufferLength) }, r.reduceMaxBufferLength = function(t) { const e = this.config; const r = t || e.maxBufferLength; const i = e.maxMaxBufferLength / 2; return i >= r && (e.maxMaxBufferLength = i, this.warn('Reduce max buffer length to ' + i + 's'), !0) }, r.getAppendedFrag = function(t, e) { const r = this.fragmentTracker.getAppendedFrag(t, we); return r && 'fragment' in r ? r.fragment : r }, r.getNextFragment = function(t, e) { const r = e.fragments; const i = r.length; if (!i) return null; let n; const a = this.config; const s = r[0].start; if (e.live) { const o = a.initialLiveManifestSize; if (i < o) return this.warn('Not enough fragments to start playback (have: ' + i + ', need: ' + o + ')'), null; (!e.PTSKnown && !this.startFragRequested && this.startPosition === -1 || t < s) && (n = this.getInitialLiveFragment(e, r), this.startPosition = this.nextLoadPosition = n ? this.hls.liveSyncPosition || n.start : t) } else t <= s && (n = r[0]); if (!n) { const l = a.lowLatencyMode ? e.partEnd : e.fragmentEnd; n = this.getFragmentAtPosition(t, l, e) } return this.mapToInitFragWhenRequired(n) }, r.isLoopLoading = function(t, e) { const r = this.fragmentTracker.getState(t); return (r === jr || r === Wr && !!t.gap) && this.nextLoadPosition > e }, r.getNextFragmentLoopLoading = function(t, e, r, i, n) { const a = t.gap; const s = this.getNextFragment(this.nextLoadPosition, e); if (s === null) return s; if (t = s, a && t && !t.gap && r.nextStart) { const o = this.getFwdBufferInfoAtPos(this.mediaBuffer ? this.mediaBuffer : this.media, r.nextStart, i); if (o !== null && r.len + o.len >= n) return this.log('buffer full after gaps in "' + i + '" playlist starting at sn: ' + t.sn), null } return t }, r.mapToInitFragWhenRequired = function(t) { return t == null || !t.initSegment || t != null && t.initSegment.data || this.bitrateTest ? t : t.initSegment }, r.getNextPart = function(t, e, r) { for (var i = -1, n = !1, a = !0, s = 0, o = t.length; s < o; s++) { const l = t[s]; if (a = a && !l.independent, i > -1 && r < l.start) break; const u = l.loaded; u ? i = -1 : (n || l.independent || a) && l.fragment === e && (i = s), n = u } return i }, r.loadedEndOfParts = function(t, e) { const r = t[t.length - 1]; return r && e > r.start && r.loaded }, r.getInitialLiveFragment = function(t, e) { const r = this.fragPrevious; let i = null; if (r) { if (t.hasProgramDateTime && (this.log('Live playlist, switching playlist, load frag with same PDT: ' + r.programDateTime), i = (function(t, e, r) { if (e === null || !Array.isArray(t) || !t.length || !y(e)) return null; if (e < (t[0].programDateTime || 0)) return null; if (e >= (t[t.length - 1].endProgramDateTime || 0)) return null; r = r || 0; for (let i = 0; i < t.length; ++i) { const n = t[i]; if (Tr(e, r, n)) return n } return null }(e, r.endProgramDateTime, this.config.maxFragLookUpTolerance))), !i) { const n = r.sn + 1; if (n >= t.startSN && n <= t.endSN) { const a = e[n - t.startSN]; r.cc === a.cc && (i = a, this.log('Live playlist, switching playlist, load frag with next SN: ' + i.sn)) }i || (i = (function(t, e) { return pr(t, function(t) { return t.cc < e ? 1 : t.cc > e ? -1 : 0 }) }(e, r.cc)), i && this.log('Live playlist, switching playlist, load frag with same CC: ' + i.sn)) } } else { const s = this.hls.liveSyncPosition; s !== null && (i = this.getFragmentAtPosition(s, this.bitrateTest ? t.fragmentEnd : t.edge, t)) } return i }, r.getFragmentAtPosition = function(t, e, r) { let i; const n = this.config; let a = this.fragPrevious; let s = r.fragments; let o = r.endSN; const l = r.fragmentHint; const u = n.maxFragLookUpTolerance; const h = r.partList; const d = !!(n.lowLatencyMode && h != null && h.length && l); if (d && l && !this.bitrateTest && (s = s.concat(l), o = l.sn), i = t < e ? yr(a, s, t, t > e - u ? 0 : u) : s[s.length - 1]) { const c = i.sn - r.startSN; const f = this.fragmentTracker.getState(i); if ((f === jr || f === Wr && i.gap) && (a = i), a && i.sn === a.sn && (!d || h[0].fragment.sn > i.sn) && a && i.level === a.level) { const g = s[c + 1]; i = i.sn < o && this.fragmentTracker.getState(g) !== jr ? g : null } } return i }, r.synchronizeToLiveEdge = function(t) { const e = this.config; const r = this.media; if (r) { const i = this.hls.liveSyncPosition; const n = r.currentTime; const a = t.fragments[0].start; const s = t.edge; const o = n >= a - e.maxFragLookUpTolerance && n <= s; if (i !== null && r.duration > i && (n < i || !o)) { const l = void 0 !== e.liveMaxLatencyDuration ? e.liveMaxLatencyDuration : e.liveMaxLatencyDurationCount * t.targetduration; (!o && r.readyState < 4 || n < s - l) && (this.loadedmetadata || (this.nextLoadPosition = i), r.readyState && (this.warn('Playback: ' + n.toFixed(3) + ' is located too far from the end of live sliding playlist: ' + s + ', reset currentTime to : ' + i.toFixed(3)), r.currentTime = i)) } } }, r.alignPlaylists = function(t, e, r) { const i = t.fragments.length; if (!i) return this.warn('No fragments in live playlist'), 0; const n = t.fragments[0].start; const a = !e; const s = t.alignedSliding && y(n); if (a || !s && !n) { const o = this.fragPrevious; ri(o, r, t); const l = t.fragments[0].start; return this.log('Live playlist sliding: ' + l.toFixed(2) + ' start-sn: ' + (e ? e.startSN : 'na') + '->' + t.startSN + ' prev-sn: ' + (o ? o.sn : 'na') + ' fragments: ' + i), l } return n }, r.waitForCdnTuneIn = function(t) { return t.live && t.canBlockReload && t.partTarget && t.tuneInGoal > Math.max(t.partHoldBack, 3 * t.partTarget) }, r.setStartPosition = function(t, e) { let r = this.startPosition; if (r < e && (r = -1), r === -1 || this.lastCurrentTime === -1) { const i = this.startTimeOffset !== null; const n = i ? this.startTimeOffset : t.startTimeOffset; n !== null && y(n) ? (r = e + n, n < 0 && (r += t.totalduration), r = Math.min(Math.max(e, r), e + t.totalduration), this.log('Start time offset ' + n + ' found in ' + (i ? 'multivariant' : 'media') + ' playlist, adjust startPosition to ' + r), this.startPosition = r) : t.live ? r = this.hls.liveSyncPosition || e : this.startPosition = r = 0, this.lastCurrentTime = r } this.nextLoadPosition = r }, r.getLoadPosition = function() { const t = this.media; let e = 0; return this.loadedmetadata && t ? e = t.currentTime : this.nextLoadPosition && (e = this.nextLoadPosition), e }, r.handleFragLoadAborted = function(t, e) { this.transmuxer && t.sn !== 'initSegment' && t.stats.aborted && (this.warn('Fragment ' + t.sn + (e ? ' part ' + e.index : '') + ' of level ' + t.level + ' was aborted'), this.resetFragmentLoading(t)) }, r.resetFragmentLoading = function(t) { this.fragCurrent && (this.fragContextChanged(t) || this.state === yi) || (this.state = vi) }, r.onFragmentOrKeyLoadError = function(t, e) { if (e.chunkMeta && !e.frag) { const r = this.getCurrentContext(e.chunkMeta); r && (e.frag = r.frag) } const i = e.frag; if (i && i.type === t && this.levels) if (this.fragContextChanged(i)) { let n; this.warn('Frag load error must match current frag to retry ' + i.url + ' > ' + ((n = this.fragCurrent) == null ? void 0 : n.url)) } else { const a = e.details === A.FRAG_GAP; a && this.fragmentTracker.fragBuffered(i, !0); const s = e.errorAction; const o = s || {}; const l = o.action; const u = o.retryCount; const h = void 0 === u ? 0 : u; const d = o.retryConfig; if (s && l === Rr && d) { this.resetStartWhenNotLoaded(this.levelLastLoaded); const c = gr(d, h); this.warn('Fragment ' + i.sn + ' of ' + t + ' ' + i.level + ' errored with ' + e.details + ', retrying loading ' + (h + 1) + '/' + d.maxNumRetry + ' in ' + c + 'ms'), s.resolved = !0, this.retryDate = self.performance.now() + c, this.state = yi } else if (d && s) { if (this.resetFragmentErrors(t), !(h < d.maxNumRetry)) return void w.warn(e.details + ' reached or exceeded max retry (' + h + ')'); a || l === Ar || (s.resolved = !0) } else (s == null ? void 0 : s.action) === Lr ? this.state = ki : this.state = Ai; this.tickImmediate() } }, r.reduceLengthAndFlushBuffer = function(t) { if (this.state === Ti || this.state === Si) { const e = t.parent; const r = this.getFwdBufferInfo(this.mediaBuffer, e); const i = r && r.len > 0.5; i && this.reduceMaxBufferLength(r.len); const n = !i; return n && this.warn('Buffer full error while media.currentTime is not buffered, flush ' + e + ' buffer'), t.frag && (this.fragmentTracker.removeFragment(t.frag), this.nextLoadPosition = t.frag.start), this.resetLoadingState(), n } return !1 }, r.resetFragmentErrors = function(t) { t === Ce && (this.fragCurrent = null), this.loadedmetadata || (this.startFragRequested = !1), this.state !== gi && (this.state = vi) }, r.afterBufferFlushed = function(t, e, r) { if (t) { const i = Jr.getBuffered(t); this.fragmentTracker.detectEvictedFragments(e, i, r), this.state === Li && this.resetLoadingState() } }, r.resetLoadingState = function() { this.log('Reset loading state'), this.fragCurrent = null, this.fragPrevious = null, this.state = vi }, r.resetStartWhenNotLoaded = function(t) { if (!this.loadedmetadata) { this.startFragRequested = !1; const e = t ? t.details : null; e != null && e.live ? (this.startPosition = -1, this.setStartPosition(e, 0), this.resetLoadingState()) : this.nextLoadPosition = this.startPosition } }, r.resetWhenMissingContext = function(t) { this.warn('The loading context changed while buffering fragment ' + t.sn + ' of level ' + t.level + '. This chunk will not be buffered.'), this.removeUnbufferedFrags(), this.resetStartWhenNotLoaded(this.levelLastLoaded), this.resetLoadingState() }, r.removeUnbufferedFrags = function(t) { void 0 === t && (t = 0), this.fragmentTracker.removeFragmentsInRange(t, 1 / 0, this.playlistType, !1, !0) }, r.updateLevelTiming = function(t, e, r, i) { let n; const a = this; const s = r.details; if (s) { if (!Object.keys(t.elementaryStreams).reduce(function(e, n) { const o = t.elementaryStreams[n]; if (o) { const l = o.endPTS - o.startPTS; if (l <= 0) return a.warn('Could not parse fragment ' + t.sn + ' ' + n + ' duration reliably (' + l + ')'), e || !1; const u = i ? 0 : ar(s, t, o.startPTS, o.endPTS, o.startDTS, o.endDTS); return a.hls.trigger(S.LEVEL_PTS_UPDATED, { details: s, level: r, drift: u, type: n, frag: t, start: o.startPTS, end: o.endPTS }), !0 } return e }, !1) && ((n = this.transmuxer) == null ? void 0 : n.error) === null) { const o = new Error('Found no media in fragment ' + t.sn + ' of level ' + t.level + ' resetting transmuxer to fallback to playlist timing'); if (r.fragmentError === 0 && (r.fragmentError++, t.gap = !0, this.fragmentTracker.removeFragment(t), this.fragmentTracker.fragBuffered(t, !0)), this.warn(o.message), this.hls.trigger(S.ERROR, { type: L.MEDIA_ERROR, details: A.FRAG_PARSING_ERROR, fatal: !1, error: o, frag: t, reason: 'Found no media in msn ' + t.sn + ' of level "' + r.url + '"' }), !this.hls) return; this.resetTransmuxer() } this.state = Si, this.hls.trigger(S.FRAG_PARSED, { frag: t, part: e }) } else this.warn('level.details undefined') }, r.resetTransmuxer = function() { this.transmuxer && (this.transmuxer.destroy(), this.transmuxer = null) }, r.recoverWorkerError = function(t) { t.event === 'demuxerWorker' && (this.fragmentTracker.removeAllFragments(), this.resetTransmuxer(), this.resetStartWhenNotLoaded(this.levelLastLoaded), this.resetLoadingState()) }, s(e, [{ key: 'state', get: function() { return this._state }, set: function(t) { const e = this._state; e !== t && (this._state = t, this.log(e + '->' + t)) } }]), e }(Hr)); const Di = (function() { function t() { this.chunks = [], this.dataLength = 0 } const e = t.prototype; return e.push = function(t) { this.chunks.push(t), this.dataLength += t.length }, e.flush = function() { let t; const e = this.chunks; const r = this.dataLength; return e.length ? (t = e.length === 1 ? e[0] : (function(t, e) { for (var r = new Uint8Array(e), i = 0, n = 0; n < t.length; n++) { const a = t[n]; r.set(a, i), i += a.length } return r }(e, r)), this.reset(), t) : new Uint8Array(0) }, e.reset = function() { this.chunks.length = 0, this.dataLength = 0 }, t }()); function Ii(t, e) { return void 0 === t && (t = ''), void 0 === e && (e = 9e4), { type: t, id: -1, pid: -1, inputTimeScale: e, sequenceNumber: -1, samples: [], dropped: 0 } } const wi = (function() { function t() { this._audioTrack = void 0, this._id3Track = void 0, this.frameIndex = 0, this.cachedData = null, this.basePTS = null, this.initPTS = null, this.lastPTS = null } const e = t.prototype; return e.resetInitSegment = function(t, e, r, i) { this._id3Track = { type: 'id3', id: 3, pid: -1, inputTimeScale: 9e4, sequenceNumber: 0, samples: [], dropped: 0 } }, e.resetTimeStamp = function(t) { this.initPTS = t, this.resetContiguity() }, e.resetContiguity = function() { this.basePTS = null, this.lastPTS = null, this.frameIndex = 0 }, e.canParse = function(t, e) { return !1 }, e.appendFrame = function(t, e, r) {}, e.demux = function(t, e) { this.cachedData && (t = Kt(this.cachedData, t), this.cachedData = null); let r; let i = lt(t, 0); let n = i ? i.length : 0; const a = this._audioTrack; const s = this._id3Track; const o = i ? dt(i) : void 0; const l = t.length; for ((this.basePTS === null || this.frameIndex === 0 && y(o)) && (this.basePTS = Ci(o, e, this.initPTS), this.lastPTS = this.basePTS), this.lastPTS === null && (this.lastPTS = this.basePTS), i && i.length > 0 && s.samples.push({ pts: this.lastPTS, dts: this.lastPTS, data: i, type: Ge, duration: Number.POSITIVE_INFINITY }); n < l;) { if (this.canParse(t, n)) { const u = this.appendFrame(a, t, n); u ? (this.frameIndex++, this.lastPTS = u.sample.pts, r = n += u.length) : n = l } else ht(t, n) ? (i = lt(t, n), s.samples.push({ pts: this.lastPTS, dts: this.lastPTS, data: i, type: Ge, duration: Number.POSITIVE_INFINITY }), r = n += i.length) : n++; if (n === l && r !== l) { const h = nt(t, r); this.cachedData ? this.cachedData = Kt(this.cachedData, h) : this.cachedData = h } } return { audioTrack: a, videoTrack: Ii(), id3Track: s, textTrack: Ii() } }, e.demuxSampleAes = function(t, e, r) { return Promise.reject(new Error('[' + this + '] This demuxer does not support Sample-AES decryption')) }, e.flush = function(t) { const e = this.cachedData; return e && (this.cachedData = null, this.demux(e, 0)), { audioTrack: this._audioTrack, videoTrack: Ii(), id3Track: this._id3Track, textTrack: Ii() } }, e.destroy = function() {}, t }()); var Ci = function(t, e, r) { return y(t) ? 90 * t : 9e4 * e + (r ? 9e4 * r.baseTime / r.timescale : 0) }; function _i(t, e) { return t[e] === 255 && (246 & t[e + 1]) == 240 } function xi(t, e) { return 1 & t[e + 1] ? 7 : 9 } function Pi(t, e) { return (3 & t[e + 3]) << 11 | t[e + 4] << 3 | (224 & t[e + 5]) >>> 5 } function Fi(t, e) { return e + 1 < t.length && _i(t, e) } function Mi(t, e) { if (Fi(t, e)) { const r = xi(t, e); if (e + r >= t.length) return !1; const i = Pi(t, e); if (i <= r) return !1; const n = e + i; return n === t.length || Fi(t, n) } return !1 } function Oi(t, e, r, i, n) { if (!t.samplerate) { const a = (function(t, e, r, i) { let n; let a; let s; let o; const l = navigator.userAgent.toLowerCase(); const u = i; const h = [96e3, 88200, 64e3, 48e3, 44100, 32e3, 24e3, 22050, 16e3, 12e3, 11025, 8e3, 7350]; n = 1 + ((192 & e[r + 2]) >>> 6); const d = (60 & e[r + 2]) >>> 2; if (!(d > h.length - 1)) return s = (1 & e[r + 2]) << 2, s |= (192 & e[r + 3]) >>> 6, w.log('manifest codec:' + i + ', ADTS type:' + n + ', samplingIndex:' + d), /firefox/i.test(l) ? d >= 6 ? (n = 5, o = new Array(4), a = d - 3) : (n = 2, o = new Array(2), a = d) : l.indexOf('android') !== -1 ? (n = 2, o = new Array(2), a = d) : (n = 5, o = new Array(4), i && (i.indexOf('mp4a.40.29') !== -1 || i.indexOf('mp4a.40.5') !== -1) || !i && d >= 6 ? a = d - 3 : ((i && i.indexOf('mp4a.40.2') !== -1 && (d >= 6 && s === 1 || /vivaldi/i.test(l)) || !i && s === 1) && (n = 2, o = new Array(2)), a = d)), o[0] = n << 3, o[0] |= (14 & d) >> 1, o[1] |= (1 & d) << 7, o[1] |= s << 3, n === 5 && (o[1] |= (14 & a) >> 1, o[2] = (1 & a) << 7, o[2] |= 8, o[3] = 0), { config: o, samplerate: h[d], channelCount: s, codec: 'mp4a.40.' + n, manifestCodec: u }; const c = new Error('invalid ADTS sampling index:' + d); t.emit(S.ERROR, S.ERROR, { type: L.MEDIA_ERROR, details: A.FRAG_PARSING_ERROR, fatal: !0, error: c, reason: c.message }) }(e, r, i, n)); if (!a) return; t.config = a.config, t.samplerate = a.samplerate, t.channelCount = a.channelCount, t.codec = a.codec, t.manifestCodec = a.manifestCodec, w.log('parsed codec:' + t.codec + ', rate:' + a.samplerate + ', channels:' + a.channelCount) } } function Ni(t) { return 9216e4 / t } function Ui(t, e, r, i, n) { let a; const s = i + n * Ni(t.samplerate); const o = (function(t, e) { const r = xi(t, e); if (e + r <= t.length) { const i = Pi(t, e) - r; if (i > 0) return { headerLength: r, frameLength: i } } }(e, r)); if (o) { const l = o.frameLength; const u = o.headerLength; const h = u + l; const d = Math.max(0, r + h - e.length); d ? (a = new Uint8Array(h - u)).set(e.subarray(r + u, e.length), 0) : a = e.subarray(r + u, r + h); const c = { unit: a, pts: s }; return d || t.samples.push(c), { sample: c, length: h, missing: d } } const f = e.length - r; return (a = new Uint8Array(f)).set(e.subarray(r, e.length), 0), { sample: { unit: a, pts: s }, length: f, missing: -1 } } let Bi = null; const Gi = [32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448, 32, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 384, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 32, 48, 56, 64, 80, 96, 112, 128, 144, 160, 176, 192, 224, 256, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160]; const Ki = [44100, 48e3, 32e3, 22050, 24e3, 16e3, 11025, 12e3, 8e3]; const Hi = [[0, 72, 144, 12], [0, 0, 0, 0], [0, 72, 144, 12], [0, 144, 144, 12]]; const Vi = [0, 1, 1, 4]; function Yi(t, e, r, i, n) { if (!(r + 24 > e.length)) { const a = Wi(e, r); if (a && r + a.frameLength <= e.length) { const s = i + n * (9e4 * a.samplesPerFrame / a.sampleRate); const o = { unit: e.subarray(r, r + a.frameLength), pts: s, dts: s }; return t.config = [], t.channelCount = a.channelCount, t.samplerate = a.sampleRate, t.samples.push(o), { sample: o, length: a.frameLength, missing: 0 } } } } function Wi(t, e) { const r = t[e + 1] >> 3 & 3; const i = t[e + 1] >> 1 & 3; const n = t[e + 2] >> 4 & 15; const a = t[e + 2] >> 2 & 3; if (r !== 1 && n !== 0 && n !== 15 && a !== 3) { const s = t[e + 2] >> 1 & 1; const o = t[e + 3] >> 6; const l = 1e3 * Gi[14 * (r === 3 ? 3 - i : i === 3 ? 3 : 4) + n - 1]; const u = Ki[3 * (r === 3 ? 0 : r === 2 ? 1 : 2) + a]; const h = o === 3 ? 1 : 2; const d = Hi[r][i]; const c = Vi[i]; const f = 8 * d * c; const g = Math.floor(d * l / u + s) * c; if (Bi === null) { const v = (navigator.userAgent || '').match(/Chrome\/(\d+)/i); Bi = v ? parseInt(v[1]) : 0 } return !!Bi && Bi <= 87 && i === 2 && l >= 224e3 && o === 0 && (t[e + 3] = 128 | t[e + 3]), { sampleRate: u, channelCount: h, frameLength: g, samplesPerFrame: f } } } function ji(t, e) { return t[e] === 255 && (224 & t[e + 1]) == 224 && (6 & t[e + 1]) != 0 } function qi(t, e) { return e + 1 < t.length && ji(t, e) } function Xi(t, e) { if (e + 1 < t.length && ji(t, e)) { const r = Wi(t, e); let i = 4; r != null && r.frameLength && (i = r.frameLength); const n = e + i; return n === t.length || qi(t, n) } return !1 } const zi = (function(t) { function e(e, r) { let i; return (i = t.call(this) || this).observer = void 0, i.config = void 0, i.observer = e, i.config = r, i }l(e, t); const r = e.prototype; return r.resetInitSegment = function(e, r, i, n) { t.prototype.resetInitSegment.call(this, e, r, i, n), this._audioTrack = { container: 'audio/adts', type: 'audio', id: 2, pid: -1, sequenceNumber: 0, segmentCodec: 'aac', samples: [], manifestCodec: r, duration: n, inputTimeScale: 9e4, dropped: 0 } }, e.probe = function(t) { if (!t) return !1; const e = lt(t, 0); let r = (e == null ? void 0 : e.length) || 0; if (Xi(t, r)) return !1; for (let i = t.length; r < i; r++) if (Mi(t, r)) return w.log('ADTS sync word found !'), !0; return !1 }, r.canParse = function(t, e) { return (function(t, e) { return (function(t, e) { return e + 5 < t.length }(t, e)) && _i(t, e) && Pi(t, e) <= t.length - e }(t, e)) }, r.appendFrame = function(t, e, r) { Oi(t, this.observer, e, r, t.manifestCodec); const i = Ui(t, e, r, this.basePTS, this.frameIndex); if (i && i.missing === 0) return i }, e }(wi)); const Qi = /\/emsg[-/]ID3/i; const Ji = (function() { function t(t, e) { this.remainderData = null, this.timeOffset = 0, this.config = void 0, this.videoTrack = void 0, this.audioTrack = void 0, this.id3Track = void 0, this.txtTrack = void 0, this.config = e } const e = t.prototype; return e.resetTimeStamp = function() {}, e.resetInitSegment = function(t, e, r, i) { const n = this.videoTrack = Ii('video', 1); const a = this.audioTrack = Ii('audio', 1); const s = this.txtTrack = Ii('text', 1); if (this.id3Track = Ii('id3', 1), this.timeOffset = 0, t != null && t.byteLength) { const o = Ft(t); if (o.video) { const l = o.video; const u = l.id; const h = l.timescale; const d = l.codec; n.id = u, n.timescale = s.timescale = h, n.codec = d } if (o.audio) { const c = o.audio; const f = c.id; const g = c.timescale; const v = c.codec; a.id = f, a.timescale = g, a.codec = v }s.id = kt.text, n.sampleDuration = 0, n.duration = a.duration = i } }, e.resetContiguity = function() { this.remainderData = null }, t.probe = function(t) { return (function(t) { for (let e = t.byteLength, r = 0; r < e;) { const i = It(t, r); if (i > 8 && t[r + 4] === 109 && t[r + 5] === 111 && t[r + 6] === 111 && t[r + 7] === 102) return !0; r = i > 1 ? r + i : e } return !1 }(t)) }, e.demux = function(t, e) { this.timeOffset = e; let r = t; const i = this.videoTrack; const n = this.txtTrack; if (this.config.progressive) { this.remainderData && (r = Kt(this.remainderData, t)); const a = (function(t) { const e = { valid: null, remainder: null }; const r = xt(t, ['moof']); if (r.length < 2) return e.remainder = t, e; const i = r[r.length - 1]; return e.valid = nt(t, 0, i.byteOffset - 8), e.remainder = nt(t, i.byteOffset - 8), e }(r)); this.remainderData = a.remainder, i.samples = a.valid || new Uint8Array() } else i.samples = r; const s = this.extractID3Track(i, e); return n.samples = Ht(e, i), { videoTrack: i, audioTrack: this.audioTrack, id3Track: s, textTrack: this.txtTrack } }, e.flush = function() { const t = this.timeOffset; const e = this.videoTrack; const r = this.txtTrack; e.samples = this.remainderData || new Uint8Array(), this.remainderData = null; const i = this.extractID3Track(e, this.timeOffset); return r.samples = Ht(t, e), { videoTrack: e, audioTrack: Ii(), id3Track: i, textTrack: Ii() } }, e.extractID3Track = function(t, e) { const r = this.id3Track; if (t.samples.length) { const i = xt(t.samples, ['emsg']); i && i.forEach(function(t) { const i = (function(t) { const e = t[0]; let r = ''; let i = ''; let n = 0; let a = 0; let s = 0; let o = 0; let l = 0; let u = 0; if (e === 0) { for (;bt(t.subarray(u, u + 1)) !== '\0';)r += bt(t.subarray(u, u + 1)), u += 1; for (r += bt(t.subarray(u, u + 1)), u += 1; bt(t.subarray(u, u + 1)) !== '\0';)i += bt(t.subarray(u, u + 1)), u += 1; i += bt(t.subarray(u, u + 1)), u += 1, n = It(t, 12), a = It(t, 16), o = It(t, 20), l = It(t, 24), u = 28 } else if (e === 1) { n = It(t, u += 4); const h = It(t, u += 4); const d = It(t, u += 4); for (u += 4, s = Math.pow(2, 32) * h + d, E(s) || (s = Number.MAX_SAFE_INTEGER, w.warn('Presentation time exceeds safe integer limit and wrapped to max safe integer in parsing emsg box')), o = It(t, u), l = It(t, u += 4), u += 4; bt(t.subarray(u, u + 1)) !== '\0';)r += bt(t.subarray(u, u + 1)), u += 1; for (r += bt(t.subarray(u, u + 1)), u += 1; bt(t.subarray(u, u + 1)) !== '\0';)i += bt(t.subarray(u, u + 1)), u += 1; i += bt(t.subarray(u, u + 1)), u += 1 } return { schemeIdUri: r, value: i, timeScale: n, presentationTime: s, presentationTimeDelta: a, eventDuration: o, id: l, payload: t.subarray(u, t.byteLength) } }(t)); if (Qi.test(i.schemeIdUri)) { const n = y(i.presentationTime) ? i.presentationTime / i.timeScale : e + i.presentationTimeDelta / i.timeScale; let a = i.eventDuration === 4294967295 ? Number.POSITIVE_INFINITY : i.eventDuration / i.timeScale; a <= 0.001 && (a = Number.POSITIVE_INFINITY); const s = i.payload; r.samples.push({ data: s, len: s.byteLength, dts: n, pts: n, type: He, duration: a }) } }) } return r }, e.demuxSampleAes = function(t, e, r) { return Promise.reject(new Error('The MP4 demuxer does not support SAMPLE-AES decryption')) }, e.destroy = function() {}, t }()); const $i = function(t, e) { let r = 0; let i = 5; e += i; for (let n = new Uint32Array(1), a = new Uint32Array(1), s = new Uint8Array(1); i > 0;) { s[0] = t[e]; const o = Math.min(i, 8); const l = 8 - o; a[0] = 4278190080 >>> 24 + l << l, n[0] = (s[0] & a[0]) >> l, r = r ? r << o | n[0] : n[0], e += 1, i -= o } return r }; const Zi = (function(t) { function e(e) { let r; return (r = t.call(this) || this).observer = void 0, r.observer = e, r }l(e, t); const r = e.prototype; return r.resetInitSegment = function(e, r, i, n) { t.prototype.resetInitSegment.call(this, e, r, i, n), this._audioTrack = { container: 'audio/ac-3', type: 'audio', id: 2, pid: -1, sequenceNumber: 0, segmentCodec: 'ac3', samples: [], manifestCodec: r, duration: n, inputTimeScale: 9e4, dropped: 0 } }, r.canParse = function(t, e) { return e + 64 < t.length }, r.appendFrame = function(t, e, r) { const i = tn(t, e, r, this.basePTS, this.frameIndex); if (i !== -1) return { sample: t.samples[t.samples.length - 1], length: i, missing: 0 } }, e.probe = function(t) { if (!t) return !1; const e = lt(t, 0); if (!e) return !1; const r = e.length; return t[r] === 11 && t[r + 1] === 119 && void 0 !== dt(e) && $i(t, r) < 16 }, e }(wi)); function tn(t, e, r, i, n) { if (r + 8 > e.length) return -1; if (e[r] !== 11 || e[r + 1] !== 119) return -1; const a = e[r + 4] >> 6; if (a >= 3) return -1; const s = [48e3, 44100, 32e3][a]; const o = 63 & e[r + 4]; const l = 2 * [64, 69, 96, 64, 70, 96, 80, 87, 120, 80, 88, 120, 96, 104, 144, 96, 105, 144, 112, 121, 168, 112, 122, 168, 128, 139, 192, 128, 140, 192, 160, 174, 240, 160, 175, 240, 192, 208, 288, 192, 209, 288, 224, 243, 336, 224, 244, 336, 256, 278, 384, 256, 279, 384, 320, 348, 480, 320, 349, 480, 384, 417, 576, 384, 418, 576, 448, 487, 672, 448, 488, 672, 512, 557, 768, 512, 558, 768, 640, 696, 960, 640, 697, 960, 768, 835, 1152, 768, 836, 1152, 896, 975, 1344, 896, 976, 1344, 1024, 1114, 1536, 1024, 1115, 1536, 1152, 1253, 1728, 1152, 1254, 1728, 1280, 1393, 1920, 1280, 1394, 1920][3 * o + a]; if (r + l > e.length) return -1; const u = e[r + 6] >> 5; let h = 0; u === 2 ? h += 2 : (1 & u && u !== 1 && (h += 2), 4 & u && (h += 2)); const d = (e[r + 6] << 8 | e[r + 7]) >> 12 - h & 1; const c = [2, 1, 2, 3, 3, 4, 4, 5][u] + d; const f = e[r + 5] >> 3; const g = 7 & e[r + 5]; const v = new Uint8Array([a << 6 | f << 1 | g >> 2, (3 & g) << 6 | u << 3 | d << 2 | o >> 4, o << 4 & 224]); const m = i + n * (1536 / s * 9e4); const p = e.subarray(r, r + l); return t.config = v, t.channelCount = c, t.samplerate = s, t.samples.push({ unit: p, pts: m }), l } const en = (function() { function t() { this.VideoSample = null } const e = t.prototype; return e.createVideoSample = function(t, e, r, i) { return { key: t, frame: !1, pts: e, dts: r, units: [], debug: i, length: 0 } }, e.getLastNalUnit = function(t) { let e; let r; let i = this.VideoSample; if (i && i.units.length !== 0 || (i = t[t.length - 1]), (e = i) != null && e.units) { const n = i.units; r = n[n.length - 1] } return r }, e.pushAccessUnit = function(t, e) { if (t.units.length && t.frame) { if (void 0 === t.pts) { const r = e.samples; const i = r.length; if (!i) return void e.dropped++; const n = r[i - 1]; t.pts = n.pts, t.dts = n.dts }e.samples.push(t) }t.debug.length && w.log(t.pts + '/' + t.dts + ':' + t.debug) }, t }()); const rn = (function() { function t(t) { this.data = void 0, this.bytesAvailable = void 0, this.word = void 0, this.bitsAvailable = void 0, this.data = t, this.bytesAvailable = t.byteLength, this.word = 0, this.bitsAvailable = 0 } const e = t.prototype; return e.loadWord = function() { const t = this.data; const e = this.bytesAvailable; const r = t.byteLength - e; const i = new Uint8Array(4); const n = Math.min(4, e); if (n === 0) throw new Error('no bytes available'); i.set(t.subarray(r, r + n)), this.word = new DataView(i.buffer).getUint32(0), this.bitsAvailable = 8 * n, this.bytesAvailable -= n }, e.skipBits = function(t) { let e; t = Math.min(t, 8 * this.bytesAvailable + this.bitsAvailable), this.bitsAvailable > t ? (this.word <<= t, this.bitsAvailable -= t) : (t -= this.bitsAvailable, t -= (e = t >> 3) << 3, this.bytesAvailable -= e, this.loadWord(), this.word <<= t, this.bitsAvailable -= t) }, e.readBits = function(t) { let e = Math.min(this.bitsAvailable, t); const r = this.word >>> 32 - e; if (t > 32 && w.error('Cannot read more than 32 bits at a time'), this.bitsAvailable -= e, this.bitsAvailable > 0) this.word <<= e; else { if (!(this.bytesAvailable > 0)) throw new Error('no bits available'); this.loadWord() } return (e = t - e) > 0 && this.bitsAvailable ? r << e | this.readBits(e) : r }, e.skipLZ = function() { let t; for (t = 0; t < this.bitsAvailable; ++t) if ((this.word & 2147483648 >>> t) != 0) return this.word <<= t, this.bitsAvailable -= t, t; return this.loadWord(), t + this.skipLZ() }, e.skipUEG = function() { this.skipBits(1 + this.skipLZ()) }, e.skipEG = function() { this.skipBits(1 + this.skipLZ()) }, e.readUEG = function() { const t = this.skipLZ(); return this.readBits(t + 1) - 1 }, e.readEG = function() { const t = this.readUEG(); return 1 & t ? 1 + t >>> 1 : -1 * (t >>> 1) }, e.readBoolean = function() { return this.readBits(1) === 1 }, e.readUByte = function() { return this.readBits(8) }, e.readUShort = function() { return this.readBits(16) }, e.readUInt = function() { return this.readBits(32) }, e.skipScalingList = function(t) { for (let e = 8, r = 8, i = 0; i < t; i++)r !== 0 && (r = (e + this.readEG() + 256) % 256), e = r === 0 ? e : r }, e.readSPS = function() { let t; let e; let r; let i = 0; let n = 0; let a = 0; let s = 0; const o = this.readUByte.bind(this); const l = this.readBits.bind(this); const u = this.readUEG.bind(this); const h = this.readBoolean.bind(this); const d = this.skipBits.bind(this); const c = this.skipEG.bind(this); const f = this.skipUEG.bind(this); const g = this.skipScalingList.bind(this); o(); const v = o(); if (l(5), d(3), o(), f(), v === 100 || v === 110 || v === 122 || v === 244 || v === 44 || v === 83 || v === 86 || v === 118 || v === 128) { const m = u(); if (m === 3 && d(1), f(), f(), d(1), h()) for (e = m !== 3 ? 8 : 12, r = 0; r < e; r++)h() && g(r < 6 ? 16 : 64) }f(); const p = u(); if (p === 0)u(); else if (p === 1) for (d(1), c(), c(), t = u(), r = 0; r < t; r++)c(); f(), d(1); const y = u(); const E = u(); const T = l(1); T === 0 && d(1), d(1), h() && (i = u(), n = u(), a = u(), s = u()); let S = [1, 1]; if (h() && h()) switch (o()) { case 1:S = [1, 1]; break; case 2:S = [12, 11]; break; case 3:S = [10, 11]; break; case 4:S = [16, 11]; break; case 5:S = [40, 33]; break; case 6:S = [24, 11]; break; case 7:S = [20, 11]; break; case 8:S = [32, 11]; break; case 9:S = [80, 33]; break; case 10:S = [18, 11]; break; case 11:S = [15, 11]; break; case 12:S = [64, 33]; break; case 13:S = [160, 99]; break; case 14:S = [4, 3]; break; case 15:S = [3, 2]; break; case 16:S = [2, 1]; break; case 255:S = [o() << 8 | o(), o() << 8 | o()] } return { width: Math.ceil(16 * (y + 1) - 2 * i - 2 * n), height: (2 - T) * (E + 1) * 16 - (T ? 2 : 4) * (a + s), pixelRatio: S } }, e.readSliceType = function() { return this.readUByte(), this.readUEG(), this.readUEG() }, t }()); const nn = (function(t) { function e() { return t.apply(this, arguments) || this }l(e, t); const r = e.prototype; return r.parseAVCPES = function(t, e, r, i, n) { let a; const s = this; const o = this.parseAVCNALu(t, r.data); let l = this.VideoSample; let u = !1; r.data = null, l && o.length && !t.audFound && (this.pushAccessUnit(l, t), l = this.VideoSample = this.createVideoSample(!1, r.pts, r.dts, '')), o.forEach(function(i) { let o; switch (i.type) { case 1:var h = !1; a = !0; var d; var c = i.data; if (u && c.length > 4) { const f = new rn(c).readSliceType(); f !== 2 && f !== 4 && f !== 7 && f !== 9 || (h = !0) }h && (d = l) != null && d.frame && !l.key && (s.pushAccessUnit(l, t), l = s.VideoSample = null), l || (l = s.VideoSample = s.createVideoSample(!0, r.pts, r.dts, '')), l.frame = !0, l.key = h; break; case 5:a = !0, (o = l) != null && o.frame && !l.key && (s.pushAccessUnit(l, t), l = s.VideoSample = null), l || (l = s.VideoSample = s.createVideoSample(!0, r.pts, r.dts, '')), l.key = !0, l.frame = !0; break; case 6:a = !0, Yt(i.data, 1, r.pts, e.samples); break; case 7:var g, v; a = !0, u = !0; var m = i.data; var p = new rn(m).readSPS(); if (!t.sps || t.width !== p.width || t.height !== p.height || ((g = t.pixelRatio) == null ? void 0 : g[0]) !== p.pixelRatio[0] || ((v = t.pixelRatio) == null ? void 0 : v[1]) !== p.pixelRatio[1]) { t.width = p.width, t.height = p.height, t.pixelRatio = p.pixelRatio, t.sps = [m], t.duration = n; for (var y = m.subarray(1, 4), E = 'avc1.', T = 0; T < 3; T++) { let S = y[T].toString(16); S.length < 2 && (S = '0' + S), E += S }t.codec = E } break; case 8:a = !0, t.pps = [i.data]; break; case 9:a = !0, t.audFound = !0, l && s.pushAccessUnit(l, t), l = s.VideoSample = s.createVideoSample(!1, r.pts, r.dts, ''); break; case 12:a = !0; break; default:a = !1, l && (l.debug += 'unknown NAL ' + i.type + ' ') }l && a && l.units.push(i) }), i && l && (this.pushAccessUnit(l, t), this.VideoSample = null) }, r.parseAVCNALu = function(t, e) { let r; let i; const n = e.byteLength; let a = t.naluState || 0; const s = a; const o = []; let l = 0; let u = -1; let h = 0; for (a === -1 && (u = 0, h = 31 & e[0], a = 0, l = 1); l < n;) if (r = e[l++], a) if (a !== 1) if (r) if (r === 1) { if (i = l - a - 1, u >= 0) { const d = { data: e.subarray(u, i), type: h }; o.push(d) } else { const c = this.getLastNalUnit(t.samples); c && (s && l <= 4 - s && c.state && (c.data = c.data.subarray(0, c.data.byteLength - s)), i > 0 && (c.data = Kt(c.data, e.subarray(0, i)), c.state = 0)) }l < n ? (u = l, h = 31 & e[l], a = 0) : a = -1 } else a = 0; else a = 3; else a = r ? 0 : 2; else a = r ? 0 : 1; if (u >= 0 && a >= 0) { const f = { data: e.subarray(u, n), type: h, state: a }; o.push(f) } if (o.length === 0) { const g = this.getLastNalUnit(t.samples); g && (g.data = Kt(g.data, e)) } return t.naluState = a, o }, e }(en)); const an = (function() { function t(t, e, r) { this.keyData = void 0, this.decrypter = void 0, this.keyData = r, this.decrypter = new ci(e, { removePKCS7Padding: !1 }) } const e = t.prototype; return e.decryptBuffer = function(t) { return this.decrypter.decrypt(t, this.keyData.key.buffer, this.keyData.iv.buffer) }, e.decryptAacSample = function(t, e, r) { const i = this; const n = t[e].unit; if (!(n.length <= 16)) { const a = n.subarray(16, n.length - n.length % 16); const s = a.buffer.slice(a.byteOffset, a.byteOffset + a.length); this.decryptBuffer(s).then(function(a) { const s = new Uint8Array(a); n.set(s, 16), i.decrypter.isSync() || i.decryptAacSamples(t, e + 1, r) }) } }, e.decryptAacSamples = function(t, e, r) { for (;;e++) { if (e >= t.length) return void r(); if (!(t[e].unit.length < 32 || (this.decryptAacSample(t, e, r), this.decrypter.isSync()))) return } }, e.getAvcEncryptedData = function(t) { for (var e = 16 * Math.floor((t.length - 48) / 160) + 16, r = new Int8Array(e), i = 0, n = 32; n < t.length - 16; n += 160, i += 16)r.set(t.subarray(n, n + 16), i); return r }, e.getAvcDecryptedUnit = function(t, e) { for (let r = new Uint8Array(e), i = 0, n = 32; n < t.length - 16; n += 160, i += 16)t.set(r.subarray(i, i + 16), n); return t }, e.decryptAvcSample = function(t, e, r, i, n) { const a = this; const s = Wt(n.data); const o = this.getAvcEncryptedData(s); this.decryptBuffer(o.buffer).then(function(o) { n.data = a.getAvcDecryptedUnit(s, o), a.decrypter.isSync() || a.decryptAvcSamples(t, e, r + 1, i) }) }, e.decryptAvcSamples = function(t, e, r, i) { if (t instanceof Uint8Array) throw new Error('Cannot decrypt samples of type Uint8Array'); for (;;e++, r = 0) { if (e >= t.length) return void i(); for (let n = t[e].units; !(r >= n.length); r++) { const a = n[r]; if (!(a.data.length <= 48 || a.type !== 1 && a.type !== 5 || (this.decryptAvcSample(t, e, r, i, a), this.decrypter.isSync()))) return } } }, t }()); const sn = 188; const on = (function() { function t(t, e, r) { this.observer = void 0, this.config = void 0, this.typeSupported = void 0, this.sampleAes = null, this.pmtParsed = !1, this.audioCodec = void 0, this.videoCodec = void 0, this._duration = 0, this._pmtId = -1, this._videoTrack = void 0, this._audioTrack = void 0, this._id3Track = void 0, this._txtTrack = void 0, this.aacOverFlow = null, this.remainderData = null, this.videoParser = void 0, this.observer = t, this.config = e, this.typeSupported = r, this.videoParser = new nn() }t.probe = function(e) { const r = t.syncOffset(e); return r > 0 && w.warn('MPEG2-TS detected but first sync word found @ offset ' + r), r !== -1 }, t.syncOffset = function(t) { for (let e = t.length, r = Math.min(940, e - sn) + 1, i = 0; i < r;) { for (let n = !1, a = -1, s = 0, o = i; o < e; o += sn) { if (t[o] !== 71 || e - o !== sn && t[o + sn] !== 71) { if (s) return -1; break } if (s++, a === -1 && (a = o) !== 0 && (r = Math.min(a + 18612, t.length - sn) + 1), n || (n = ln(t, o) === 0), n && s > 1 && (a === 0 && s > 2 || o + sn > r)) return a }i++ } return -1 }, t.createTrack = function(t, e) { return { container: t === 'video' || t === 'audio' ? 'video/mp2t' : void 0, type: t, id: kt[t], pid: -1, inputTimeScale: 9e4, sequenceNumber: 0, samples: [], dropped: 0, duration: t === 'audio' ? e : void 0 } }; const e = t.prototype; return e.resetInitSegment = function(e, r, i, n) { this.pmtParsed = !1, this._pmtId = -1, this._videoTrack = t.createTrack('video'), this._audioTrack = t.createTrack('audio', n), this._id3Track = t.createTrack('id3'), this._txtTrack = t.createTrack('text'), this._audioTrack.segmentCodec = 'aac', this.aacOverFlow = null, this.remainderData = null, this.audioCodec = r, this.videoCodec = i, this._duration = n }, e.resetTimeStamp = function() {}, e.resetContiguity = function() { const t = this._audioTrack; const e = this._videoTrack; const r = this._id3Track; t && (t.pesData = null), e && (e.pesData = null), r && (r.pesData = null), this.aacOverFlow = null, this.remainderData = null }, e.demux = function(e, r, i, n) { let a; void 0 === i && (i = !1), void 0 === n && (n = !1), i || (this.sampleAes = null); const s = this._videoTrack; const o = this._audioTrack; const l = this._id3Track; const u = this._txtTrack; let h = s.pid; let d = s.pesData; let c = o.pid; let f = l.pid; let g = o.pesData; let v = l.pesData; let m = null; let p = this.pmtParsed; let y = this._pmtId; let E = e.length; if (this.remainderData && (E = (e = Kt(this.remainderData, e)).length, this.remainderData = null), E < sn && !n) return this.remainderData = e, { audioTrack: o, videoTrack: s, id3Track: l, textTrack: u }; const T = Math.max(0, t.syncOffset(e)); (E -= (E - T) % sn) < e.byteLength && !n && (this.remainderData = new Uint8Array(e.buffer, E, e.buffer.byteLength - E)); for (var R = 0, k = T; k < E; k += sn) if (e[k] === 71) { const b = !!(64 & e[k + 1]); const D = ln(e, k); let I = void 0; if ((48 & e[k + 3]) >> 4 > 1) { if ((I = k + 5 + e[k + 4]) === k + sn) continue } else I = k + 4; switch (D) { case h:b && (d && (a = cn(d)) && this.videoParser.parseAVCPES(s, u, a, !1, this._duration), d = { data: [], size: 0 }), d && (d.data.push(e.subarray(I, k + sn)), d.size += k + sn - I); break; case c:if (b) { if (g && (a = cn(g))) switch (o.segmentCodec) { case 'aac':this.parseAACPES(o, a); break; case 'mp3':this.parseMPEGPES(o, a); break; case 'ac3':this.parseAC3PES(o, a) }g = { data: [], size: 0 } }g && (g.data.push(e.subarray(I, k + sn)), g.size += k + sn - I); break; case f:b && (v && (a = cn(v)) && this.parseID3PES(l, a), v = { data: [], size: 0 }), v && (v.data.push(e.subarray(I, k + sn)), v.size += k + sn - I); break; case 0:b && (I += e[I] + 1), y = this._pmtId = un(e, I); break; case y:b && (I += e[I] + 1); var C = hn(e, I, this.typeSupported, i); (h = C.videoPid) > 0 && (s.pid = h, s.segmentCodec = C.segmentVideoCodec), (c = C.audioPid) > 0 && (o.pid = c, o.segmentCodec = C.segmentAudioCodec), (f = C.id3Pid) > 0 && (l.pid = f), m === null || p || (w.warn('MPEG-TS PMT found at ' + k + ' after unknown PID \'' + m + '\'. Backtracking to sync byte @' + T + ' to parse all TS packets.'), m = null, k = T - 188), p = this.pmtParsed = !0; break; case 17:case 8191:break; default:m = D } } else R++; if (R > 0) { const _ = new Error('Found ' + R + ' TS packet/s that do not start with 0x47'); this.observer.emit(S.ERROR, S.ERROR, { type: L.MEDIA_ERROR, details: A.FRAG_PARSING_ERROR, fatal: !1, error: _, reason: _.message }) }s.pesData = d, o.pesData = g, l.pesData = v; const x = { audioTrack: o, videoTrack: s, id3Track: l, textTrack: u }; return n && this.extractRemainingSamples(x), x }, e.flush = function() { let t; const e = this.remainderData; return this.remainderData = null, t = e ? this.demux(e, -1, !1, !0) : { videoTrack: this._videoTrack, audioTrack: this._audioTrack, id3Track: this._id3Track, textTrack: this._txtTrack }, this.extractRemainingSamples(t), this.sampleAes ? this.decrypt(t, this.sampleAes) : t }, e.extractRemainingSamples = function(t) { let e; const r = t.audioTrack; const i = t.videoTrack; const n = t.id3Track; const a = t.textTrack; const s = i.pesData; const o = r.pesData; const l = n.pesData; if (s && (e = cn(s)) ? (this.videoParser.parseAVCPES(i, a, e, !0, this._duration), i.pesData = null) : i.pesData = s, o && (e = cn(o))) { switch (r.segmentCodec) { case 'aac':this.parseAACPES(r, e); break; case 'mp3':this.parseMPEGPES(r, e); break; case 'ac3':this.parseAC3PES(r, e) }r.pesData = null } else o != null && o.size && w.log('last AAC PES packet truncated,might overlap between fragments'), r.pesData = o; l && (e = cn(l)) ? (this.parseID3PES(n, e), n.pesData = null) : n.pesData = l }, e.demuxSampleAes = function(t, e, r) { const i = this.demux(t, r, !0, !this.config.progressive); const n = this.sampleAes = new an(this.observer, this.config, e); return this.decrypt(i, n) }, e.decrypt = function(t, e) { return new Promise(function(r) { const i = t.audioTrack; const n = t.videoTrack; i.samples && i.segmentCodec === 'aac' ? e.decryptAacSamples(i.samples, 0, function() { n.samples ? e.decryptAvcSamples(n.samples, 0, 0, function() { r(t) }) : r(t) }) : n.samples && e.decryptAvcSamples(n.samples, 0, 0, function() { r(t) }) }) }, e.destroy = function() { this._duration = 0 }, e.parseAACPES = function(t, e) { let r; let i; let n; let a = 0; const s = this.aacOverFlow; let o = e.data; if (s) { this.aacOverFlow = null; const l = s.missing; const u = s.sample.unit.byteLength; if (l === -1)o = Kt(s.sample.unit, o); else { const h = u - l; s.sample.unit.set(o.subarray(0, l), h), t.samples.push(s.sample), a = s.missing } } for (r = a, i = o.length; r < i - 1 && !Fi(o, r); r++);if (r !== a) { let d; const c = r < i - 1; d = c ? 'AAC PES did not start with ADTS header,offset:' + r : 'No ADTS header found in AAC PES'; const f = new Error(d); if (w.warn('parsing error: ' + d), this.observer.emit(S.ERROR, S.ERROR, { type: L.MEDIA_ERROR, details: A.FRAG_PARSING_ERROR, fatal: !1, levelRetry: c, error: f, reason: d }), !c) return } if (Oi(t, this.observer, o, r, this.audioCodec), void 0 !== e.pts)n = e.pts; else { if (!s) return void w.warn('[tsdemuxer]: AAC PES unknown PTS'); const g = Ni(t.samplerate); n = s.sample.pts + g } for (var v, m = 0; r < i;) { if (r += (v = Ui(t, o, r, n, m)).length, v.missing) { this.aacOverFlow = v; break } for (m++; r < i - 1 && !Fi(o, r); r++); } }, e.parseMPEGPES = function(t, e) { const r = e.data; const i = r.length; let n = 0; let a = 0; const s = e.pts; if (void 0 !== s) for (;a < i;) if (qi(r, a)) { const o = Yi(t, r, a, s, n); if (!o) break; a += o.length, n++ } else a++; else w.warn('[tsdemuxer]: MPEG PES unknown PTS') }, e.parseAC3PES = function(t, e) { const r = e.data; const i = e.pts; if (void 0 !== i) for (var n, a = r.length, s = 0, o = 0; o < a && (n = tn(t, r, o, i, s++)) > 0;)o += n; else w.warn('[tsdemuxer]: AC3 PES unknown PTS') }, e.parseID3PES = function(t, e) { if (void 0 !== e.pts) { const r = o({}, e, { type: this._videoTrack ? He : Ge, duration: Number.POSITIVE_INFINITY }); t.samples.push(r) } else w.warn('[tsdemuxer]: ID3 PES unknown PTS') }, t }()); function ln(t, e) { return ((31 & t[e + 1]) << 8) + t[e + 2] } function un(t, e) { return (31 & t[e + 10]) << 8 | t[e + 11] } function hn(t, e, r, i) { const n = { audioPid: -1, videoPid: -1, id3Pid: -1, segmentVideoCodec: 'avc', segmentAudioCodec: 'aac' }; const a = e + 3 + ((15 & t[e + 1]) << 8 | t[e + 2]) - 4; for (e += 12 + ((15 & t[e + 10]) << 8 | t[e + 11]); e < a;) { const s = ln(t, e); const o = (15 & t[e + 3]) << 8 | t[e + 4]; switch (t[e]) { case 207:if (!i) { dn('ADTS AAC'); break } case 15:n.audioPid === -1 && (n.audioPid = s); break; case 21:n.id3Pid === -1 && (n.id3Pid = s); break; case 219:if (!i) { dn('H.264'); break } case 27:n.videoPid === -1 && (n.videoPid = s, n.segmentVideoCodec = 'avc'); break; case 3:case 4:r.mpeg || r.mp3 ? n.audioPid === -1 && (n.audioPid = s, n.segmentAudioCodec = 'mp3') : w.log('MPEG audio found, not supported in this browser'); break; case 193:if (!i) { dn('AC-3'); break } case 129:r.ac3 ? n.audioPid === -1 && (n.audioPid = s, n.segmentAudioCodec = 'ac3') : w.log('AC-3 audio found, not supported in this browser'); break; case 6:if (n.audioPid === -1 && o > 0) for (let l = e + 5, u = o; u > 2;) { t[l] === 106 && (!0 !== r.ac3 ? w.log('AC-3 audio found, not supported in this browser for now') : (n.audioPid = s, n.segmentAudioCodec = 'ac3')); const h = t[l + 1] + 2; l += h, u -= h } break; case 194:case 135:throw new Error('Unsupported EC-3 in M2TS found'); case 36:throw new Error('Unsupported HEVC in M2TS found') }e += o + 5 } return n } function dn(t) { w.log(t + ' with AES-128-CBC encryption found in unencrypted stream') } function cn(t) { let e; let r; let i; let n; let a; let s = 0; const o = t.data; if (!t || t.size === 0) return null; for (;o[0].length < 19 && o.length > 1;)o[0] = Kt(o[0], o[1]), o.splice(1, 1); if (((e = o[0])[0] << 16) + (e[1] << 8) + e[2] === 1) { if ((r = (e[4] << 8) + e[5]) && r > t.size - 6) return null; const l = e[7]; 192 & l && (n = 536870912 * (14 & e[9]) + 4194304 * (255 & e[10]) + 16384 * (254 & e[11]) + 128 * (255 & e[12]) + (254 & e[13]) / 2, 64 & l ? n - (a = 536870912 * (14 & e[14]) + 4194304 * (255 & e[15]) + 16384 * (254 & e[16]) + 128 * (255 & e[17]) + (254 & e[18]) / 2) > 54e5 && (w.warn(Math.round((n - a) / 9e4) + 's delta between PTS and DTS, align them'), n = a) : a = n); let u = (i = e[8]) + 9; if (t.size <= u) return null; t.size -= u; for (var h = new Uint8Array(t.size), d = 0, c = o.length; d < c; d++) { let f = (e = o[d]).byteLength; if (u) { if (u > f) { u -= f; continue }e = e.subarray(u), f -= u, u = 0 }h.set(e, s), s += f } return r && (r -= i + 3), { data: h, pts: n, dts: a, len: r } } return null } const fn = (function(t) { function e() { return t.apply(this, arguments) || this }l(e, t); const r = e.prototype; return r.resetInitSegment = function(e, r, i, n) { t.prototype.resetInitSegment.call(this, e, r, i, n), this._audioTrack = { container: 'audio/mpeg', type: 'audio', id: 2, pid: -1, sequenceNumber: 0, segmentCodec: 'mp3', samples: [], manifestCodec: r, duration: n, inputTimeScale: 9e4, dropped: 0 } }, e.probe = function(t) { if (!t) return !1; const e = lt(t, 0); let r = (e == null ? void 0 : e.length) || 0; if (e && t[r] === 11 && t[r + 1] === 119 && void 0 !== dt(e) && $i(t, r) <= 16) return !1; for (let i = t.length; r < i; r++) if (Xi(t, r)) return w.log('MPEG Audio sync word found !'), !0; return !1 }, r.canParse = function(t, e) { return (function(t, e) { return ji(t, e) && t.length - e >= 4 }(t, e)) }, r.appendFrame = function(t, e, r) { if (this.basePTS !== null) return Yi(t, e, r, this.basePTS, this.frameIndex) }, e }(wi)); const gn = (function() { function t() {} return t.getSilentFrame = function(t, e) { if (t === 'mp4a.40.2') { if (e === 1) return new Uint8Array([0, 200, 0, 128, 35, 128]); if (e === 2) return new Uint8Array([33, 0, 73, 144, 2, 25, 0, 35, 128]); if (e === 3) return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 142]); if (e === 4) return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 128, 44, 128, 8, 2, 56]); if (e === 5) return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 130, 48, 4, 153, 0, 33, 144, 2, 56]); if (e === 6) return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 130, 48, 4, 153, 0, 33, 144, 2, 0, 178, 0, 32, 8, 224]) } else { if (e === 1) return new Uint8Array([1, 64, 34, 128, 163, 78, 230, 128, 186, 8, 0, 0, 0, 28, 6, 241, 193, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94]); if (e === 2) return new Uint8Array([1, 64, 34, 128, 163, 94, 230, 128, 186, 8, 0, 0, 0, 0, 149, 0, 6, 241, 161, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94]); if (e === 3) return new Uint8Array([1, 64, 34, 128, 163, 94, 230, 128, 186, 8, 0, 0, 0, 0, 149, 0, 6, 241, 161, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94]) } }, t }()); const vn = Math.pow(2, 32) - 1; const mn = (function() { function t() {} return t.init = function() { let e; for (e in t.types = { avc1: [], avcC: [], btrt: [], dinf: [], dref: [], esds: [], ftyp: [], hdlr: [], mdat: [], mdhd: [], mdia: [], mfhd: [], minf: [], moof: [], moov: [], mp4a: [], '.mp3': [], dac3: [], 'ac-3': [], mvex: [], mvhd: [], pasp: [], sdtp: [], stbl: [], stco: [], stsc: [], stsd: [], stsz: [], stts: [], tfdt: [], tfhd: [], traf: [], trak: [], trun: [], trex: [], tkhd: [], vmhd: [], smhd: [] }, t.types)t.types.hasOwnProperty(e) && (t.types[e] = [e.charCodeAt(0), e.charCodeAt(1), e.charCodeAt(2), e.charCodeAt(3)]); const r = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 118, 105, 100, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 105, 100, 101, 111, 72, 97, 110, 100, 108, 101, 114, 0]); const i = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 115, 111, 117, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 111, 117, 110, 100, 72, 97, 110, 100, 108, 101, 114, 0]); t.HDLR_TYPES = { video: r, audio: i }; const n = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 12, 117, 114, 108, 32, 0, 0, 0, 1]); const a = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]); t.STTS = t.STSC = t.STCO = a, t.STSZ = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), t.VMHD = new Uint8Array([0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]), t.SMHD = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]), t.STSD = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1]); const s = new Uint8Array([105, 115, 111, 109]); const o = new Uint8Array([97, 118, 99, 49]); const l = new Uint8Array([0, 0, 0, 1]); t.FTYP = t.box(t.types.ftyp, s, l, s, o), t.DINF = t.box(t.types.dinf, t.box(t.types.dref, n)) }, t.box = function(t) { for (var e = 8, r = arguments.length, i = new Array(r > 1 ? r - 1 : 0), n = 1; n < r; n++)i[n - 1] = arguments[n]; for (var a = i.length, s = a; a--;)e += i[a].byteLength; const o = new Uint8Array(e); for (o[0] = e >> 24 & 255, o[1] = e >> 16 & 255, o[2] = e >> 8 & 255, o[3] = 255 & e, o.set(t, 4), a = 0, e = 8; a < s; a++)o.set(i[a], e), e += i[a].byteLength; return o }, t.hdlr = function(e) { return t.box(t.types.hdlr, t.HDLR_TYPES[e]) }, t.mdat = function(e) { return t.box(t.types.mdat, e) }, t.mdhd = function(e, r) { r *= e; const i = Math.floor(r / (vn + 1)); const n = Math.floor(r % (vn + 1)); return t.box(t.types.mdhd, new Uint8Array([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, e >> 24 & 255, e >> 16 & 255, e >> 8 & 255, 255 & e, i >> 24, i >> 16 & 255, i >> 8 & 255, 255 & i, n >> 24, n >> 16 & 255, n >> 8 & 255, 255 & n, 85, 196, 0, 0])) }, t.mdia = function(e) { return t.box(t.types.mdia, t.mdhd(e.timescale, e.duration), t.hdlr(e.type), t.minf(e)) }, t.mfhd = function(e) { return t.box(t.types.mfhd, new Uint8Array([0, 0, 0, 0, e >> 24, e >> 16 & 255, e >> 8 & 255, 255 & e])) }, t.minf = function(e) { return e.type === 'audio' ? t.box(t.types.minf, t.box(t.types.smhd, t.SMHD), t.DINF, t.stbl(e)) : t.box(t.types.minf, t.box(t.types.vmhd, t.VMHD), t.DINF, t.stbl(e)) }, t.moof = function(e, r, i) { return t.box(t.types.moof, t.mfhd(e), t.traf(i, r)) }, t.moov = function(e) { for (var r = e.length, i = []; r--;)i[r] = t.trak(e[r]); return t.box.apply(null, [t.types.moov, t.mvhd(e[0].timescale, e[0].duration)].concat(i).concat(t.mvex(e))) }, t.mvex = function(e) { for (var r = e.length, i = []; r--;)i[r] = t.trex(e[r]); return t.box.apply(null, [t.types.mvex].concat(i)) }, t.mvhd = function(e, r) { r *= e; const i = Math.floor(r / (vn + 1)); const n = Math.floor(r % (vn + 1)); const a = new Uint8Array([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, e >> 24 & 255, e >> 16 & 255, e >> 8 & 255, 255 & e, i >> 24, i >> 16 & 255, i >> 8 & 255, 255 & i, n >> 24, n >> 16 & 255, n >> 8 & 255, 255 & n, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255]); return t.box(t.types.mvhd, a) }, t.sdtp = function(e) { let r; let i; const n = e.samples || []; const a = new Uint8Array(4 + n.length); for (r = 0; r < n.length; r++)i = n[r].flags, a[r + 4] = i.dependsOn << 4 | i.isDependedOn << 2 | i.hasRedundancy; return t.box(t.types.sdtp, a) }, t.stbl = function(e) { return t.box(t.types.stbl, t.stsd(e), t.box(t.types.stts, t.STTS), t.box(t.types.stsc, t.STSC), t.box(t.types.stsz, t.STSZ), t.box(t.types.stco, t.STCO)) }, t.avc1 = function(e) { let r; let i; let n; let a = []; let s = []; for (r = 0; r < e.sps.length; r++)n = (i = e.sps[r]).byteLength, a.push(n >>> 8 & 255), a.push(255 & n), a = a.concat(Array.prototype.slice.call(i)); for (r = 0; r < e.pps.length; r++)n = (i = e.pps[r]).byteLength, s.push(n >>> 8 & 255), s.push(255 & n), s = s.concat(Array.prototype.slice.call(i)); const o = t.box(t.types.avcC, new Uint8Array([1, a[3], a[4], a[5], 255, 224 | e.sps.length].concat(a).concat([e.pps.length]).concat(s))); const l = e.width; const u = e.height; const h = e.pixelRatio[0]; const d = e.pixelRatio[1]; return t.box(t.types.avc1, new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, l >> 8 & 255, 255 & l, u >> 8 & 255, 255 & u, 0, 72, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 1, 18, 100, 97, 105, 108, 121, 109, 111, 116, 105, 111, 110, 47, 104, 108, 115, 46, 106, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 17, 17]), o, t.box(t.types.btrt, new Uint8Array([0, 28, 156, 128, 0, 45, 198, 192, 0, 45, 198, 192])), t.box(t.types.pasp, new Uint8Array([h >> 24, h >> 16 & 255, h >> 8 & 255, 255 & h, d >> 24, d >> 16 & 255, d >> 8 & 255, 255 & d]))) }, t.esds = function(t) { const e = t.config.length; return new Uint8Array([0, 0, 0, 0, 3, 23 + e, 0, 1, 0, 4, 15 + e, 64, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5].concat([e]).concat(t.config).concat([6, 1, 2])) }, t.audioStsd = function(t) { const e = t.samplerate; return new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t.channelCount, 0, 16, 0, 0, 0, 0, e >> 8 & 255, 255 & e, 0, 0]) }, t.mp4a = function(e) { return t.box(t.types.mp4a, t.audioStsd(e), t.box(t.types.esds, t.esds(e))) }, t.mp3 = function(e) { return t.box(t.types['.mp3'], t.audioStsd(e)) }, t.ac3 = function(e) { return t.box(t.types['ac-3'], t.audioStsd(e), t.box(t.types.dac3, e.config)) }, t.stsd = function(e) { return e.type === 'audio' ? e.segmentCodec === 'mp3' && e.codec === 'mp3' ? t.box(t.types.stsd, t.STSD, t.mp3(e)) : e.segmentCodec === 'ac3' ? t.box(t.types.stsd, t.STSD, t.ac3(e)) : t.box(t.types.stsd, t.STSD, t.mp4a(e)) : t.box(t.types.stsd, t.STSD, t.avc1(e)) }, t.tkhd = function(e) { const r = e.id; const i = e.duration * e.timescale; const n = e.width; const a = e.height; const s = Math.floor(i / (vn + 1)); const o = Math.floor(i % (vn + 1)); return t.box(t.types.tkhd, new Uint8Array([1, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, r >> 24 & 255, r >> 16 & 255, r >> 8 & 255, 255 & r, 0, 0, 0, 0, s >> 24, s >> 16 & 255, s >> 8 & 255, 255 & s, o >> 24, o >> 16 & 255, o >> 8 & 255, 255 & o, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, n >> 8 & 255, 255 & n, 0, 0, a >> 8 & 255, 255 & a, 0, 0])) }, t.traf = function(e, r) { const i = t.sdtp(e); const n = e.id; const a = Math.floor(r / (vn + 1)); const s = Math.floor(r % (vn + 1)); return t.box(t.types.traf, t.box(t.types.tfhd, new Uint8Array([0, 0, 0, 0, n >> 24, n >> 16 & 255, n >> 8 & 255, 255 & n])), t.box(t.types.tfdt, new Uint8Array([1, 0, 0, 0, a >> 24, a >> 16 & 255, a >> 8 & 255, 255 & a, s >> 24, s >> 16 & 255, s >> 8 & 255, 255 & s])), t.trun(e, i.length + 16 + 20 + 8 + 16 + 8 + 8), i) }, t.trak = function(e) { return e.duration = e.duration || 4294967295, t.box(t.types.trak, t.tkhd(e), t.mdia(e)) }, t.trex = function(e) { const r = e.id; return t.box(t.types.trex, new Uint8Array([0, 0, 0, 0, r >> 24, r >> 16 & 255, r >> 8 & 255, 255 & r, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1])) }, t.trun = function(e, r) { let i; let n; let a; let s; let o; let l; const u = e.samples || []; const h = u.length; const d = 12 + 16 * h; const c = new Uint8Array(d); for (r += 8 + d, c.set([e.type === 'video' ? 1 : 0, 0, 15, 1, h >>> 24 & 255, h >>> 16 & 255, h >>> 8 & 255, 255 & h, r >>> 24 & 255, r >>> 16 & 255, r >>> 8 & 255, 255 & r], 0), i = 0; i < h; i++)a = (n = u[i]).duration, s = n.size, o = n.flags, l = n.cts, c.set([a >>> 24 & 255, a >>> 16 & 255, a >>> 8 & 255, 255 & a, s >>> 24 & 255, s >>> 16 & 255, s >>> 8 & 255, 255 & s, o.isLeading << 2 | o.dependsOn, o.isDependedOn << 6 | o.hasRedundancy << 4 | o.paddingValue << 1 | o.isNonSync, 61440 & o.degradPrio, 15 & o.degradPrio, l >>> 24 & 255, l >>> 16 & 255, l >>> 8 & 255, 255 & l], 12 + 16 * i); return t.box(t.types.trun, c) }, t.initSegment = function(e) { t.types || t.init(); const r = t.moov(e); return Kt(t.FTYP, r) }, t }()); mn.types = void 0, mn.HDLR_TYPES = void 0, mn.STTS = void 0, mn.STSC = void 0, mn.STCO = void 0, mn.STSZ = void 0, mn.VMHD = void 0, mn.SMHD = void 0, mn.STSD = void 0, mn.FTYP = void 0, mn.DINF = void 0; const pn = 9e4; function yn(t, e, r, i) { void 0 === r && (r = 1), void 0 === i && (i = !1); const n = t * e * r; return i ? Math.round(n) : n } function En(t, e) { return void 0 === e && (e = !1), yn(t, 1e3, 1 / pn, e) } let Tn = null; let Sn = null; const Ln = (function() { function t(t, e, r, i) { if (this.observer = void 0, this.config = void 0, this.typeSupported = void 0, this.ISGenerated = !1, this._initPTS = null, this._initDTS = null, this.nextAvcDts = null, this.nextAudioPts = null, this.videoSampleDuration = null, this.isAudioContiguous = !1, this.isVideoContiguous = !1, this.videoTrackConfig = void 0, this.observer = t, this.config = e, this.typeSupported = r, this.ISGenerated = !1, Tn === null) { const n = (navigator.userAgent || '').match(/Chrome\/(\d+)/i); Tn = n ? parseInt(n[1]) : 0 } if (Sn === null) { const a = navigator.userAgent.match(/Safari\/(\d+)/i); Sn = a ? parseInt(a[1]) : 0 } } const e = t.prototype; return e.destroy = function() { this.config = this.videoTrackConfig = this._initPTS = this._initDTS = null }, e.resetTimeStamp = function(t) { w.log('[mp4-remuxer]: initPTS & initDTS reset'), this._initPTS = this._initDTS = t }, e.resetNextTimestamp = function() { w.log('[mp4-remuxer]: reset next timestamp'), this.isVideoContiguous = !1, this.isAudioContiguous = !1 }, e.resetInitSegment = function() { w.log('[mp4-remuxer]: ISGenerated flag reset'), this.ISGenerated = !1, this.videoTrackConfig = void 0 }, e.getVideoStartPts = function(t) { let e = !1; const r = t.reduce(function(t, r) { const i = r.pts - t; return i < -4294967296 ? (e = !0, An(t, r.pts)) : i > 0 ? t : r.pts }, t[0].pts); return e && w.debug('PTS rollover detected'), r }, e.remux = function(t, e, r, i, n, a, s, o) { let l; let u; let h; let d; let c; let f; let g = n; let v = n; const m = t.pid > -1; const p = e.pid > -1; const y = e.samples.length; const E = t.samples.length > 0; const T = s && y > 0 || y > 1; if ((!m || E) && (!p || T) || this.ISGenerated || s) { if (this.ISGenerated) { let S; let L; let A; let R; const k = this.videoTrackConfig; !k || e.width === k.width && e.height === k.height && ((S = e.pixelRatio) == null ? void 0 : S[0]) === ((L = k.pixelRatio) == null ? void 0 : L[0]) && ((A = e.pixelRatio) == null ? void 0 : A[1]) === ((R = k.pixelRatio) == null ? void 0 : R[1]) || this.resetInitSegment() } else h = this.generateIS(t, e, n, a); let b; const D = this.isVideoContiguous; let I = -1; if (T && (I = (function(t) { for (let e = 0; e < t.length; e++) if (t[e].key) return e; return -1 }(e.samples)), !D && this.config.forceKeyFrameOnDiscontinuity)) if (f = !0, I > 0) { w.warn('[mp4-remuxer]: Dropped ' + I + ' out of ' + y + ' video samples due to a missing keyframe'); const C = this.getVideoStartPts(e.samples); e.samples = e.samples.slice(I), e.dropped += I, b = v += (e.samples[0].pts - C) / e.inputTimeScale } else I === -1 && (w.warn('[mp4-remuxer]: No keyframe found out of ' + y + ' video samples'), f = !1); if (this.ISGenerated) { if (E && T) { const _ = this.getVideoStartPts(e.samples); const x = (An(t.samples[0].pts, _) - _) / e.inputTimeScale; g += Math.max(0, x), v += Math.max(0, -x) } if (E) { if (t.samplerate || (w.warn('[mp4-remuxer]: regenerate InitSegment as audio detected'), h = this.generateIS(t, e, n, a)), u = this.remuxAudio(t, g, this.isAudioContiguous, a, p || T || o === Ce ? v : void 0), T) { const P = u ? u.endPTS - u.startPTS : 0; e.inputTimeScale || (w.warn('[mp4-remuxer]: regenerate InitSegment as video detected'), h = this.generateIS(t, e, n, a)), l = this.remuxVideo(e, v, D, P) } } else T && (l = this.remuxVideo(e, v, D, 0)); l && (l.firstKeyFrame = I, l.independent = I !== -1, l.firstKeyFramePTS = b) } } return this.ISGenerated && this._initPTS && this._initDTS && (r.samples.length && (c = Rn(r, n, this._initPTS, this._initDTS)), i.samples.length && (d = kn(i, n, this._initPTS))), { audio: u, video: l, initSegment: h, independent: f, text: d, id3: c } }, e.generateIS = function(t, e, r, i) { let n; let a; let s; const o = t.samples; const l = e.samples; const u = this.typeSupported; const h = {}; const d = this._initPTS; let c = !d || i; let f = 'audio/mp4'; if (c && (n = a = 1 / 0), t.config && o.length) { switch (t.timescale = t.samplerate, t.segmentCodec) { case 'mp3':u.mpeg ? (f = 'audio/mpeg', t.codec = '') : u.mp3 && (t.codec = 'mp3'); break; case 'ac3':t.codec = 'ac-3' }h.audio = { id: 'audio', container: f, codec: t.codec, initSegment: t.segmentCodec === 'mp3' && u.mpeg ? new Uint8Array(0) : mn.initSegment([t]), metadata: { channelCount: t.channelCount } }, c && (s = t.inputTimeScale, d && s === d.timescale ? c = !1 : n = a = o[0].pts - Math.round(s * r)) } if (e.sps && e.pps && l.length) { if (e.timescale = e.inputTimeScale, h.video = { id: 'main', container: 'video/mp4', codec: e.codec, initSegment: mn.initSegment([e]), metadata: { width: e.width, height: e.height } }, c) if (s = e.inputTimeScale, d && s === d.timescale)c = !1; else { const g = this.getVideoStartPts(l); const v = Math.round(s * r); a = Math.min(a, An(l[0].dts, g) - v), n = Math.min(n, g - v) } this.videoTrackConfig = { width: e.width, height: e.height, pixelRatio: e.pixelRatio } } if (Object.keys(h).length) return this.ISGenerated = !0, c ? (this._initPTS = { baseTime: n, timescale: s }, this._initDTS = { baseTime: a, timescale: s }) : n = s = void 0, { tracks: h, initPTS: n, timescale: s } }, e.remuxVideo = function(t, e, r, i) { let n; let a; const s = t.inputTimeScale; const l = t.samples; const u = []; const h = l.length; const d = this._initPTS; let c = this.nextAvcDts; let f = 8; let g = this.videoSampleDuration; let v = Number.POSITIVE_INFINITY; let m = Number.NEGATIVE_INFINITY; let p = !1; if (!r || c === null) { const y = e * s; const E = l[0].pts - An(l[0].dts, l[0].pts); Tn && c !== null && Math.abs(y - E - c) < 15e3 ? r = !0 : c = y - E } for (let T = d.baseTime * s / d.timescale, R = 0; R < h; R++) { const k = l[R]; k.pts = An(k.pts - T, c), k.dts = An(k.dts - T, c), k.dts < l[R > 0 ? R - 1 : R].dts && (p = !0) }p && l.sort(function(t, e) { const r = t.dts - e.dts; const i = t.pts - e.pts; return r || i }), n = l[0].dts; const b = (a = l[l.length - 1].dts) - n; const D = b ? Math.round(b / (h - 1)) : g || t.inputTimeScale / 30; if (r) { const I = n - c; const C = I > D; const _ = I < -1; if ((C || _) && (C ? w.warn('AVC: ' + En(I, !0) + ' ms (' + I + 'dts) hole between fragments detected at ' + e.toFixed(3)) : w.warn('AVC: ' + En(-I, !0) + ' ms (' + I + 'dts) overlapping between fragments detected at ' + e.toFixed(3)), !_ || c >= l[0].pts || Tn)) { n = c; const x = l[0].pts - I; if (C)l[0].dts = n, l[0].pts = x; else for (let P = 0; P < l.length && !(l[P].dts > x); P++)l[P].dts -= I, l[P].pts -= I; w.log('Video: Initial PTS/DTS adjusted: ' + En(x, !0) + '/' + En(n, !0) + ', delta: ' + En(I, !0) + ' ms') } } for (var F = 0, M = 0, O = n = Math.max(0, n), N = 0; N < h; N++) { for (var U = l[N], B = U.units, G = B.length, K = 0, H = 0; H < G; H++)K += B[H].data.length; M += K, F += G, U.length = K, U.dts < O ? (U.dts = O, O += D / 4 | 0 || 1) : O = U.dts, v = Math.min(U.pts, v), m = Math.max(U.pts, m) }a = l[h - 1].dts; let V; const Y = M + 4 * F + 8; try { V = new Uint8Array(Y) } catch (t) { return void this.observer.emit(S.ERROR, S.ERROR, { type: L.MUX_ERROR, details: A.REMUX_ALLOC_ERROR, fatal: !1, error: t, bytes: Y, reason: 'fail allocating video mdat ' + Y }) } const W = new DataView(V.buffer); W.setUint32(0, Y), V.set(mn.types.mdat, 4); for (var j = !1, q = Number.POSITIVE_INFINITY, X = Number.POSITIVE_INFINITY, z = Number.NEGATIVE_INFINITY, Q = Number.NEGATIVE_INFINITY, J = 0; J < h; J++) { for (var $ = l[J], Z = $.units, tt = 0, et = 0, rt = Z.length; et < rt; et++) { const it = Z[et]; const nt = it.data; const at = it.data.byteLength; W.setUint32(f, at), f += 4, V.set(nt, f), f += at, tt += 4 + at } let st = void 0; if (J < h - 1)g = l[J + 1].dts - $.dts, st = l[J + 1].pts - $.pts; else { const ot = this.config; const lt = J > 0 ? $.dts - l[J - 1].dts : D; if (st = J > 0 ? $.pts - l[J - 1].pts : D, ot.stretchShortVideoTrack && this.nextAudioPts !== null) { const ut = Math.floor(ot.maxBufferHole * s); const ht = (i ? v + i * s : this.nextAudioPts) - $.pts; ht > ut ? ((g = ht - lt) < 0 ? g = lt : j = !0, w.log('[mp4-remuxer]: It is approximately ' + ht / 90 + ' ms to the next segment; using duration ' + g / 90 + ' ms for the last video frame.')) : g = lt } else g = lt } const dt = Math.round($.pts - $.dts); q = Math.min(q, g), z = Math.max(z, g), X = Math.min(X, st), Q = Math.max(Q, st), u.push(new Dn($.key, g, tt, dt)) } if (u.length) if (Tn) { if (Tn < 70) { const ct = u[0].flags; ct.dependsOn = 2, ct.isNonSync = 0 } } else if (Sn && Q - X < z - q && D / z < 0.025 && u[0].cts === 0) { w.warn('Found irregular gaps in sample duration. Using PTS instead of DTS to determine MP4 sample duration.'); for (let ft = n, gt = 0, vt = u.length; gt < vt; gt++) { const mt = ft + u[gt].duration; const pt = ft + u[gt].cts; if (gt < vt - 1) { const yt = mt + u[gt + 1].cts; u[gt].duration = yt - pt } else u[gt].duration = gt ? u[gt - 1].duration : D; u[gt].cts = 0, ft = mt } }g = j || !g ? D : g, this.nextAvcDts = c = a + g, this.videoSampleDuration = g, this.isVideoContiguous = !0; const Et = { data1: mn.moof(t.sequenceNumber++, n, o({}, t, { samples: u })), data2: V, startPTS: v / s, endPTS: (m + g) / s, startDTS: n / s, endDTS: c / s, type: 'video', hasAudio: !1, hasVideo: !0, nb: u.length, dropped: t.dropped }; return t.samples = [], t.dropped = 0, Et }, e.getSamplesPerFrame = function(t) { switch (t.segmentCodec) { case 'mp3':return 1152; case 'ac3':return 1536; default:return 1024 } }, e.remuxAudio = function(t, e, r, i, n) { const a = t.inputTimeScale; const s = a / (t.samplerate ? t.samplerate : a); const l = this.getSamplesPerFrame(t); const u = l * s; const h = this._initPTS; const d = t.segmentCodec === 'mp3' && this.typeSupported.mpeg; const c = []; const f = void 0 !== n; let g = t.samples; let v = d ? 0 : 8; let m = this.nextAudioPts || -1; const p = e * a; const y = h.baseTime * a / h.timescale; if (this.isAudioContiguous = r = r || g.length && m > 0 && (i && Math.abs(p - m) < 9e3 || Math.abs(An(g[0].pts - y, p) - m) < 20 * u), g.forEach(function(t) { t.pts = An(t.pts - y, p) }), !r || m < 0) { if (g = g.filter(function(t) { return t.pts >= 0 }), !g.length) return; m = n === 0 ? 0 : i && !f ? Math.max(0, p) : g[0].pts } if (t.segmentCodec === 'aac') for (let E = this.config.maxAudioFramesDrift, T = 0, R = m; T < g.length; T++) { const k = g[T]; const b = k.pts; const D = b - R; const I = Math.abs(1e3 * D / a); if (D <= -E * u && f)T === 0 && (w.warn('Audio frame @ ' + (b / a).toFixed(3) + 's overlaps nextAudioPts by ' + Math.round(1e3 * D / a) + ' ms.'), this.nextAudioPts = m = R = b); else if (D >= E * u && I < 1e4 && f) { let C = Math.round(D / u); (R = b - C * u) < 0 && (C--, R += u), T === 0 && (this.nextAudioPts = m = R), w.warn('[mp4-remuxer]: Injecting ' + C + ' audio frame @ ' + (R / a).toFixed(3) + 's due to ' + Math.round(1e3 * D / a) + ' ms gap.'); for (let _ = 0; _ < C; _++) { const x = Math.max(R, 0); let P = gn.getSilentFrame(t.manifestCodec || t.codec, t.channelCount); P || (w.log('[mp4-remuxer]: Unable to get silent frame for given audio codec; duplicating last frame instead.'), P = k.unit.subarray()), g.splice(T, 0, { unit: P, pts: x }), R += u, T++ } }k.pts = R, R += u } for (var F, M = null, O = null, N = 0, U = g.length; U--;)N += g[U].unit.byteLength; for (let B = 0, G = g.length; B < G; B++) { const K = g[B]; const H = K.unit; let V = K.pts; if (O !== null)c[B - 1].duration = Math.round((V - O) / s); else { if (r && t.segmentCodec === 'aac' && (V = m), M = V, !(N > 0)) return; N += v; try { F = new Uint8Array(N) } catch (t) { return void this.observer.emit(S.ERROR, S.ERROR, { type: L.MUX_ERROR, details: A.REMUX_ALLOC_ERROR, fatal: !1, error: t, bytes: N, reason: 'fail allocating audio mdat ' + N }) }d || (new DataView(F.buffer).setUint32(0, N), F.set(mn.types.mdat, 4)) }F.set(H, v); const Y = H.byteLength; v += Y, c.push(new Dn(!0, l, Y, 0)), O = V } const W = c.length; if (W) { const j = c[c.length - 1]; this.nextAudioPts = m = O + s * j.duration; const q = d ? new Uint8Array(0) : mn.moof(t.sequenceNumber++, M / s, o({}, t, { samples: c })); t.samples = []; const X = M / a; const z = m / a; const Q = { data1: q, data2: F, startPTS: X, endPTS: z, startDTS: X, endDTS: z, type: 'audio', hasAudio: !0, hasVideo: !1, nb: W }; return this.isAudioContiguous = !0, Q } }, e.remuxEmptyAudio = function(t, e, r, i) { const n = t.inputTimeScale; const a = n / (t.samplerate ? t.samplerate : n); const s = this.nextAudioPts; const o = this._initDTS; const l = 9e4 * o.baseTime / o.timescale; const u = (s !== null ? s : i.startDTS * n) + l; const h = i.endDTS * n + l; const d = 1024 * a; const c = Math.ceil((h - u) / d); const f = gn.getSilentFrame(t.manifestCodec || t.codec, t.channelCount); if (w.warn('[mp4-remuxer]: remux empty Audio'), f) { for (var g = [], v = 0; v < c; v++) { const m = u + v * d; g.push({ unit: f, pts: m, dts: m }) } return t.samples = g, this.remuxAudio(t, e, r, !1) }w.trace('[mp4-remuxer]: Unable to remuxEmptyAudio since we were unable to get a silent frame for given audio codec') }, t }()); function An(t, e) { let r; if (e === null) return t; for (r = e < t ? -8589934592 : 8589934592; Math.abs(t - e) > 4294967296;)t += r; return t } function Rn(t, e, r, i) { const n = t.samples.length; if (n) { for (let a = t.inputTimeScale, s = 0; s < n; s++) { const o = t.samples[s]; o.pts = An(o.pts - r.baseTime * a / r.timescale, e * a) / a, o.dts = An(o.dts - i.baseTime * a / i.timescale, e * a) / a } const l = t.samples; return t.samples = [], { samples: l } } } function kn(t, e, r) { const i = t.samples.length; if (i) { for (let n = t.inputTimeScale, a = 0; a < i; a++) { const s = t.samples[a]; s.pts = An(s.pts - r.baseTime * n / r.timescale, e * n) / n }t.samples.sort(function(t, e) { return t.pts - e.pts }); const o = t.samples; return t.samples = [], { samples: o } } } let bn; var Dn = function(t, e, r, i) { this.size = void 0, this.duration = void 0, this.cts = void 0, this.flags = void 0, this.duration = e, this.size = r, this.cts = i, this.flags = { isLeading: 0, isDependedOn: 0, hasRedundancy: 0, degradPrio: 0, dependsOn: t ? 2 : 1, isNonSync: t ? 0 : 1 } }; const In = (function() { function t() { this.emitInitSegment = !1, this.audioCodec = void 0, this.videoCodec = void 0, this.initData = void 0, this.initPTS = null, this.initTracks = void 0, this.lastEndTime = null } const e = t.prototype; return e.destroy = function() {}, e.resetTimeStamp = function(t) { this.initPTS = t, this.lastEndTime = null }, e.resetNextTimestamp = function() { this.lastEndTime = null }, e.resetInitSegment = function(t, e, r, i) { this.audioCodec = e, this.videoCodec = r, this.generateInitSegment(function(t, e) { if (!t || !e) return t; const r = e.keyId; return r && e.isCommonEncryption && xt(t, ['moov', 'trak']).forEach(function(t) { const e = xt(t, ['mdia', 'minf', 'stbl', 'stsd'])[0].subarray(8); let i = xt(e, ['enca']); const n = i.length > 0; n || (i = xt(e, ['encv'])), i.forEach(function(t) { xt(n ? t.subarray(28) : t.subarray(78), ['sinf']).forEach(function(t) { const e = Bt(t); if (e) { const i = e.subarray(8, 24); i.some(function(t) { return t !== 0 }) || (w.log('[eme] Patching keyId in \'enc' + (n ? 'a' : 'v') + '>sinf>>tenc\' box: ' + Lt(i) + ' -> ' + Lt(r)), e.set(r, 8)) } }) }) }), t }(t, i)), this.emitInitSegment = !0 }, e.generateInitSegment = function(t) { let e = this.audioCodec; let r = this.videoCodec; if (t == null || !t.byteLength) return this.initTracks = void 0, void (this.initData = void 0); const i = this.initData = Ft(t); i.audio && (e = wn(i.audio, O)), i.video && (r = wn(i.video, N)); const n = {}; i.audio && i.video ? n.audiovideo = { container: 'video/mp4', codec: e + ',' + r, initSegment: t, id: 'main' } : i.audio ? n.audio = { container: 'audio/mp4', codec: e, initSegment: t, id: 'audio' } : i.video ? n.video = { container: 'video/mp4', codec: r, initSegment: t, id: 'main' } : w.warn('[passthrough-remuxer.ts]: initSegment does not contain moov or trak boxes.'), this.initTracks = n }, e.remux = function(t, e, r, i, n, a) { let s; let o; let l = this.initPTS; let u = this.lastEndTime; const h = { audio: void 0, video: void 0, text: i, id3: r, initSegment: void 0 }; y(u) || (u = this.lastEndTime = n || 0); const d = e.samples; if (d == null || !d.length) return h; const c = { initPTS: void 0, timescale: 1 }; let f = this.initData; if ((s = f) != null && s.length || (this.generateInitSegment(d), f = this.initData), (o = f) == null || !o.length) return w.warn('[passthrough-remuxer.ts]: Failed to generate initSegment.'), h; this.emitInitSegment && (c.tracks = this.initTracks, this.emitInitSegment = !1); const g = (function(t, e) { for (var r = 0, i = 0, n = 0, a = xt(t, ['moof', 'traf']), s = 0; s < a.length; s++) { const o = a[s]; const l = xt(o, ['tfhd'])[0]; const u = e[It(l, 4)]; if (u) { const h = u.default; const d = It(l, 0) | (h == null ? void 0 : h.flags); let c = h == null ? void 0 : h.duration; 8 & d && (c = It(l, 2 & d ? 12 : 8)); for (let f = u.timescale || 9e4, g = xt(o, ['trun']), v = 0; v < g.length; v++)!(r = Gt(g[v])) && c && (r = c * It(g[v], 4)), u.type === N ? i += r / f : u.type === O && (n += r / f) } } if (i === 0 && n === 0) { for (var m = 1 / 0, p = 0, E = 0, T = xt(t, ['sidx']), S = 0; S < T.length; S++) { const L = Pt(T[S]); if (L != null && L.references) { m = Math.min(m, L.earliestPresentationTime / L.timescale); const A = L.references.reduce(function(t, e) { return t + e.info.duration || 0 }, 0); E = (p = Math.max(p, A + L.earliestPresentationTime / L.timescale)) - m } } if (E && y(E)) return E } return i || n }(d, f)); const v = (function(t, e) { return xt(e, ['moof', 'traf']).reduce(function(e, r) { const i = xt(r, ['tfdt'])[0]; const n = i[0]; const a = xt(r, ['tfhd']).reduce(function(e, r) { var a = It(r, 4); var s = t[a]; if (s) { var o = It(i, 4); if (n===1) { if (o === At) return w.warn('[mp4-demuxer]: Ignoring assumed invalid signed 64-bit track fragment decode time'), e; o *= At + 1, o += It(i, 8) } var l = o / (s.timescale || 9e4); if (y(l) && (e===null||l < e)) return l } return e }, null); return a !== null && y(a) && (e === null || a < e) ? a : e }, null) }(f, d)); const m = v === null ? n : v; ((function(t, e, r, i) { if (t === null) return !0; const n = Math.max(i, 1); const a = e - t.baseTime / t.timescale; return Math.abs(a - r) > n }(l, m, n, g)) || c.timescale !== l.timescale && a) && (c.initPTS = m - n, l && l.timescale === 1 && w.warn('Adjusting initPTS by ' + (c.initPTS - l.baseTime)), this.initPTS = l = { baseTime: c.initPTS, timescale: 1 }); const p = t ? m - l.baseTime / l.timescale : u; const E = p + g; !(function(t, e, r) { xt(e, ['moof', 'traf']).forEach(function(e) { xt(e, ['tfhd']).forEach(function(i) { const n = It(i, 4); const a = t[n]; if (a) { const s = a.timescale || 9e4; xt(e, ['tfdt']).forEach(function(t) { const e = t[0]; const i = r * s; if (i) { let n = It(t, 4); if (e === 0)n -= i, _t(t, 4, n = Math.max(n, 0)); else { n *= Math.pow(2, 32), n += It(t, 8), n -= i, n = Math.max(n, 0); const a = Math.floor(n / (At + 1)); const o = Math.floor(n % (At + 1)); _t(t, 4, a), _t(t, 8, o) } } }) } }) }) }(f, d, l.baseTime / l.timescale)), g > 0 ? this.lastEndTime = E : (w.warn('Duration parsed from mp4 should be greater than zero'), this.resetNextTimestamp()); const T = !!f.audio; const S = !!f.video; let L = ''; T && (L += 'audio'), S && (L += 'video'); const A = { data1: d, startPTS: p, startDTS: p, endPTS: E, endDTS: E, type: L, hasAudio: T, hasVideo: S, nb: 1, dropped: 0 }; return h.audio = A.type === 'audio' ? A : void 0, h.video = A.type !== 'audio' ? A : void 0, h.initSegment = c, h.id3 = Rn(r, n, l, l), i.samples.length && (h.text = kn(i, n, l)), h }, t }()); function wn(t, e) { const r = t == null ? void 0 : t.codec; if (r && r.length > 4) return r; if (e === O) { if (r === 'ec-3' || r === 'ac-3' || r === 'alac') return r; if (r === 'fLaC' || r === 'Opus') return he(r, !1); const i = 'mp4a.40.5'; return w.info('Parsed audio codec "' + r + '" or audio object type not handled. Using "' + i + '"'), i } return w.warn('Unhandled video codec "' + r + '"'), r === 'hvc1' || r === 'hev1' ? 'hvc1.1.6.L120.90' : r === 'av01' ? 'av01.0.04M.08' : 'avc1.42e01e' } try { bn = self.performance.now.bind(self.performance) } catch (t) { w.debug('Unable to use Performance API on this environment'), bn = j == null ? void 0 : j.Date.now } const Cn = [{ demux: Ji, remux: In }, { demux: on, remux: Ln }, { demux: zi, remux: Ln }, { demux: fn, remux: Ln }]; Cn.splice(2, 0, { demux: Zi, remux: Ln }); const _n = (function() { function t(t, e, r, i, n) { this.async = !1, this.observer = void 0, this.typeSupported = void 0, this.config = void 0, this.vendor = void 0, this.id = void 0, this.demuxer = void 0, this.remuxer = void 0, this.decrypter = void 0, this.probe = void 0, this.decryptionPromise = null, this.transmuxConfig = void 0, this.currentTransmuxState = void 0, this.observer = t, this.typeSupported = e, this.config = r, this.vendor = i, this.id = n } const e = t.prototype; return e.configure = function(t) { this.transmuxConfig = t, this.decrypter && this.decrypter.reset() }, e.push = function(t, e, r, i) { const n = this; const a = r.transmuxing; a.executeStart = bn(); let s = new Uint8Array(t); const o = this.currentTransmuxState; const l = this.transmuxConfig; i && (this.currentTransmuxState = i); const u = i || o; const h = u.contiguous; const d = u.discontinuity; const c = u.trackSwitch; const f = u.accurateTimeOffset; const g = u.timeOffset; const v = u.initSegmentChange; const m = l.audioCodec; const p = l.videoCodec; const y = l.defaultInitPts; const E = l.duration; const T = l.initSegmentData; const R = (function(t, e) { let r = null; return t.byteLength > 0 && (e == null ? void 0 : e.key) != null && e.iv !== null && e.method != null && (r = e), r }(s, e)); if (R && R.method === 'AES-128') { const k = this.getDecrypter(); if (!k.isSync()) return this.decryptionPromise = k.webCryptoDecrypt(s, R.key.buffer, R.iv.buffer).then(function(t) { const e = n.push(t, null, r); return n.decryptionPromise = null, e }), this.decryptionPromise; let b = k.softwareDecrypt(s, R.key.buffer, R.iv.buffer); if (r.part > -1 && (b = k.flush()), !b) return a.executeEnd = bn(), xn(r); s = new Uint8Array(b) } const D = this.needsProbing(d, c); if (D) { const I = this.configureTransmuxer(s); if (I) return w.warn('[transmuxer] ' + I.message), this.observer.emit(S.ERROR, S.ERROR, { type: L.MEDIA_ERROR, details: A.FRAG_PARSING_ERROR, fatal: !1, error: I, reason: I.message }), a.executeEnd = bn(), xn(r) }(d || c || v || D) && this.resetInitSegment(T, m, p, E, e), (d || v || D) && this.resetInitialTimestamp(y), h || this.resetContiguity(); const C = this.transmux(s, R, g, f, r); const _ = this.currentTransmuxState; return _.contiguous = !0, _.discontinuity = !1, _.trackSwitch = !1, a.executeEnd = bn(), C }, e.flush = function(t) { const e = this; const r = t.transmuxing; r.executeStart = bn(); const i = this.decrypter; const n = this.currentTransmuxState; const a = this.decryptionPromise; if (a) return a.then(function() { return e.flush(t) }); const s = []; const o = n.timeOffset; if (i) { const l = i.flush(); l && s.push(this.push(l, null, t)) } const u = this.demuxer; const h = this.remuxer; if (!u || !h) return r.executeEnd = bn(), [xn(t)]; const d = u.flush(o); return Pn(d) ? d.then(function(r) { return e.flushRemux(s, r, t), s }) : (this.flushRemux(s, d, t), s) }, e.flushRemux = function(t, e, r) { const i = e.audioTrack; const n = e.videoTrack; const a = e.id3Track; const s = e.textTrack; const o = this.currentTransmuxState; const l = o.accurateTimeOffset; const u = o.timeOffset; w.log('[transmuxer.ts]: Flushed fragment ' + r.sn + (r.part > -1 ? ' p: ' + r.part : '') + ' of level ' + r.level); const h = this.remuxer.remux(i, n, a, s, u, l, !0, this.id); t.push({ remuxResult: h, chunkMeta: r }), r.transmuxing.executeEnd = bn() }, e.resetInitialTimestamp = function(t) { const e = this.demuxer; const r = this.remuxer; e && r && (e.resetTimeStamp(t), r.resetTimeStamp(t)) }, e.resetContiguity = function() { const t = this.demuxer; const e = this.remuxer; t && e && (t.resetContiguity(), e.resetNextTimestamp()) }, e.resetInitSegment = function(t, e, r, i, n) { const a = this.demuxer; const s = this.remuxer; a && s && (a.resetInitSegment(t, e, r, i), s.resetInitSegment(t, e, r, n)) }, e.destroy = function() { this.demuxer && (this.demuxer.destroy(), this.demuxer = void 0), this.remuxer && (this.remuxer.destroy(), this.remuxer = void 0) }, e.transmux = function(t, e, r, i, n) { return e && e.method === 'SAMPLE-AES' ? this.transmuxSampleAes(t, e, r, i, n) : this.transmuxUnencrypted(t, r, i, n) }, e.transmuxUnencrypted = function(t, e, r, i) { const n = this.demuxer.demux(t, e, !1, !this.config.progressive); const a = n.audioTrack; const s = n.videoTrack; const o = n.id3Track; const l = n.textTrack; return { remuxResult: this.remuxer.remux(a, s, o, l, e, r, !1, this.id), chunkMeta: i } }, e.transmuxSampleAes = function(t, e, r, i, n) { const a = this; return this.demuxer.demuxSampleAes(t, e, r).then(function(t) { return { remuxResult: a.remuxer.remux(t.audioTrack, t.videoTrack, t.id3Track, t.textTrack, r, i, !1, a.id), chunkMeta: n } }) }, e.configureTransmuxer = function(t) { for (var e, r = this.config, i = this.observer, n = this.typeSupported, a = this.vendor, s = 0, o = Cn.length; s < o; s++) { var l; if ((l = Cn[s].demux) != null && l.probe(t)) { e = Cn[s]; break } } if (!e) return new Error('Failed to find demuxer by probing fragment data'); const u = this.demuxer; const h = this.remuxer; const d = e.remux; const c = e.demux; h && h instanceof d || (this.remuxer = new d(i, r, n, a)), u && u instanceof c || (this.demuxer = new c(i, r, n), this.probe = c.probe) }, e.needsProbing = function(t, e) { return !this.demuxer || !this.remuxer || t || e }, e.getDecrypter = function() { let t = this.decrypter; return t || (t = this.decrypter = new ci(this.config)), t }, t }()); var xn = function(t) { return { remuxResult: {}, chunkMeta: t } }; function Pn(t) { return 'then' in t && t.then instanceof Function } const Fn = function(t, e, r, i, n) { this.audioCodec = void 0, this.videoCodec = void 0, this.initSegmentData = void 0, this.duration = void 0, this.defaultInitPts = void 0, this.audioCodec = t, this.videoCodec = e, this.initSegmentData = r, this.duration = i, this.defaultInitPts = n || null }; const Mn = function(t, e, r, i, n, a) { this.discontinuity = void 0, this.contiguous = void 0, this.accurateTimeOffset = void 0, this.trackSwitch = void 0, this.timeOffset = void 0, this.initSegmentChange = void 0, this.discontinuity = t, this.contiguous = e, this.accurateTimeOffset = r, this.trackSwitch = i, this.timeOffset = n, this.initSegmentChange = a }; const On = { exports: {} }; !(function(t) { const e = Object.prototype.hasOwnProperty; let r = '~'; function i() {} function n(t, e, r) { this.fn = t, this.context = e, this.once = r || !1 } function a(t, e, i, a, s) { if (typeof i !== 'function') throw new TypeError('The listener must be a function'); const o = new n(i, a || t, s); const l = r ? r + e : e; return t._events[l] ? t._events[l].fn ? t._events[l] = [t._events[l], o] : t._events[l].push(o) : (t._events[l] = o, t._eventsCount++), t } function s(t, e) { --t._eventsCount == 0 ? t._events = new i() : delete t._events[e] } function o() { this._events = new i(), this._eventsCount = 0 }Object.create && (i.prototype = Object.create(null), (new i()).__proto__ || (r = !1)), o.prototype.eventNames = function() { let t; let i; const n = []; if (this._eventsCount === 0) return n; for (i in t = this._events)e.call(t, i) && n.push(r ? i.slice(1) : i); return Object.getOwnPropertySymbols ? n.concat(Object.getOwnPropertySymbols(t)) : n }, o.prototype.listeners = function(t) { const e = r ? r + t : t; const i = this._events[e]; if (!i) return []; if (i.fn) return [i.fn]; for (var n = 0, a = i.length, s = new Array(a); n < a; n++)s[n] = i[n].fn; return s }, o.prototype.listenerCount = function(t) { const e = r ? r + t : t; const i = this._events[e]; return i ? i.fn ? 1 : i.length : 0 }, o.prototype.emit = function(t, e, i, n, a, s) { const o = r ? r + t : t; if (!this._events[o]) return !1; let l; let u; const h = this._events[o]; const d = arguments.length; if (h.fn) { switch (h.once && this.removeListener(t, h.fn, void 0, !0), d) { case 1:return h.fn.call(h.context), !0; case 2:return h.fn.call(h.context, e), !0; case 3:return h.fn.call(h.context, e, i), !0; case 4:return h.fn.call(h.context, e, i, n), !0; case 5:return h.fn.call(h.context, e, i, n, a), !0; case 6:return h.fn.call(h.context, e, i, n, a, s), !0 } for (u = 1, l = new Array(d - 1); u < d; u++)l[u - 1] = arguments[u]; h.fn.apply(h.context, l) } else { let c; const f = h.length; for (u = 0; u < f; u++) switch (h[u].once && this.removeListener(t, h[u].fn, void 0, !0), d) { case 1:h[u].fn.call(h[u].context); break; case 2:h[u].fn.call(h[u].context, e); break; case 3:h[u].fn.call(h[u].context, e, i); break; case 4:h[u].fn.call(h[u].context, e, i, n); break; default:if (!l) for (c = 1, l = new Array(d - 1); c < d; c++)l[c - 1] = arguments[c]; h[u].fn.apply(h[u].context, l) } } return !0 }, o.prototype.on = function(t, e, r) { return a(this, t, e, r, !1) }, o.prototype.once = function(t, e, r) { return a(this, t, e, r, !0) }, o.prototype.removeListener = function(t, e, i, n) { const a = r ? r + t : t; if (!this._events[a]) return this; if (!e) return s(this, a), this; const o = this._events[a]; if (o.fn)o.fn !== e || n && !o.once || i && o.context !== i || s(this, a); else { for (var l = 0, u = [], h = o.length; l < h; l++)(o[l].fn !== e || n && !o[l].once || i && o[l].context !== i) && u.push(o[l]); u.length ? this._events[a] = u.length === 1 ? u[0] : u : s(this, a) } return this }, o.prototype.removeAllListeners = function(t) { let e; return t ? (e = r ? r + t : t, this._events[e] && s(this, e)) : (this._events = new i(), this._eventsCount = 0), this }, o.prototype.off = o.prototype.removeListener, o.prototype.addListener = o.prototype.on, o.prefixed = r, o.EventEmitter = o, t.exports = o }(On)); const Nn = v(On.exports); function Un(t, e) { if (!((r = e.remuxResult).audio || r.video || r.text || r.id3 || r.initSegment)) return !1; let r; const i = []; const n = e.remuxResult; const a = n.audio; const s = n.video; return a && Bn(i, a), s && Bn(i, s), t.postMessage({ event: 'transmuxComplete', data: e }, i), !0 } function Bn(t, e) { e.data1 && t.push(e.data1.buffer), e.data2 && t.push(e.data2.buffer) } function Gn(t, e, r) { e.reduce(function(e, r) { return Un(t, r) || e }, !1) || t.postMessage({ event: 'transmuxComplete', data: e[0] }), t.postMessage({ event: 'flush', data: r }) } void 0 !== e && e && (function(t) { const e = new Nn(); const r = function(e, r) { t.postMessage({ event: e, data: r }) }; e.on(S.FRAG_DECRYPTED, r), e.on(S.ERROR, r); const i = function() { const t = function(t) { const e = function(e) { r('workerLog', { logType: t, message: e }) }; w[t] = e }; for (const e in w)t(e) }; t.addEventListener('message', function(n) { const a = n.data; switch (a.cmd) { case 'init':var s = JSON.parse(a.config); t.transmuxer = new _n(e, a.typeSupported, s, a.vendor, a.id), I(s.debug, a.id), i(), r('init', null); break; case 'configure':t.transmuxer.configure(a.config); break; case 'demux':var o = t.transmuxer.push(a.data, a.decryptdata, a.chunkMeta, a.state); Pn(o) ? (t.transmuxer.async = !0, o.then(function(e) { Un(t, e) }).catch(function(t) { r(S.ERROR, { type: L.MEDIA_ERROR, details: A.FRAG_PARSING_ERROR, chunkMeta: a.chunkMeta, fatal: !1, error: t, err: t, reason: 'transmuxer-worker push error' }) })) : (t.transmuxer.async = !1, Un(t, o)); break; case 'flush':var l = a.chunkMeta; var u = t.transmuxer.flush(l); Pn(u) || t.transmuxer.async ? (Pn(u) || (u = Promise.resolve(u)), u.then(function(e) { Gn(t, e, l) }).catch(function(t) { r(S.ERROR, { type: L.MEDIA_ERROR, details: A.FRAG_PARSING_ERROR, chunkMeta: a.chunkMeta, fatal: !1, error: t, err: t, reason: 'transmuxer-worker flush error' }) })) : Gn(t, u, l) } }) }(self)); const Kn = (function() { function e(e, r, i, n) { const a = this; this.error = null, this.hls = void 0, this.id = void 0, this.observer = void 0, this.frag = null, this.part = null, this.useWorker = void 0, this.workerContext = null, this.onwmsg = void 0, this.transmuxer = null, this.onTransmuxComplete = void 0, this.onFlush = void 0; const s = e.config; this.hls = e, this.id = r, this.useWorker = !!s.enableWorker, this.onTransmuxComplete = i, this.onFlush = n; const o = function(t, e) { (e = e || {}).frag = a.frag, e.id = a.id, t === S.ERROR && (a.error = e.error), a.hls.trigger(t, e) }; this.observer = new Nn(), this.observer.on(S.FRAG_DECRYPTED, o), this.observer.on(S.ERROR, o); let l; let u; let h; let d; const c = ee(s.preferManagedMediaSource) || { isTypeSupported: function() { return !1 } }; const f = { mpeg: c.isTypeSupported('audio/mpeg'), mp3: c.isTypeSupported('audio/mp4; codecs="mp3"'), ac3: c.isTypeSupported('audio/mp4; codecs="ac-3"') }; const g = navigator.vendor; if (!this.useWorker || typeof Worker === 'undefined' || (s.workerPath, 0)) this.transmuxer = new _n(this.observer, f, s, g, r); else try { s.workerPath ? (w.log('loading Web Worker ' + s.workerPath + ' for "' + r + '"'), this.workerContext = (h = s.workerPath, d = new self.URL(h, self.location.href).href, { worker: new self.Worker(d), scriptURL: d })) : (w.log('injecting Web Worker for "' + r + '"'), this.workerContext = (l = new self.Blob(['var exports={};var module={exports:exports};function define(f){f()};define.amd=true;(' + t.toString() + ')(true);'], { type: 'text/javascript' }), u = self.URL.createObjectURL(l), { worker: new self.Worker(u), objectURL: u })), this.onwmsg = function(t) { return a.onWorkerMessage(t) }; const v = this.workerContext.worker; v.addEventListener('message', this.onwmsg), v.onerror = function(t) { const e = new Error(t.message + '  (' + t.filename + ':' + t.lineno + ')'); s.enableWorker = !1, w.warn('Error in "' + r + '" Web Worker, fallback to inline'), a.hls.trigger(S.ERROR, { type: L.OTHER_ERROR, details: A.INTERNAL_EXCEPTION, fatal: !1, event: 'demuxerWorker', error: e }) }, v.postMessage({ cmd: 'init', typeSupported: f, vendor: g, id: r, config: JSON.stringify(s) }) } catch (t) { w.warn('Error setting up "' + r + '" Web Worker, fallback to inline', t), this.resetWorker(), this.error = null, this.transmuxer = new _n(this.observer, f, s, g, r) } } const r = e.prototype; return r.resetWorker = function() { if (this.workerContext) { const t = this.workerContext; const e = t.worker; const r = t.objectURL; r && self.URL.revokeObjectURL(r), e.removeEventListener('message', this.onwmsg), e.onerror = null, e.terminate(), this.workerContext = null } }, r.destroy = function() { if (this.workerContext) this.resetWorker(), this.onwmsg = void 0; else { const t = this.transmuxer; t && (t.destroy(), this.transmuxer = null) } const e = this.observer; e && e.removeAllListeners(), this.frag = null, this.observer = null, this.hls = null }, r.push = function(t, e, r, i, n, a, s, o, l, u) { let h; let d; const c = this; l.transmuxing.start = self.performance.now(); const f = this.transmuxer; const g = a ? a.start : n.start; const v = n.decryptdata; const m = this.frag; const p = !(m && n.cc === m.cc); const y = !(m && l.level === m.level); const E = m ? l.sn - m.sn : -1; const T = this.part ? l.part - this.part.index : -1; const S = E === 0 && l.id > 1 && l.id === (m == null ? void 0 : m.stats.chunkCount); const L = !y && (E === 1 || E === 0 && (T === 1 || S && T <= 0)); const A = self.performance.now(); (y || E || n.stats.parsing.start === 0) && (n.stats.parsing.start = A), !a || !T && L || (a.stats.parsing.start = A); const R = !(m && ((h = n.initSegment) == null ? void 0 : h.url) === ((d = m.initSegment) == null ? void 0 : d.url)); const k = new Mn(p, L, o, y, g, R); if (!L || p || R) { w.log('[transmuxer-interface, ' + n.type + ']: Starting new transmux session for sn: ' + l.sn + ' p: ' + l.part + ' level: ' + l.level + ' id: ' + l.id + '\n        discontinuity: ' + p + '\n        trackSwitch: ' + y + '\n        contiguous: ' + L + '\n        accurateTimeOffset: ' + o + '\n        timeOffset: ' + g + '\n        initSegmentChange: ' + R); const b = new Fn(r, i, e, s, u); this.configureTransmuxer(b) } if (this.frag = n, this.part = a, this.workerContext) this.workerContext.worker.postMessage({ cmd: 'demux', data: t, decryptdata: v, chunkMeta: l, state: k }, t instanceof ArrayBuffer ? [t] : []); else if (f) { const D = f.push(t, v, l, k); Pn(D) ? (f.async = !0, D.then(function(t) { c.handleTransmuxComplete(t) }).catch(function(t) { c.transmuxerError(t, l, 'transmuxer-interface push error') })) : (f.async = !1, this.handleTransmuxComplete(D)) } }, r.flush = function(t) { const e = this; t.transmuxing.start = self.performance.now(); const r = this.transmuxer; if (this.workerContext) this.workerContext.worker.postMessage({ cmd: 'flush', chunkMeta: t }); else if (r) { let i = r.flush(t); Pn(i) || r.async ? (Pn(i) || (i = Promise.resolve(i)), i.then(function(r) { e.handleFlushResult(r, t) }).catch(function(r) { e.transmuxerError(r, t, 'transmuxer-interface flush error') })) : this.handleFlushResult(i, t) } }, r.transmuxerError = function(t, e, r) { this.hls && (this.error = t, this.hls.trigger(S.ERROR, { type: L.MEDIA_ERROR, details: A.FRAG_PARSING_ERROR, chunkMeta: e, frag: this.frag || void 0, fatal: !1, error: t, err: t, reason: r })) }, r.handleFlushResult = function(t, e) { const r = this; t.forEach(function(t) { r.handleTransmuxComplete(t) }), this.onFlush(e) }, r.onWorkerMessage = function(t) { const e = t.data; const r = this.hls; switch (e.event) { case 'init':var i; var n = (i = this.workerContext) == null ? void 0 : i.objectURL; n && self.URL.revokeObjectURL(n); break; case 'transmuxComplete':this.handleTransmuxComplete(e.data); break; case 'flush':this.onFlush(e.data); break; case 'workerLog':w[e.data.logType] && w[e.data.logType](e.data.message); break; default:e.data = e.data || {}, e.data.frag = this.frag, e.data.id = this.id, r.trigger(e.event, e.data) } }, r.configureTransmuxer = function(t) { const e = this.transmuxer; this.workerContext ? this.workerContext.worker.postMessage({ cmd: 'configure', config: t }) : e && e.configure(t) }, r.handleTransmuxComplete = function(t) { t.chunkMeta.transmuxing.end = self.performance.now(), this.onTransmuxComplete(t) }, e }()); function Hn(t, e) { if (t.length !== e.length) return !1; for (let r = 0; r < t.length; r++) if (!Vn(t[r].attrs, e[r].attrs)) return !1; return !0 } function Vn(t, e, r) { const i = t['STABLE-RENDITION-ID']; return i && !r ? i === e['STABLE-RENDITION-ID'] : !(r || ['LANGUAGE', 'NAME', 'CHARACTERISTICS', 'AUTOSELECT', 'DEFAULT', 'FORCED', 'ASSOC-LANGUAGE']).some(function(r) { return t[r] !== e[r] }) } function Yn(t, e) { return e.label.toLowerCase() === t.name.toLowerCase() && (!e.language || e.language.toLowerCase() === (t.lang || '').toLowerCase()) } const Wn = (function(t) { function e(e, r, i) { let n; return (n = t.call(this, e, r, i, '[audio-stream-controller]', Ce) || this).videoBuffer = null, n.videoTrackCC = -1, n.waitingVideoCC = -1, n.bufferedTrack = null, n.switchingTrack = null, n.trackId = -1, n.waitingData = null, n.mainDetails = null, n.flushing = !1, n.bufferFlushed = !1, n.cachedTrackLoadedData = null, n._registerListeners(), n }l(e, t); const r = e.prototype; return r.onHandlerDestroying = function() { this._unregisterListeners(), t.prototype.onHandlerDestroying.call(this), this.mainDetails = null, this.bufferedTrack = null, this.switchingTrack = null }, r._registerListeners = function() { const t = this.hls; t.on(S.MEDIA_ATTACHED, this.onMediaAttached, this), t.on(S.MEDIA_DETACHING, this.onMediaDetaching, this), t.on(S.MANIFEST_LOADING, this.onManifestLoading, this), t.on(S.LEVEL_LOADED, this.onLevelLoaded, this), t.on(S.AUDIO_TRACKS_UPDATED, this.onAudioTracksUpdated, this), t.on(S.AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this), t.on(S.AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this), t.on(S.ERROR, this.onError, this), t.on(S.BUFFER_RESET, this.onBufferReset, this), t.on(S.BUFFER_CREATED, this.onBufferCreated, this), t.on(S.BUFFER_FLUSHING, this.onBufferFlushing, this), t.on(S.BUFFER_FLUSHED, this.onBufferFlushed, this), t.on(S.INIT_PTS_FOUND, this.onInitPtsFound, this), t.on(S.FRAG_BUFFERED, this.onFragBuffered, this) }, r._unregisterListeners = function() { const t = this.hls; t.off(S.MEDIA_ATTACHED, this.onMediaAttached, this), t.off(S.MEDIA_DETACHING, this.onMediaDetaching, this), t.off(S.MANIFEST_LOADING, this.onManifestLoading, this), t.off(S.LEVEL_LOADED, this.onLevelLoaded, this), t.off(S.AUDIO_TRACKS_UPDATED, this.onAudioTracksUpdated, this), t.off(S.AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this), t.off(S.AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this), t.off(S.ERROR, this.onError, this), t.off(S.BUFFER_RESET, this.onBufferReset, this), t.off(S.BUFFER_CREATED, this.onBufferCreated, this), t.off(S.BUFFER_FLUSHING, this.onBufferFlushing, this), t.off(S.BUFFER_FLUSHED, this.onBufferFlushed, this), t.off(S.INIT_PTS_FOUND, this.onInitPtsFound, this), t.off(S.FRAG_BUFFERED, this.onFragBuffered, this) }, r.onInitPtsFound = function(t, e) { const r = e.frag; const i = e.id; const n = e.initPTS; const a = e.timescale; if (i === 'main') { const s = r.cc; this.initPTS[r.cc] = { baseTime: n, timescale: a }, this.log('InitPTS for cc: ' + s + ' found from main: ' + n), this.videoTrackCC = s, this.state === Ri && this.tick() } }, r.startLoad = function(t) { if (!this.levels) return this.startPosition = t, void (this.state = gi); const e = this.lastCurrentTime; this.stopLoad(), this.setInterval(100), e > 0 && t === -1 ? (this.log('Override startPosition with lastCurrentTime @' + e.toFixed(3)), t = e, this.state = vi) : (this.loadedmetadata = !1, this.state = Ei), this.nextLoadPosition = this.startPosition = this.lastCurrentTime = t, this.tick() }, r.doTick = function() { switch (this.state) { case vi:this.doTickIdle(); break; case Ei:var e; var r = this.levels; var i = this.trackId; var n = r == null || (e = r[i]) == null ? void 0 : e.details; if (n) { if (this.waitForCdnTuneIn(n)) break; this.state = Ri } break; case yi:var a; var s = performance.now(); var o = this.retryDate; if (!o || s >= o || (a = this.media) != null && a.seeking) { const l = this.levels; const u = this.trackId; this.log('RetryDate reached, switch back to IDLE state'), this.resetStartWhenNotLoaded((l == null ? void 0 : l[u]) || null), this.state = vi } break; case Ri:var h = this.waitingData; if (h) { const d = h.frag; const c = h.part; const f = h.cache; const g = h.complete; if (void 0 !== this.initPTS[d.cc]) { this.waitingData = null, this.waitingVideoCC = -1, this.state = pi; const v = { frag: d, part: c, payload: f.flush(), networkDetails: null }; this._handleFragmentLoadProgress(v), g && t.prototype._handleFragmentLoadComplete.call(this, v) } else if (this.videoTrackCC !== this.waitingVideoCC) this.log('Waiting fragment cc (' + d.cc + ') cancelled because video is at cc ' + this.videoTrackCC), this.clearWaitingFragment(); else { const m = this.getLoadPosition(); const p = Jr.bufferInfo(this.mediaBuffer, m, this.config.maxBufferHole); Er(p.end, this.config.maxFragLookUpTolerance, d) < 0 && (this.log('Waiting fragment cc (' + d.cc + ') @ ' + d.start + ' cancelled because another fragment at ' + p.end + ' is needed'), this.clearWaitingFragment()) } } else this.state = vi } this.onTickEnd() }, r.clearWaitingFragment = function() { const t = this.waitingData; t && (this.fragmentTracker.removeFragment(t.frag), this.waitingData = null, this.waitingVideoCC = -1, this.state = vi) }, r.resetLoadingState = function() { this.clearWaitingFragment(), t.prototype.resetLoadingState.call(this) }, r.onTickEnd = function() { const t = this.media; t != null && t.readyState && (this.lastCurrentTime = t.currentTime) }, r.doTickIdle = function() { const t = this.hls; const e = this.levels; const r = this.media; const i = this.trackId; const n = t.config; if ((r || !this.startFragRequested && n.startFragPrefetch) && e != null && e[i]) { const a = e[i]; const s = a.details; if (!s || s.live && this.levelLastLoaded !== a || this.waitForCdnTuneIn(s)) this.state = Ei; else { const o = this.mediaBuffer ? this.mediaBuffer : this.media; this.bufferFlushed && o && (this.bufferFlushed = !1, this.afterBufferFlushed(o, O, Ce)); const l = this.getFwdBufferInfo(o, Ce); if (l !== null) { const u = this.bufferedTrack; const h = this.switchingTrack; if (!h && this._streamEnded(l, s)) return t.trigger(S.BUFFER_EOS, { type: 'audio' }), void (this.state = Li); const d = this.getFwdBufferInfo(this.videoBuffer ? this.videoBuffer : this.media, we); const c = l.len; const f = this.getMaxBufferLength(d == null ? void 0 : d.len); const g = s.fragments; const v = g[0].start; let m = this.flushing ? this.getLoadPosition() : l.end; if (h && r) { const p = this.getLoadPosition(); u && !Vn(h.attrs, u.attrs) && (m = p), s.PTSKnown && p < v && (l.end > v || l.nextStart) && (this.log('Alt audio track ahead of main track, seek to start of alt audio track'), r.currentTime = v + 0.05) } if (!(c >= f && !h && m < g[g.length - 1].start)) { let y = this.getNextFragment(m, s); let E = !1; if (y && this.isLoopLoading(y, m) && (E = !!y.gap, y = this.getNextFragmentLoopLoading(y, s, l, we, f)), y) { const T = d && y.start > d.end + s.targetduration; if (T || (d == null || !d.len) && l.len) { const L = this.getAppendedFrag(y.start, we); if (L === null) return; if (E || (E = !!L.gap || !!T && d.len === 0), T && !E || E && l.nextStart && l.nextStart < L.end) return } this.loadFragment(y, a, m) } else this.bufferFlushed = !0 } } } } }, r.getMaxBufferLength = function(e) { const r = t.prototype.getMaxBufferLength.call(this); return e ? Math.min(Math.max(r, e), this.config.maxMaxBufferLength) : r }, r.onMediaDetaching = function() { this.videoBuffer = null, this.bufferFlushed = this.flushing = !1, t.prototype.onMediaDetaching.call(this) }, r.onAudioTracksUpdated = function(t, e) { const r = e.audioTracks; this.resetTransmuxer(), this.levels = r.map(function(t) { return new rr(t) }) }, r.onAudioTrackSwitching = function(t, e) { const r = !!e.url; this.trackId = e.id; const i = this.fragCurrent; i && (i.abortRequests(), this.removeUnbufferedFrags(i.start)), this.resetLoadingState(), r ? this.setInterval(100) : this.resetTransmuxer(), r ? (this.switchingTrack = e, this.state = vi, this.flushAudioIfNeeded(e)) : (this.switchingTrack = null, this.bufferedTrack = e, this.state = gi), this.tick() }, r.onManifestLoading = function() { this.fragmentTracker.removeAllFragments(), this.startPosition = this.lastCurrentTime = 0, this.bufferFlushed = this.flushing = !1, this.levels = this.mainDetails = this.waitingData = this.bufferedTrack = this.cachedTrackLoadedData = this.switchingTrack = null, this.startFragRequested = !1, this.trackId = this.videoTrackCC = this.waitingVideoCC = -1 }, r.onLevelLoaded = function(t, e) { this.mainDetails = e.details, this.cachedTrackLoadedData !== null && (this.hls.trigger(S.AUDIO_TRACK_LOADED, this.cachedTrackLoadedData), this.cachedTrackLoadedData = null) }, r.onAudioTrackLoaded = function(t, e) { let r; if (this.mainDetails != null) { const i = this.levels; const n = e.details; const a = e.id; if (i) { this.log('Audio track ' + a + ' loaded [' + n.startSN + ',' + n.endSN + ']' + (n.lastPartSn ? '[part-' + n.lastPartSn + '-' + n.lastPartIndex + ']' : '') + ',duration:' + n.totalduration); const s = i[a]; let o = 0; if (n.live || (r = s.details) != null && r.live) { this.checkLiveUpdate(n); let l; const u = this.mainDetails; if (n.deltaUpdateFailed || !u) return; !s.details && n.hasProgramDateTime && u.hasProgramDateTime ? (ii(n, u), o = n.fragments[0].start) : o = this.alignPlaylists(n, s.details, (l = this.levelLastLoaded) == null ? void 0 : l.details) }s.details = n, this.levelLastLoaded = s, this.startFragRequested || !this.mainDetails && n.live || this.setStartPosition(this.mainDetails || n, o), this.state !== Ei || this.waitForCdnTuneIn(n) || (this.state = vi), this.tick() } else this.warn('Audio tracks were reset while loading level ' + a) } else this.cachedTrackLoadedData = e }, r._handleFragmentLoadProgress = function(t) { let e; const r = t.frag; const i = t.part; const n = t.payload; const a = this.config; const s = this.trackId; const o = this.levels; if (o) { const l = o[s]; if (l) { const u = l.details; if (!u) return this.warn('Audio track details undefined on fragment load progress'), void this.removeUnbufferedFrags(r.start); const h = a.defaultAudioCodec || l.audioCodec || 'mp4a.40.2'; let d = this.transmuxer; d || (d = this.transmuxer = new Kn(this.hls, Ce, this._handleTransmuxComplete.bind(this), this._handleTransmuxerFlush.bind(this))); const c = this.initPTS[r.cc]; const f = (e = r.initSegment) == null ? void 0 : e.data; if (void 0 !== c) { const g = i ? i.index : -1; const v = g !== -1; const m = new $r(r.level, r.sn, r.stats.chunkCount, n.byteLength, g, v); d.push(n, f, h, '', r, i, u.totalduration, !1, m, c) } else this.log('Unknown video PTS for cc ' + r.cc + ', waiting for video PTS before demuxing audio frag ' + r.sn + ' of [' + u.startSN + ' ,' + u.endSN + '],track ' + s), (this.waitingData = this.waitingData || { frag: r, part: i, cache: new Di(), complete: !1 }).cache.push(new Uint8Array(n)), this.waitingVideoCC = this.videoTrackCC, this.state = Ri } else this.warn('Audio track is undefined on fragment load progress') } else this.warn('Audio tracks were reset while fragment load was in progress. Fragment ' + r.sn + ' of level ' + r.level + ' will not be buffered') }, r._handleFragmentLoadComplete = function(e) { this.waitingData ? this.waitingData.complete = !0 : t.prototype._handleFragmentLoadComplete.call(this, e) }, r.onBufferReset = function() { this.mediaBuffer = this.videoBuffer = null, this.loadedmetadata = !1 }, r.onBufferCreated = function(t, e) { const r = e.tracks.audio; r && (this.mediaBuffer = r.buffer || null), e.tracks.video && (this.videoBuffer = e.tracks.video.buffer || null) }, r.onFragBuffered = function(t, e) { const r = e.frag; const n = e.part; if (r.type === Ce) if (this.fragContextChanged(r)) this.warn('Fragment ' + r.sn + (n ? ' p: ' + n.index : '') + ' of level ' + r.level + ' finished buffering, but was aborted. state: ' + this.state + ', audioSwitch: ' + (this.switchingTrack ? this.switchingTrack.name : 'false')); else { if (r.sn !== 'initSegment') { this.fragPrevious = r; const a = this.switchingTrack; a && (this.bufferedTrack = a, this.switchingTrack = null, this.hls.trigger(S.AUDIO_TRACK_SWITCHED, i({}, a))) } this.fragBufferedComplete(r, n) } else if (!this.loadedmetadata && r.type === we) { const s = this.videoBuffer || this.media; s && Jr.getBuffered(s).length && (this.loadedmetadata = !0) } }, r.onError = function(e, r) { let i; if (r.fatal) this.state = Ai; else switch (r.details) { case A.FRAG_GAP:case A.FRAG_PARSING_ERROR:case A.FRAG_DECRYPT_ERROR:case A.FRAG_LOAD_ERROR:case A.FRAG_LOAD_TIMEOUT:case A.KEY_LOAD_ERROR:case A.KEY_LOAD_TIMEOUT:this.onFragmentOrKeyLoadError(Ce, r); break; case A.AUDIO_TRACK_LOAD_ERROR:case A.AUDIO_TRACK_LOAD_TIMEOUT:case A.LEVEL_PARSING_ERROR:r.levelRetry || this.state !== Ei || ((i = r.context) == null ? void 0 : i.type) !== De || (this.state = vi); break; case A.BUFFER_APPEND_ERROR:case A.BUFFER_FULL_ERROR:if (!r.parent || r.parent !== 'audio') return; if (r.details === A.BUFFER_APPEND_ERROR) return void this.resetLoadingState(); this.reduceLengthAndFlushBuffer(r) && (this.bufferedTrack = null, t.prototype.flushMainBuffer.call(this, 0, Number.POSITIVE_INFINITY, 'audio')); break; case A.INTERNAL_EXCEPTION:this.recoverWorkerError(r) } }, r.onBufferFlushing = function(t, e) { e.type !== N && (this.flushing = !0) }, r.onBufferFlushed = function(t, e) { const r = e.type; if (r !== N) { this.flushing = !1, this.bufferFlushed = !0, this.state === Li && (this.state = vi); const i = this.mediaBuffer || this.media; i && (this.afterBufferFlushed(i, r, Ce), this.tick()) } }, r._handleTransmuxComplete = function(t) { let e; const r = 'audio'; const i = this.hls; const n = t.remuxResult; const a = t.chunkMeta; const s = this.getCurrentContext(a); if (s) { const l = s.frag; const u = s.part; const h = s.level; const d = h.details; const c = n.audio; const f = n.text; const g = n.id3; const v = n.initSegment; if (!this.fragContextChanged(l) && d) { if (this.state = Ti, this.switchingTrack && c && this.completeAudioSwitch(this.switchingTrack), v != null && v.tracks) { const m = l.initSegment || l; this._bufferInitSegment(h, v.tracks, m, a), i.trigger(S.FRAG_PARSING_INIT_SEGMENT, { frag: m, id: r, tracks: v.tracks }) } if (c) { const p = c.startPTS; const y = c.endPTS; const E = c.startDTS; const T = c.endDTS; u && (u.elementaryStreams[O] = { startPTS: p, endPTS: y, startDTS: E, endDTS: T }), l.setElementaryStreamInfo(O, p, y, E, T), this.bufferFragmentData(c, l, u, a) } if (g != null && (e = g.samples) != null && e.length) { const L = o({ id: r, frag: l, details: d }, g); i.trigger(S.FRAG_PARSING_METADATA, L) } if (f) { const A = o({ id: r, frag: l, details: d }, f); i.trigger(S.FRAG_PARSING_USERDATA, A) } } else this.fragmentTracker.removeFragment(l) } else this.resetWhenMissingContext(a) }, r._bufferInitSegment = function(t, e, r, i) { if (this.state === Ti) { e.video && delete e.video; const n = e.audio; if (n) { n.id = 'audio'; const a = t.audioCodec; this.log('Init audio buffer, container:' + n.container + ', codecs[level/parsed]=[' + a + '/' + n.codec + ']'), a && a.split(',').length === 1 && (n.levelCodec = a), this.hls.trigger(S.BUFFER_CODECS, e); const s = n.initSegment; if (s != null && s.byteLength) { const o = { type: 'audio', frag: r, part: null, chunkMeta: i, parent: r.type, data: s }; this.hls.trigger(S.BUFFER_APPENDING, o) } this.tickImmediate() } } }, r.loadFragment = function(e, r, i) { let n; const a = this.fragmentTracker.getState(e); if (this.fragCurrent = e, this.switchingTrack || a === Vr || a === Wr) if (e.sn === 'initSegment') this._loadInitSegment(e, r); else if ((n = r.details) != null && n.live && !this.initPTS[e.cc]) { this.log('Waiting for video PTS in continuity counter ' + e.cc + ' of live stream before loading audio fragment ' + e.sn + ' of level ' + this.trackId), this.state = Ri; const s = this.mainDetails; s && s.fragments[0].start !== r.details.fragments[0].start && ii(r.details, s) } else this.startFragRequested = !0, t.prototype.loadFragment.call(this, e, r, i); else this.clearTrackerIfNeeded(e) }, r.flushAudioIfNeeded = function(e) { const r = this.media; const i = this.bufferedTrack; const n = i == null ? void 0 : i.attrs; const a = e.attrs; r && n && (n.CHANNELS !== a.CHANNELS || i.name !== e.name || i.lang !== e.lang) && (this.log('Switching audio track : flushing all audio'), t.prototype.flushMainBuffer.call(this, 0, Number.POSITIVE_INFINITY, 'audio'), this.bufferedTrack = null) }, r.completeAudioSwitch = function(t) { const e = this.hls; this.flushAudioIfNeeded(t), this.bufferedTrack = t, this.switchingTrack = null, e.trigger(S.AUDIO_TRACK_SWITCHED, i({}, t)) }, e }(bi)); const jn = (function(t) { function e(e) { let r; return (r = t.call(this, e, '[audio-track-controller]') || this).tracks = [], r.groupIds = null, r.tracksInGroup = [], r.trackId = -1, r.currentTrack = null, r.selectDefaultTrack = !0, r.registerListeners(), r }l(e, t); const r = e.prototype; return r.registerListeners = function() { const t = this.hls; t.on(S.MANIFEST_LOADING, this.onManifestLoading, this), t.on(S.MANIFEST_PARSED, this.onManifestParsed, this), t.on(S.LEVEL_LOADING, this.onLevelLoading, this), t.on(S.LEVEL_SWITCHING, this.onLevelSwitching, this), t.on(S.AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this), t.on(S.ERROR, this.onError, this) }, r.unregisterListeners = function() { const t = this.hls; t.off(S.MANIFEST_LOADING, this.onManifestLoading, this), t.off(S.MANIFEST_PARSED, this.onManifestParsed, this), t.off(S.LEVEL_LOADING, this.onLevelLoading, this), t.off(S.LEVEL_SWITCHING, this.onLevelSwitching, this), t.off(S.AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this), t.off(S.ERROR, this.onError, this) }, r.destroy = function() { this.unregisterListeners(), this.tracks.length = 0, this.tracksInGroup.length = 0, this.currentTrack = null, t.prototype.destroy.call(this) }, r.onManifestLoading = function() { this.tracks = [], this.tracksInGroup = [], this.groupIds = null, this.currentTrack = null, this.trackId = -1, this.selectDefaultTrack = !0 }, r.onManifestParsed = function(t, e) { this.tracks = e.audioTracks || [] }, r.onAudioTrackLoaded = function(t, e) { const r = e.id; const i = e.groupId; const n = e.details; const a = this.tracksInGroup[r]; if (a && a.groupId === i) { const s = a.details; a.details = e.details, this.log('Audio track ' + r + ' "' + a.name + '" lang:' + a.lang + ' group:' + i + ' loaded [' + n.startSN + '-' + n.endSN + ']'), r === this.trackId && this.playlistLoaded(r, e, s) } else this.warn('Audio track with id:' + r + ' and group:' + i + ' not found in active group ' + (a == null ? void 0 : a.groupId)) }, r.onLevelLoading = function(t, e) { this.switchLevel(e.level) }, r.onLevelSwitching = function(t, e) { this.switchLevel(e.level) }, r.switchLevel = function(t) { const e = this.hls.levels[t]; if (e) { const r = e.audioGroups || null; const i = this.groupIds; let n = this.currentTrack; if (!r || (i == null ? void 0 : i.length) !== (r == null ? void 0 : r.length) || r != null && r.some(function(t) { return (i == null ? void 0 : i.indexOf(t)) === -1 })) { this.groupIds = r, this.trackId = -1, this.currentTrack = null; const a = this.tracks.filter(function(t) { return !r || r.indexOf(t.groupId) !== -1 }); if (a.length) this.selectDefaultTrack && !a.some(function(t) { return t.default }) && (this.selectDefaultTrack = !1), a.forEach(function(t, e) { t.id = e }); else if (!n && !this.tracksInGroup.length) return; this.tracksInGroup = a; const s = this.hls.config.audioPreference; if (!n && s) { const o = Nr(s, a, Br); if (o > -1)n = a[o]; else { const l = Nr(s, this.tracks); n = this.tracks[l] } } let u = this.findTrackId(n); u === -1 && n && (u = this.findTrackId(null)); const h = { audioTracks: a }; this.log('Updating audio tracks, ' + a.length + ' track(s) found in group(s): ' + (r == null ? void 0 : r.join(','))), this.hls.trigger(S.AUDIO_TRACKS_UPDATED, h); const d = this.trackId; if (u !== -1 && d === -1) this.setAudioTrack(u); else if (a.length && d === -1) { let c; const f = new Error('No audio track selected for current audio group-ID(s): ' + ((c = this.groupIds) == null ? void 0 : c.join(',')) + ' track count: ' + a.length); this.warn(f.message), this.hls.trigger(S.ERROR, { type: L.MEDIA_ERROR, details: A.AUDIO_TRACK_LOAD_ERROR, fatal: !0, error: f }) } } else this.shouldReloadPlaylist(n) && this.setAudioTrack(this.trackId) } }, r.onError = function(t, e) { !e.fatal && e.context && (e.context.type !== De || e.context.id !== this.trackId || this.groupIds && this.groupIds.indexOf(e.context.groupId) === -1 || (this.requestScheduled = -1, this.checkRetry(e))) }, r.setAudioOption = function(t) { const e = this.hls; if (e.config.audioPreference = t, t) { const r = this.allAudioTracks; if (this.selectDefaultTrack = !1, r.length) { const i = this.currentTrack; if (i && Ur(t, i, Br)) return i; const n = Nr(t, this.tracksInGroup, Br); if (n > -1) { const a = this.tracksInGroup[n]; return this.setAudioTrack(n), a } if (i) { let s = e.loadLevel; s === -1 && (s = e.firstAutoLevel); const o = (function(t, e, r, i, n) { const a = e[i]; const s = e.reduce(function(t, e, r) { let i = e.uri; return (t[i] || (t[i] = [])).push(r), t }, {})[a.uri]; s.length > 1 && (i = Math.max.apply(Math, s)); const o = a.videoRange; const l = a.frameRate; const u = a.codecSet.substring(0, 4); const h = Gr(e, i, function(e) { if (e.videoRange !== o || e.frameRate !== l || e.codecSet.substring(0, 4) !== u) return !1; let i = e.audioGroups; let a = r.filter(function(t) { return !i || -1 !== i.indexOf(t.groupId) }); return Nr(t, a, n) > -1 }); return h > -1 ? h : Gr(e, i, function(e) { const i = e.audioGroups; const a = r.filter(function(t) { return !i || -1 !== i.indexOf(t.groupId) }); return Nr(t, a, n) > -1 }) }(t, e.levels, r, s, Br)); if (o === -1) return null; e.nextLoadLevel = o } if (t.channels || t.audioCodec) { const l = Nr(t, r); if (l > -1) return r[l] } } } return null }, r.setAudioTrack = function(t) { const e = this.tracksInGroup; if (t < 0 || t >= e.length) this.warn('Invalid audio track id: ' + t); else { this.clearTimer(), this.selectDefaultTrack = !1; const r = this.currentTrack; const n = e[t]; const a = n.details && !n.details.live; if (!(t === this.trackId && n === r && a || (this.log('Switching to audio-track ' + t + ' "' + n.name + '" lang:' + n.lang + ' group:' + n.groupId + ' channels:' + n.channels), this.trackId = t, this.currentTrack = n, this.hls.trigger(S.AUDIO_TRACK_SWITCHING, i({}, n)), a))) { const s = this.switchParams(n.url, r == null ? void 0 : r.details, n.details); this.loadPlaylist(s) } } }, r.findTrackId = function(t) { for (var e = this.tracksInGroup, r = 0; r < e.length; r++) { const i = e[r]; if ((!this.selectDefaultTrack || i.default) && (!t || Ur(t, i, Br))) return r } if (t) { for (let n = t.name, a = t.lang, s = t.assocLang, o = t.characteristics, l = t.audioCodec, u = t.channels, h = 0; h < e.length; h++) if (Ur({ name: n, lang: a, assocLang: s, characteristics: o, audioCodec: l, channels: u }, e[h], Br)) return h; for (let d = 0; d < e.length; d++) { const c = e[d]; if (Vn(t.attrs, c.attrs, ['LANGUAGE', 'ASSOC-LANGUAGE', 'CHARACTERISTICS'])) return d } for (let f = 0; f < e.length; f++) { const g = e[f]; if (Vn(t.attrs, g.attrs, ['LANGUAGE'])) return f } } return -1 }, r.loadPlaylist = function(e) { const r = this.currentTrack; if (this.shouldLoadPlaylist(r) && r) { t.prototype.loadPlaylist.call(this); const i = r.id; const n = r.groupId; let a = r.url; if (e) try { a = e.addDirectives(a) } catch (t) { this.warn('Could not construct new URL with HLS Delivery Directives: ' + t) } this.log('loading audio-track playlist ' + i + ' "' + r.name + '" lang:' + r.lang + ' group:' + n), this.clearTimer(), this.hls.trigger(S.AUDIO_TRACK_LOADING, { url: a, id: i, groupId: n, deliveryDirectives: e || null }) } }, s(e, [{ key: 'allAudioTracks', get: function() { return this.tracks } }, { key: 'audioTracks', get: function() { return this.tracksInGroup } }, { key: 'audioTrack', get: function() { return this.trackId }, set: function(t) { this.selectDefaultTrack = !1, this.setAudioTrack(t) } }]), e }(wr)); const qn = (function(t) { function e(e, r, i) { let n; return (n = t.call(this, e, r, i, '[subtitle-stream-controller]', _e) || this).currentTrackId = -1, n.tracksBuffered = [], n.mainDetails = null, n._registerListeners(), n }l(e, t); const r = e.prototype; return r.onHandlerDestroying = function() { this._unregisterListeners(), t.prototype.onHandlerDestroying.call(this), this.mainDetails = null }, r._registerListeners = function() { const t = this.hls; t.on(S.MEDIA_ATTACHED, this.onMediaAttached, this), t.on(S.MEDIA_DETACHING, this.onMediaDetaching, this), t.on(S.MANIFEST_LOADING, this.onManifestLoading, this), t.on(S.LEVEL_LOADED, this.onLevelLoaded, this), t.on(S.ERROR, this.onError, this), t.on(S.SUBTITLE_TRACKS_UPDATED, this.onSubtitleTracksUpdated, this), t.on(S.SUBTITLE_TRACK_SWITCH, this.onSubtitleTrackSwitch, this), t.on(S.SUBTITLE_TRACK_LOADED, this.onSubtitleTrackLoaded, this), t.on(S.SUBTITLE_FRAG_PROCESSED, this.onSubtitleFragProcessed, this), t.on(S.BUFFER_FLUSHING, this.onBufferFlushing, this), t.on(S.FRAG_BUFFERED, this.onFragBuffered, this) }, r._unregisterListeners = function() { const t = this.hls; t.off(S.MEDIA_ATTACHED, this.onMediaAttached, this), t.off(S.MEDIA_DETACHING, this.onMediaDetaching, this), t.off(S.MANIFEST_LOADING, this.onManifestLoading, this), t.off(S.LEVEL_LOADED, this.onLevelLoaded, this), t.off(S.ERROR, this.onError, this), t.off(S.SUBTITLE_TRACKS_UPDATED, this.onSubtitleTracksUpdated, this), t.off(S.SUBTITLE_TRACK_SWITCH, this.onSubtitleTrackSwitch, this), t.off(S.SUBTITLE_TRACK_LOADED, this.onSubtitleTrackLoaded, this), t.off(S.SUBTITLE_FRAG_PROCESSED, this.onSubtitleFragProcessed, this), t.off(S.BUFFER_FLUSHING, this.onBufferFlushing, this), t.off(S.FRAG_BUFFERED, this.onFragBuffered, this) }, r.startLoad = function(t) { this.stopLoad(), this.state = vi, this.setInterval(500), this.nextLoadPosition = this.startPosition = this.lastCurrentTime = t, this.tick() }, r.onManifestLoading = function() { this.mainDetails = null, this.fragmentTracker.removeAllFragments() }, r.onMediaDetaching = function() { this.tracksBuffered = [], t.prototype.onMediaDetaching.call(this) }, r.onLevelLoaded = function(t, e) { this.mainDetails = e.details }, r.onSubtitleFragProcessed = function(t, e) { const r = e.frag; const i = e.success; if (this.fragPrevious = r, this.state = vi, i) { const n = this.tracksBuffered[this.currentTrackId]; if (n) { for (var a, s = r.start, o = 0; o < n.length; o++) if (s >= n[o].start && s <= n[o].end) { a = n[o]; break } const l = r.start + r.duration; a ? a.end = l : (a = { start: s, end: l }, n.push(a)), this.fragmentTracker.fragBuffered(r), this.fragBufferedComplete(r, null) } } }, r.onBufferFlushing = function(t, e) { const r = e.startOffset; const i = e.endOffset; if (r === 0 && i !== Number.POSITIVE_INFINITY) { const n = i - 1; if (n <= 0) return; e.endOffsetSubtitles = Math.max(0, n), this.tracksBuffered.forEach(function(t) { for (let e = 0; e < t.length;) if (t[e].end <= n)t.shift(); else { if (!(t[e].start < n)) break; t[e].start = n, e++ } }), this.fragmentTracker.removeFragmentsInRange(r, n, _e) } }, r.onFragBuffered = function(t, e) { let r; this.loadedmetadata || e.frag.type !== we || (r = this.media) != null && r.buffered.length && (this.loadedmetadata = !0) }, r.onError = function(t, e) { const r = e.frag; (r == null ? void 0 : r.type) === _e && (this.fragCurrent && this.fragCurrent.abortRequests(), this.state !== gi && (this.state = vi)) }, r.onSubtitleTracksUpdated = function(t, e) { const r = this; const i = e.subtitleTracks; this.levels && Hn(this.levels, i) ? this.levels = i.map(function(t) { return new rr(t) }) : (this.tracksBuffered = [], this.levels = i.map(function(t) { const e = new rr(t); return r.tracksBuffered[e.id] = [], e }), this.fragmentTracker.removeFragmentsInRange(0, Number.POSITIVE_INFINITY, _e), this.fragPrevious = null, this.mediaBuffer = null) }, r.onSubtitleTrackSwitch = function(t, e) { let r; if (this.currentTrackId = e.id, (r = this.levels) != null && r.length && this.currentTrackId !== -1) { const i = this.levels[this.currentTrackId]; i != null && i.details ? this.mediaBuffer = this.mediaBufferTimeRanges : this.mediaBuffer = null, i && this.setInterval(500) } else this.clearInterval() }, r.onSubtitleTrackLoaded = function(t, e) { let r; const i = this.currentTrackId; const n = this.levels; const a = e.details; const s = e.id; if (n) { const o = n[s]; if (!(s >= n.length) && o) { this.log('Subtitle track ' + s + ' loaded [' + a.startSN + ',' + a.endSN + ']' + (a.lastPartSn ? '[part-' + a.lastPartSn + '-' + a.lastPartIndex + ']' : '') + ',duration:' + a.totalduration), this.mediaBuffer = this.mediaBufferTimeRanges; let l = 0; if (a.live || (r = o.details) != null && r.live) { const u = this.mainDetails; if (a.deltaUpdateFailed || !u) return; let h; const d = u.fragments[0]; o.details ? (l = this.alignPlaylists(a, o.details, (h = this.levelLastLoaded) == null ? void 0 : h.details)) === 0 && d && lr(a, l = d.start) : a.hasProgramDateTime && u.hasProgramDateTime ? (ii(a, u), l = a.fragments[0].start) : d && lr(a, l = d.start) }o.details = a, this.levelLastLoaded = o, s === i && (this.startFragRequested || !this.mainDetails && a.live || this.setStartPosition(this.mainDetails || a, l), this.tick(), a.live && !this.fragCurrent && this.media && this.state === vi && (yr(null, a.fragments, this.media.currentTime, 0) || (this.warn('Subtitle playlist not aligned with playback'), o.details = void 0))) } } else this.warn('Subtitle tracks were reset while loading level ' + s) }, r._handleFragmentLoadComplete = function(t) { const e = this; const r = t.frag; const i = t.payload; const n = r.decryptdata; const a = this.hls; if (!this.fragContextChanged(r) && i && i.byteLength > 0 && n != null && n.key && n.iv && n.method === 'AES-128') { const s = performance.now(); this.decrypter.decrypt(new Uint8Array(i), n.key.buffer, n.iv.buffer).catch(function(t) { throw a.trigger(S.ERROR, { type: L.MEDIA_ERROR, details: A.FRAG_DECRYPT_ERROR, fatal: !1, error: t, reason: t.message, frag: r }), t }).then(function(t) { const e = performance.now(); a.trigger(S.FRAG_DECRYPTED, { frag: r, payload: t, stats: { tstart: s, tdecrypt: e } }) }).catch(function(t) { e.warn(t.name + ': ' + t.message), e.state = vi }) } }, r.doTick = function() { if (this.media) { if (this.state === vi) { const t = this.currentTrackId; const e = this.levels; const r = e == null ? void 0 : e[t]; if (!r || !e.length || !r.details) return; const i = this.config; const n = this.getLoadPosition(); const a = Jr.bufferedInfo(this.tracksBuffered[this.currentTrackId] || [], n, i.maxBufferHole); const s = a.end; const o = a.len; const l = this.getFwdBufferInfo(this.media, we); const u = r.details; if (o > this.getMaxBufferLength(l == null ? void 0 : l.len) + u.levelTargetDuration) return; const h = u.fragments; const d = h.length; const c = u.edge; let f = null; const g = this.fragPrevious; if (s < c) { const v = i.maxFragLookUpTolerance; const m = s > c - v ? 0 : v; !(f = yr(g, h, Math.max(h[0].start, s), m)) && g && g.start < h[0].start && (f = h[0]) } else f = h[d - 1]; if (!f) return; if ((f = this.mapToInitFragWhenRequired(f)).sn !== 'initSegment') { const p = h[f.sn - u.startSN - 1]; p && p.cc === f.cc && this.fragmentTracker.getState(p) === Vr && (f = p) } this.fragmentTracker.getState(f) === Vr && this.loadFragment(f, r, s) } } else this.state = vi }, r.getMaxBufferLength = function(e) { const r = t.prototype.getMaxBufferLength.call(this); return e ? Math.max(r, e) : r }, r.loadFragment = function(e, r, i) { this.fragCurrent = e, e.sn === 'initSegment' ? this._loadInitSegment(e, r) : (this.startFragRequested = !0, t.prototype.loadFragment.call(this, e, r, i)) }, s(e, [{ key: 'mediaBufferTimeRanges', get: function() { return new Xn(this.tracksBuffered[this.currentTrackId] || []) } }]), e }(bi)); var Xn = function(t) { this.buffered = void 0; const e = function(e, r, i) { if ((r >>>= 0) > i - 1) throw new DOMException('Failed to execute \'' + e + '\' on \'TimeRanges\': The index provided (' + r + ') is greater than the maximum bound (' + i + ')'); return t[r][e] }; this.buffered = { get length() { return t.length }, end: function(r) { return e('end', r, t.length) }, start: function(r) { return e('start', r, t.length) } } }; const zn = (function(t) { function e(e) { let r; return (r = t.call(this, e, '[subtitle-track-controller]') || this).media = null, r.tracks = [], r.groupIds = null, r.tracksInGroup = [], r.trackId = -1, r.currentTrack = null, r.selectDefaultTrack = !0, r.queuedDefaultTrack = -1, r.asyncPollTrackChange = function() { return r.pollTrackChange(0) }, r.useTextTrackPolling = !1, r.subtitlePollingInterval = -1, r._subtitleDisplay = !0, r.onTextTracksChanged = function() { if (r.useTextTrackPolling || self.clearInterval(r.subtitlePollingInterval), r.media && r.hls.config.renderTextTracksNatively) { for (var t = null, e = Be(r.media.textTracks), i = 0; i < e.length; i++) if (e[i].mode === 'hidden')t = e[i]; else if (e[i].mode === 'showing') { t = e[i]; break } const n = r.findTrackForTextTrack(t); r.subtitleTrack !== n && r.setSubtitleTrack(n) } }, r.registerListeners(), r }l(e, t); const r = e.prototype; return r.destroy = function() { this.unregisterListeners(), this.tracks.length = 0, this.tracksInGroup.length = 0, this.currentTrack = null, this.onTextTracksChanged = this.asyncPollTrackChange = null, t.prototype.destroy.call(this) }, r.registerListeners = function() { const t = this.hls; t.on(S.MEDIA_ATTACHED, this.onMediaAttached, this), t.on(S.MEDIA_DETACHING, this.onMediaDetaching, this), t.on(S.MANIFEST_LOADING, this.onManifestLoading, this), t.on(S.MANIFEST_PARSED, this.onManifestParsed, this), t.on(S.LEVEL_LOADING, this.onLevelLoading, this), t.on(S.LEVEL_SWITCHING, this.onLevelSwitching, this), t.on(S.SUBTITLE_TRACK_LOADED, this.onSubtitleTrackLoaded, this), t.on(S.ERROR, this.onError, this) }, r.unregisterListeners = function() { const t = this.hls; t.off(S.MEDIA_ATTACHED, this.onMediaAttached, this), t.off(S.MEDIA_DETACHING, this.onMediaDetaching, this), t.off(S.MANIFEST_LOADING, this.onManifestLoading, this), t.off(S.MANIFEST_PARSED, this.onManifestParsed, this), t.off(S.LEVEL_LOADING, this.onLevelLoading, this), t.off(S.LEVEL_SWITCHING, this.onLevelSwitching, this), t.off(S.SUBTITLE_TRACK_LOADED, this.onSubtitleTrackLoaded, this), t.off(S.ERROR, this.onError, this) }, r.onMediaAttached = function(t, e) { this.media = e.media, this.media && (this.queuedDefaultTrack > -1 && (this.subtitleTrack = this.queuedDefaultTrack, this.queuedDefaultTrack = -1), this.useTextTrackPolling = !(this.media.textTracks && 'onchange' in this.media.textTracks), this.useTextTrackPolling ? this.pollTrackChange(500) : this.media.textTracks.addEventListener('change', this.asyncPollTrackChange)) }, r.pollTrackChange = function(t) { self.clearInterval(this.subtitlePollingInterval), this.subtitlePollingInterval = self.setInterval(this.onTextTracksChanged, t) }, r.onMediaDetaching = function() { this.media && (self.clearInterval(this.subtitlePollingInterval), this.useTextTrackPolling || this.media.textTracks.removeEventListener('change', this.asyncPollTrackChange), this.trackId > -1 && (this.queuedDefaultTrack = this.trackId), Be(this.media.textTracks).forEach(function(t) { Ne(t) }), this.subtitleTrack = -1, this.media = null) }, r.onManifestLoading = function() { this.tracks = [], this.groupIds = null, this.tracksInGroup = [], this.trackId = -1, this.currentTrack = null, this.selectDefaultTrack = !0 }, r.onManifestParsed = function(t, e) { this.tracks = e.subtitleTracks }, r.onSubtitleTrackLoaded = function(t, e) { const r = e.id; const i = e.groupId; const n = e.details; const a = this.tracksInGroup[r]; if (a && a.groupId === i) { const s = a.details; a.details = e.details, this.log('Subtitle track ' + r + ' "' + a.name + '" lang:' + a.lang + ' group:' + i + ' loaded [' + n.startSN + '-' + n.endSN + ']'), r === this.trackId && this.playlistLoaded(r, e, s) } else this.warn('Subtitle track with id:' + r + ' and group:' + i + ' not found in active group ' + (a == null ? void 0 : a.groupId)) }, r.onLevelLoading = function(t, e) { this.switchLevel(e.level) }, r.onLevelSwitching = function(t, e) { this.switchLevel(e.level) }, r.switchLevel = function(t) { const e = this.hls.levels[t]; if (e) { const r = e.subtitleGroups || null; const i = this.groupIds; let n = this.currentTrack; if (!r || (i == null ? void 0 : i.length) !== (r == null ? void 0 : r.length) || r != null && r.some(function(t) { return (i == null ? void 0 : i.indexOf(t)) === -1 })) { this.groupIds = r, this.trackId = -1, this.currentTrack = null; const a = this.tracks.filter(function(t) { return !r || r.indexOf(t.groupId) !== -1 }); if (a.length) this.selectDefaultTrack && !a.some(function(t) { return t.default }) && (this.selectDefaultTrack = !1), a.forEach(function(t, e) { t.id = e }); else if (!n && !this.tracksInGroup.length) return; this.tracksInGroup = a; const s = this.hls.config.subtitlePreference; if (!n && s) { this.selectDefaultTrack = !1; const o = Nr(s, a); if (o > -1)n = a[o]; else { const l = Nr(s, this.tracks); n = this.tracks[l] } } let u = this.findTrackId(n); u === -1 && n && (u = this.findTrackId(null)); const h = { subtitleTracks: a }; this.log('Updating subtitle tracks, ' + a.length + ' track(s) found in "' + (r == null ? void 0 : r.join(',')) + '" group-id'), this.hls.trigger(S.SUBTITLE_TRACKS_UPDATED, h), u !== -1 && this.trackId === -1 && this.setSubtitleTrack(u) } else this.shouldReloadPlaylist(n) && this.setSubtitleTrack(this.trackId) } }, r.findTrackId = function(t) { for (var e = this.tracksInGroup, r = this.selectDefaultTrack, i = 0; i < e.length; i++) { const n = e[i]; if ((!r || n.default) && (r || t) && (!t || Ur(n, t))) return i } if (t) { for (let a = 0; a < e.length; a++) { const s = e[a]; if (Vn(t.attrs, s.attrs, ['LANGUAGE', 'ASSOC-LANGUAGE', 'CHARACTERISTICS'])) return a } for (let o = 0; o < e.length; o++) { const l = e[o]; if (Vn(t.attrs, l.attrs, ['LANGUAGE'])) return o } } return -1 }, r.findTrackForTextTrack = function(t) { if (t) for (let e = this.tracksInGroup, r = 0; r < e.length; r++) if (Yn(e[r], t)) return r; return -1 }, r.onError = function(t, e) { !e.fatal && e.context && (e.context.type !== Ie || e.context.id !== this.trackId || this.groupIds && this.groupIds.indexOf(e.context.groupId) === -1 || this.checkRetry(e)) }, r.setSubtitleOption = function(t) { if (this.hls.config.subtitlePreference = t, t) { const e = this.allSubtitleTracks; if (this.selectDefaultTrack = !1, e.length) { const r = this.currentTrack; if (r && Ur(t, r)) return r; const i = Nr(t, this.tracksInGroup); if (i > -1) { const n = this.tracksInGroup[i]; return this.setSubtitleTrack(i), n } if (r) return null; const a = Nr(t, e); if (a > -1) return e[a] } } return null }, r.loadPlaylist = function(e) { t.prototype.loadPlaylist.call(this); const r = this.currentTrack; if (this.shouldLoadPlaylist(r) && r) { const i = r.id; const n = r.groupId; let a = r.url; if (e) try { a = e.addDirectives(a) } catch (t) { this.warn('Could not construct new URL with HLS Delivery Directives: ' + t) } this.log('Loading subtitle playlist for id ' + i), this.hls.trigger(S.SUBTITLE_TRACK_LOADING, { url: a, id: i, groupId: n, deliveryDirectives: e || null }) } }, r.toggleTrackModes = function() { const t = this.media; if (t) { let e; const r = Be(t.textTracks); const i = this.currentTrack; if (i && ((e = r.filter(function(t) { return Yn(i, t) })[0]) || this.warn('Unable to find subtitle TextTrack with name "' + i.name + '" and language "' + i.lang + '"')), [].slice.call(r).forEach(function(t) { t.mode !== 'disabled' && t !== e && (t.mode = 'disabled') }), e) { const n = this.subtitleDisplay ? 'showing' : 'hidden'; e.mode !== n && (e.mode = n) } } }, r.setSubtitleTrack = function(t) { const e = this.tracksInGroup; if (this.media) if (t < -1 || t >= e.length || !y(t)) this.warn('Invalid subtitle track id: ' + t); else { this.clearTimer(), this.selectDefaultTrack = !1; const r = this.currentTrack; const i = e[t] || null; if (this.trackId = t, this.currentTrack = i, this.toggleTrackModes(), i) { const n = !!i.details && !i.details.live; if (t !== this.trackId || i !== r || !n) { this.log('Switching to subtitle-track ' + t + (i ? ' "' + i.name + '" lang:' + i.lang + ' group:' + i.groupId : '')); const a = i.id; const s = i.groupId; const o = void 0 === s ? '' : s; const l = i.name; const u = i.type; const h = i.url; this.hls.trigger(S.SUBTITLE_TRACK_SWITCH, { id: a, groupId: o, name: l, type: u, url: h }); const d = this.switchParams(i.url, r == null ? void 0 : r.details, i.details); this.loadPlaylist(d) } } else this.hls.trigger(S.SUBTITLE_TRACK_SWITCH, { id: t }) } else this.queuedDefaultTrack = t }, s(e, [{ key: 'subtitleDisplay', get: function() { return this._subtitleDisplay }, set: function(t) { this._subtitleDisplay = t, this.trackId > -1 && this.toggleTrackModes() } }, { key: 'allSubtitleTracks', get: function() { return this.tracks } }, { key: 'subtitleTracks', get: function() { return this.tracksInGroup } }, { key: 'subtitleTrack', get: function() { return this.trackId }, set: function(t) { this.selectDefaultTrack = !1, this.setSubtitleTrack(t) } }]), e }(wr)); const Qn = (function() { function t(t) { this.buffers = void 0, this.queues = { video: [], audio: [], audiovideo: [] }, this.buffers = t } const e = t.prototype; return e.append = function(t, e, r) { const i = this.queues[e]; i.push(t), i.length !== 1 || r || this.executeNext(e) }, e.insertAbort = function(t, e) { this.queues[e].unshift(t), this.executeNext(e) }, e.appendBlocker = function(t) { let e; const r = new Promise(function(t) { e = t }); const i = { execute: e, onStart: function() {}, onComplete: function() {}, onError: function() {} }; return this.append(i, t), r }, e.executeNext = function(t) { const e = this.queues[t]; if (e.length) { const r = e[0]; try { r.execute() } catch (e) { w.warn('[buffer-operation-queue]: Exception executing "' + t + '" SourceBuffer operation: ' + e), r.onError(e); const i = this.buffers[t]; i != null && i.updating || this.shiftAndExecuteNext(t) } } }, e.shiftAndExecuteNext = function(t) { this.queues[t].shift(), this.executeNext(t) }, e.current = function(t) { return this.queues[t][0] }, t }()); const Jn = /(avc[1234]|hvc1|hev1|dvh[1e]|vp09|av01)(?:\.[^.,]+)+/; const $n = (function() { function t(t) { const e = this; this.details = null, this._objectUrl = null, this.operationQueue = void 0, this.listeners = void 0, this.hls = void 0, this.bufferCodecEventsExpected = 0, this._bufferCodecEventsTotal = 0, this.media = null, this.mediaSource = null, this.lastMpegAudioChunk = null, this.appendSource = void 0, this.appendErrors = { audio: 0, video: 0, audiovideo: 0 }, this.tracks = {}, this.pendingTracks = {}, this.sourceBuffer = void 0, this.log = void 0, this.warn = void 0, this.error = void 0, this._onEndStreaming = function(t) { e.hls && e.hls.pauseBuffering() }, this._onStartStreaming = function(t) { e.hls && e.hls.resumeBuffering() }, this._onMediaSourceOpen = function() { const t = e.media; const r = e.mediaSource; e.log('Media source opened'), t && (t.removeEventListener('emptied', e._onMediaEmptied), e.updateMediaElementDuration(), e.hls.trigger(S.MEDIA_ATTACHED, { media: t, mediaSource: r })), r && r.removeEventListener('sourceopen', e._onMediaSourceOpen), e.checkPendingTracks() }, this._onMediaSourceClose = function() { e.log('Media source closed') }, this._onMediaSourceEnded = function() { e.log('Media source ended') }, this._onMediaEmptied = function() { const t = e.mediaSrc; const r = e._objectUrl; t !== r && w.error('Media element src was set while attaching MediaSource (' + r + ' > ' + t + ')') }, this.hls = t; let r; const i = '[buffer-controller]'; this.appendSource = (r = ee(t.config.preferManagedMediaSource), typeof self !== 'undefined' && r === self.ManagedMediaSource), this.log = w.log.bind(w, i), this.warn = w.warn.bind(w, i), this.error = w.error.bind(w, i), this._initSourceBuffer(), this.registerListeners() } const e = t.prototype; return e.hasSourceTypes = function() { return this.getSourceBufferTypes().length > 0 || Object.keys(this.pendingTracks).length > 0 }, e.destroy = function() { this.unregisterListeners(), this.details = null, this.lastMpegAudioChunk = null, this.hls = null }, e.registerListeners = function() { const t = this.hls; t.on(S.MEDIA_ATTACHING, this.onMediaAttaching, this), t.on(S.MEDIA_DETACHING, this.onMediaDetaching, this), t.on(S.MANIFEST_LOADING, this.onManifestLoading, this), t.on(S.MANIFEST_PARSED, this.onManifestParsed, this), t.on(S.BUFFER_RESET, this.onBufferReset, this), t.on(S.BUFFER_APPENDING, this.onBufferAppending, this), t.on(S.BUFFER_CODECS, this.onBufferCodecs, this), t.on(S.BUFFER_EOS, this.onBufferEos, this), t.on(S.BUFFER_FLUSHING, this.onBufferFlushing, this), t.on(S.LEVEL_UPDATED, this.onLevelUpdated, this), t.on(S.FRAG_PARSED, this.onFragParsed, this), t.on(S.FRAG_CHANGED, this.onFragChanged, this) }, e.unregisterListeners = function() { const t = this.hls; t.off(S.MEDIA_ATTACHING, this.onMediaAttaching, this), t.off(S.MEDIA_DETACHING, this.onMediaDetaching, this), t.off(S.MANIFEST_LOADING, this.onManifestLoading, this), t.off(S.MANIFEST_PARSED, this.onManifestParsed, this), t.off(S.BUFFER_RESET, this.onBufferReset, this), t.off(S.BUFFER_APPENDING, this.onBufferAppending, this), t.off(S.BUFFER_CODECS, this.onBufferCodecs, this), t.off(S.BUFFER_EOS, this.onBufferEos, this), t.off(S.BUFFER_FLUSHING, this.onBufferFlushing, this), t.off(S.LEVEL_UPDATED, this.onLevelUpdated, this), t.off(S.FRAG_PARSED, this.onFragParsed, this), t.off(S.FRAG_CHANGED, this.onFragChanged, this) }, e._initSourceBuffer = function() { this.sourceBuffer = {}, this.operationQueue = new Qn(this.sourceBuffer), this.listeners = { audio: [], video: [], audiovideo: [] }, this.appendErrors = { audio: 0, video: 0, audiovideo: 0 }, this.lastMpegAudioChunk = null }, e.onManifestLoading = function() { this.bufferCodecEventsExpected = this._bufferCodecEventsTotal = 0, this.details = null }, e.onManifestParsed = function(t, e) { let r = 2; (e.audio && !e.video || !e.altAudio) && (r = 1), this.bufferCodecEventsExpected = this._bufferCodecEventsTotal = r, this.log(this.bufferCodecEventsExpected + ' bufferCodec event(s) expected') }, e.onMediaAttaching = function(t, e) { const r = this.media = e.media; const i = ee(this.appendSource); if (r && i) { let n; const a = this.mediaSource = new i(); this.log('created media source: ' + ((n = a.constructor) == null ? void 0 : n.name)), a.addEventListener('sourceopen', this._onMediaSourceOpen), a.addEventListener('sourceended', this._onMediaSourceEnded), a.addEventListener('sourceclose', this._onMediaSourceClose), this.appendSource && (a.addEventListener('startstreaming', this._onStartStreaming), a.addEventListener('endstreaming', this._onEndStreaming)); const s = this._objectUrl = self.URL.createObjectURL(a); if (this.appendSource) try { r.removeAttribute('src'); const o = self.ManagedMediaSource; r.disableRemotePlayback = r.disableRemotePlayback || o && a instanceof o, Zn(r), (function(t, e) { const r = self.document.createElement('source'); r.type = 'video/mp4', r.src = e, t.appendChild(r) }(r, s)), r.load() } catch (t) { r.src = s } else r.src = s; r.addEventListener('emptied', this._onMediaEmptied) } }, e.onMediaDetaching = function() { const t = this.media; const e = this.mediaSource; const r = this._objectUrl; if (e) { if (this.log('media source detaching'), e.readyState === 'open') try { e.endOfStream() } catch (t) { this.warn('onMediaDetaching: ' + t.message + ' while calling endOfStream') } this.onBufferReset(), e.removeEventListener('sourceopen', this._onMediaSourceOpen), e.removeEventListener('sourceended', this._onMediaSourceEnded), e.removeEventListener('sourceclose', this._onMediaSourceClose), this.appendSource && (e.removeEventListener('startstreaming', this._onStartStreaming), e.removeEventListener('endstreaming', this._onEndStreaming)), t && (t.removeEventListener('emptied', this._onMediaEmptied), r && self.URL.revokeObjectURL(r), this.mediaSrc === r ? (t.removeAttribute('src'), this.appendSource && Zn(t), t.load()) : this.warn('media|source.src was changed by a third party - skip cleanup')), this.mediaSource = null, this.media = null, this._objectUrl = null, this.bufferCodecEventsExpected = this._bufferCodecEventsTotal, this.pendingTracks = {}, this.tracks = {} } this.hls.trigger(S.MEDIA_DETACHED, void 0) }, e.onBufferReset = function() { const t = this; this.getSourceBufferTypes().forEach(function(e) { t.resetBuffer(e) }), this._initSourceBuffer() }, e.resetBuffer = function(t) { const e = this.sourceBuffer[t]; try { let r; e && (this.removeBufferListeners(t), this.sourceBuffer[t] = void 0, (r = this.mediaSource) != null && r.sourceBuffers.length && this.mediaSource.removeSourceBuffer(e)) } catch (e) { this.warn('onBufferReset ' + t, e) } }, e.onBufferCodecs = function(t, e) { const r = this; const i = this.getSourceBufferTypes().length; const n = Object.keys(e); if (n.forEach(function(t) { if (i) { const n = r.tracks[t]; if (n && typeof n.buffer.changeType === 'function') { let a; const s = e[t]; const o = s.id; const l = s.codec; const u = s.levelCodec; const h = s.container; const d = s.metadata; const c = de(n.codec, n.levelCodec); const f = c == null ? void 0 : c.replace(Jn, '$1'); let g = de(l, u); const v = (a = g) == null ? void 0 : a.replace(Jn, '$1'); if (g && f !== v) { t.slice(0, 5) === 'audio' && (g = he(g, r.appendSource)); const m = h + ';codecs=' + g; r.appendChangeType(t, m), r.log('switching codec ' + c + ' to ' + g), r.tracks[t] = { buffer: n.buffer, codec: l, container: h, levelCodec: u, metadata: d, id: o } } } } else r.pendingTracks[t] = e[t] }), !i) { const a = Math.max(this.bufferCodecEventsExpected - 1, 0); this.bufferCodecEventsExpected !== a && (this.log(a + ' bufferCodec event(s) expected ' + n.join(',')), this.bufferCodecEventsExpected = a), this.mediaSource && this.mediaSource.readyState === 'open' && this.checkPendingTracks() } }, e.appendChangeType = function(t, e) { const r = this; const i = this.operationQueue; const n = { execute: function() { const n = r.sourceBuffer[t]; n && (r.log('changing ' + t + ' sourceBuffer type to ' + e), n.changeType(e)), i.shiftAndExecuteNext(t) }, onStart: function() {}, onComplete: function() {}, onError: function(e) { r.warn('Failed to change ' + t + ' SourceBuffer type', e) } }; i.append(n, t, !!this.pendingTracks[t]) }, e.onBufferAppending = function(t, e) { const r = this; const i = this.hls; const n = this.operationQueue; const a = this.tracks; const s = e.data; const o = e.type; const l = e.frag; const u = e.part; const h = e.chunkMeta; const d = h.buffering[o]; const c = self.performance.now(); d.start = c; const f = l.stats.buffering; const g = u ? u.stats.buffering : null; f.start === 0 && (f.start = c), g && g.start === 0 && (g.start = c); const v = a.audio; let m = !1; o === 'audio' && (v == null ? void 0 : v.container) === 'audio/mpeg' && (m = !this.lastMpegAudioChunk || h.id === 1 || this.lastMpegAudioChunk.sn !== h.sn, this.lastMpegAudioChunk = h); const p = l.start; const y = { execute: function() { if (d.executeStart = self.performance.now(), m) { const t = r.sourceBuffer[o]; if (t) { const e = p - t.timestampOffset; Math.abs(e) >= 0.1 && (r.log('Updating audio SourceBuffer timestampOffset to ' + p + ' (delta: ' + e + ') sn: ' + l.sn + ')'), t.timestampOffset = p) } }r.appendExecutor(s, o) }, onStart: function() {}, onComplete: function() { const t = self.performance.now(); d.executeEnd = d.end = t, f.first === 0 && (f.first = t), g && g.first === 0 && (g.first = t); const e = r.sourceBuffer; const i = {}; for (const n in e)i[n] = Jr.getBuffered(e[n]); r.appendErrors[o] = 0, o === 'audio' || o === 'video' ? r.appendErrors.audiovideo = 0 : (r.appendErrors.audio = 0, r.appendErrors.video = 0), r.hls.trigger(S.BUFFER_APPENDED, { type: o, frag: l, part: u, chunkMeta: h, parent: l.type, timeRanges: i }) }, onError: function(t) { const e = { type: L.MEDIA_ERROR, parent: l.type, details: A.BUFFER_APPEND_ERROR, sourceBufferName: o, frag: l, part: u, chunkMeta: h, error: t, err: t, fatal: !1 }; if (t.code === DOMException.QUOTA_EXCEEDED_ERR)e.details = A.BUFFER_FULL_ERROR; else { const n = ++r.appendErrors[o]; e.details = A.BUFFER_APPEND_ERROR, r.warn('Failed ' + n + '/' + i.config.appendErrorMaxRetry + ' times to append segment in "' + o + '" sourceBuffer'), n >= i.config.appendErrorMaxRetry && (e.fatal = !0) }i.trigger(S.ERROR, e) } }; n.append(y, o, !!this.pendingTracks[o]) }, e.onBufferFlushing = function(t, e) { const r = this; const i = this.operationQueue; const n = function(t) { return { execute: r.removeExecutor.bind(r, t, e.startOffset, e.endOffset), onStart: function() {}, onComplete: function() { r.hls.trigger(S.BUFFER_FLUSHED, { type: t }) }, onError: function(e) { r.warn('Failed to remove from ' + t + ' SourceBuffer', e) } } }; e.type ? i.append(n(e.type), e.type) : this.getSourceBufferTypes().forEach(function(t) { i.append(n(t), t) }) }, e.onFragParsed = function(t, e) { const r = this; const i = e.frag; const n = e.part; const a = []; const s = n ? n.elementaryStreams : i.elementaryStreams; s[U] ? a.push('audiovideo') : (s[O] && a.push('audio'), s[N] && a.push('video')), a.length === 0 && this.warn('Fragments must have at least one ElementaryStreamType set. type: ' + i.type + ' level: ' + i.level + ' sn: ' + i.sn), this.blockBuffers(function() { const t = self.performance.now(); i.stats.buffering.end = t, n && (n.stats.buffering.end = t); const e = n ? n.stats : i.stats; r.hls.trigger(S.FRAG_BUFFERED, { frag: i, part: n, stats: e, id: i.type }) }, a) }, e.onFragChanged = function(t, e) { this.trimBuffers() }, e.onBufferEos = function(t, e) { const r = this; this.getSourceBufferTypes().reduce(function(t, i) { const n = r.sourceBuffer[i]; return !n || e.type && e.type !== i || (n.ending = !0, n.ended || (n.ended = !0, r.log(i + ' sourceBuffer now EOS'))), t && !(n && !n.ended) }, !0) && (this.log('Queueing mediaSource.endOfStream()'), this.blockBuffers(function() { r.getSourceBufferTypes().forEach(function(t) { const e = r.sourceBuffer[t]; e && (e.ending = !1) }); const t = r.mediaSource; t && t.readyState === 'open' ? (r.log('Calling mediaSource.endOfStream()'), t.endOfStream()) : t && r.log('Could not call mediaSource.endOfStream(). mediaSource.readyState: ' + t.readyState) })) }, e.onLevelUpdated = function(t, e) { const r = e.details; r.fragments.length && (this.details = r, this.getSourceBufferTypes().length ? this.blockBuffers(this.updateMediaElementDuration.bind(this)) : this.updateMediaElementDuration()) }, e.trimBuffers = function() { const t = this.hls; const e = this.details; const r = this.media; if (r && e !== null && this.getSourceBufferTypes().length) { const i = t.config; const n = r.currentTime; const a = e.levelTargetDuration; const s = e.live && i.liveBackBufferLength !== null ? i.liveBackBufferLength : i.backBufferLength; if (y(s) && s > 0) { const o = Math.max(s, a); const l = Math.floor(n / a) * a - o; this.flushBackBuffer(n, a, l) } if (y(i.frontBufferFlushThreshold) && i.frontBufferFlushThreshold > 0) { const u = Math.max(i.maxBufferLength, i.frontBufferFlushThreshold); const h = Math.max(u, a); const d = Math.floor(n / a) * a + h; this.flushFrontBuffer(n, a, d) } } }, e.flushBackBuffer = function(t, e, r) { const i = this; const n = this.details; const a = this.sourceBuffer; this.getSourceBufferTypes().forEach(function(s) { const o = a[s]; if (o) { const l = Jr.getBuffered(o); if (l.length > 0 && r > l.start(0)) { if (i.hls.trigger(S.BACK_BUFFER_REACHED, { bufferEnd: r }), n != null && n.live)i.hls.trigger(S.LIVE_BACK_BUFFER_REACHED, { bufferEnd: r }); else if (o.ended && l.end(l.length - 1) - t < 2 * e) return void i.log('Cannot flush ' + s + ' back buffer while SourceBuffer is in ended state'); i.hls.trigger(S.BUFFER_FLUSHING, { startOffset: 0, endOffset: r, type: s }) } } }) }, e.flushFrontBuffer = function(t, e, r) { const i = this; const n = this.sourceBuffer; this.getSourceBufferTypes().forEach(function(a) { const s = n[a]; if (s) { const o = Jr.getBuffered(s); const l = o.length; if (l < 2) return; const u = o.start(l - 1); const h = o.end(l - 1); if (r > u || t >= u && t <= h) return; if (s.ended && t - h < 2 * e) return void i.log('Cannot flush ' + a + ' front buffer while SourceBuffer is in ended state'); i.hls.trigger(S.BUFFER_FLUSHING, { startOffset: u, endOffset: 1 / 0, type: a }) } }) }, e.updateMediaElementDuration = function() { if (this.details && this.media && this.mediaSource && this.mediaSource.readyState === 'open') { const t = this.details; const e = this.hls; const r = this.media; const i = this.mediaSource; const n = t.fragments[0].start + t.totalduration; const a = r.duration; const s = y(i.duration) ? i.duration : 0; t.live && e.config.liveDurationInfinity ? (i.duration = 1 / 0, this.updateSeekableRange(t)) : (n > s && n > a || !y(a)) && (this.log('Updating Media Source duration to ' + n.toFixed(3)), i.duration = n) } }, e.updateSeekableRange = function(t) { const e = this.mediaSource; const r = t.fragments; if (r.length && t.live && e != null && e.setLiveSeekableRange) { const i = Math.max(0, r[0].start); const n = Math.max(i, i + t.totalduration); this.log('Media Source duration is set to ' + e.duration + '. Setting seekable range to ' + i + '-' + n + '.'), e.setLiveSeekableRange(i, n) } }, e.checkPendingTracks = function() { const t = this.bufferCodecEventsExpected; const e = this.operationQueue; const r = this.pendingTracks; const i = Object.keys(r).length; if (i && (!t || i === 2 || 'audiovideo' in r)) { this.createSourceBuffers(r), this.pendingTracks = {}; const n = this.getSourceBufferTypes(); if (n.length) this.hls.trigger(S.BUFFER_CREATED, { tracks: this.tracks }), n.forEach(function(t) { e.executeNext(t) }); else { const a = new Error('could not create source buffer for media codec(s)'); this.hls.trigger(S.ERROR, { type: L.MEDIA_ERROR, details: A.BUFFER_INCOMPATIBLE_CODECS_ERROR, fatal: !0, error: a, reason: a.message }) } } }, e.createSourceBuffers = function(t) { const e = this; const r = this.sourceBuffer; const i = this.mediaSource; if (!i) throw Error('createSourceBuffers called when mediaSource was null'); const n = function(n) { if (!r[n]) { let a; const s = t[n]; if (!s) throw Error('source buffer exists for track ' + n + ', however track does not'); let o = ((a = s.levelCodec) == null ? void 0 : a.indexOf(',')) === -1 ? s.levelCodec : s.codec; o && n.slice(0, 5) === 'audio' && (o = he(o, e.appendSource)); const l = s.container + ';codecs=' + o; e.log('creating sourceBuffer(' + l + ')'); try { const u = r[n] = i.addSourceBuffer(l); const h = n; e.addBufferListener(h, 'updatestart', e._onSBUpdateStart), e.addBufferListener(h, 'updateend', e._onSBUpdateEnd), e.addBufferListener(h, 'error', e._onSBUpdateError), e.appendSource && e.addBufferListener(h, 'bufferedchange', function(t, r) { const i = r.removedRanges; i != null && i.length && e.hls.trigger(S.BUFFER_FLUSHED, { type: n }) }), e.tracks[n] = { buffer: u, codec: o, container: s.container, levelCodec: s.levelCodec, metadata: s.metadata, id: s.id } } catch (t) { e.error('error while trying to add sourceBuffer: ' + t.message), e.hls.trigger(S.ERROR, { type: L.MEDIA_ERROR, details: A.BUFFER_ADD_CODEC_ERROR, fatal: !1, error: t, sourceBufferName: n, mimeType: l }) } } }; for (const a in t)n(a) }, e._onSBUpdateStart = function(t) { this.operationQueue.current(t).onStart() }, e._onSBUpdateEnd = function(t) { let e; if (((e = this.mediaSource) == null ? void 0 : e.readyState) !== 'closed') { const r = this.operationQueue; r.current(t).onComplete(), r.shiftAndExecuteNext(t) } else this.resetBuffer(t) }, e._onSBUpdateError = function(t, e) { let r; const i = new Error(t + ' SourceBuffer error. MediaSource readyState: ' + ((r = this.mediaSource) == null ? void 0 : r.readyState)); this.error('' + i, e), this.hls.trigger(S.ERROR, { type: L.MEDIA_ERROR, details: A.BUFFER_APPENDING_ERROR, sourceBufferName: t, error: i, fatal: !1 }); const n = this.operationQueue.current(t); n && n.onError(i) }, e.removeExecutor = function(t, e, r) { const i = this.media; const n = this.mediaSource; const a = this.operationQueue; const s = this.sourceBuffer[t]; if (!i || !n || !s) return this.warn('Attempting to remove from the ' + t + ' SourceBuffer, but it does not exist'), void a.shiftAndExecuteNext(t); const o = y(i.duration) ? i.duration : 1 / 0; const l = y(n.duration) ? n.duration : 1 / 0; const u = Math.max(0, e); const h = Math.min(r, o, l); h > u && (!s.ending || s.ended) ? (s.ended = !1, this.log('Removing [' + u + ',' + h + '] from the ' + t + ' SourceBuffer'), s.remove(u, h)) : a.shiftAndExecuteNext(t) }, e.appendExecutor = function(t, e) { const r = this.sourceBuffer[e]; if (r)r.ended = !1, r.appendBuffer(t); else if (!this.pendingTracks[e]) throw new Error('Attempting to append to the ' + e + ' SourceBuffer, but it does not exist') }, e.blockBuffers = function(t, e) { const r = this; if (void 0 === e && (e = this.getSourceBufferTypes()), !e.length) return this.log('Blocking operation requested, but no SourceBuffers exist'), void Promise.resolve().then(t); const i = this.operationQueue; const n = e.map(function(t) { return i.appendBlocker(t) }); Promise.all(n).then(function() { t(), e.forEach(function(t) { const e = r.sourceBuffer[t]; e != null && e.updating || i.shiftAndExecuteNext(t) }) }) }, e.getSourceBufferTypes = function() { return Object.keys(this.sourceBuffer) }, e.addBufferListener = function(t, e, r) { const i = this.sourceBuffer[t]; if (i) { const n = r.bind(this, t); this.listeners[t].push({ event: e, listener: n }), i.addEventListener(e, n) } }, e.removeBufferListeners = function(t) { const e = this.sourceBuffer[t]; e && this.listeners[t].forEach(function(t) { e.removeEventListener(t.event, t.listener) }) }, s(t, [{ key: 'mediaSrc', get: function() { let t; const e = ((t = this.media) == null ? void 0 : t.firstChild) || this.media; return e == null ? void 0 : e.src } }]), t }()); function Zn(t) { const e = t.querySelectorAll('source'); [].slice.call(e).forEach(function(e) { t.removeChild(e) }) } const ta = { 42: 225, 92: 233, 94: 237, 95: 243, 96: 250, 123: 231, 124: 247, 125: 209, 126: 241, 127: 9608, 128: 174, 129: 176, 130: 189, 131: 191, 132: 8482, 133: 162, 134: 163, 135: 9834, 136: 224, 137: 32, 138: 232, 139: 226, 140: 234, 141: 238, 142: 244, 143: 251, 144: 193, 145: 201, 146: 211, 147: 218, 148: 220, 149: 252, 150: 8216, 151: 161, 152: 42, 153: 8217, 154: 9473, 155: 169, 156: 8480, 157: 8226, 158: 8220, 159: 8221, 160: 192, 161: 194, 162: 199, 163: 200, 164: 202, 165: 203, 166: 235, 167: 206, 168: 207, 169: 239, 170: 212, 171: 217, 172: 249, 173: 219, 174: 171, 175: 187, 176: 195, 177: 227, 178: 205, 179: 204, 180: 236, 181: 210, 182: 242, 183: 213, 184: 245, 185: 123, 186: 125, 187: 92, 188: 94, 189: 95, 190: 124, 191: 8764, 192: 196, 193: 228, 194: 214, 195: 246, 196: 223, 197: 165, 198: 164, 199: 9475, 200: 197, 201: 229, 202: 216, 203: 248, 204: 9487, 205: 9491, 206: 9495, 207: 9499 }; const ea = function(t) { return String.fromCharCode(ta[t] || t) }; const ra = 15; const ia = 100; const na = { 17: 1, 18: 3, 21: 5, 22: 7, 23: 9, 16: 11, 19: 12, 20: 14 }; const aa = { 17: 2, 18: 4, 21: 6, 22: 8, 23: 10, 19: 13, 20: 15 }; const sa = { 25: 1, 26: 3, 29: 5, 30: 7, 31: 9, 24: 11, 27: 12, 28: 14 }; const oa = { 25: 2, 26: 4, 29: 6, 30: 8, 31: 10, 27: 13, 28: 15 }; const la = ['white', 'green', 'blue', 'cyan', 'red', 'yellow', 'magenta', 'black', 'transparent']; const ua = (function() { function t() { this.time = null, this.verboseLevel = 0 } return t.prototype.log = function(t, e) { if (this.verboseLevel >= t) { const r = typeof e === 'function' ? e() : e; w.log(this.time + ' [' + t + '] ' + r) } }, t }()); const ha = function(t) { for (var e = [], r = 0; r < t.length; r++)e.push(t[r].toString(16)); return e }; const da = (function() { function t() { this.foreground = 'white', this.underline = !1, this.italics = !1, this.background = 'black', this.flash = !1 } const e = t.prototype; return e.reset = function() { this.foreground = 'white', this.underline = !1, this.italics = !1, this.background = 'black', this.flash = !1 }, e.setStyles = function(t) { for (let e = ['foreground', 'underline', 'italics', 'background', 'flash'], r = 0; r < e.length; r++) { const i = e[r]; t.hasOwnProperty(i) && (this[i] = t[i]) } }, e.isDefault = function() { return this.foreground === 'white' && !this.underline && !this.italics && this.background === 'black' && !this.flash }, e.equals = function(t) { return this.foreground === t.foreground && this.underline === t.underline && this.italics === t.italics && this.background === t.background && this.flash === t.flash }, e.copy = function(t) { this.foreground = t.foreground, this.underline = t.underline, this.italics = t.italics, this.background = t.background, this.flash = t.flash }, e.toString = function() { return 'color=' + this.foreground + ', underline=' + this.underline + ', italics=' + this.italics + ', background=' + this.background + ', flash=' + this.flash }, t }()); const ca = (function() { function t() { this.uchar = ' ', this.penState = new da() } const e = t.prototype; return e.reset = function() { this.uchar = ' ', this.penState.reset() }, e.setChar = function(t, e) { this.uchar = t, this.penState.copy(e) }, e.setPenState = function(t) { this.penState.copy(t) }, e.equals = function(t) { return this.uchar === t.uchar && this.penState.equals(t.penState) }, e.copy = function(t) { this.uchar = t.uchar, this.penState.copy(t.penState) }, e.isEmpty = function() { return this.uchar === ' ' && this.penState.isDefault() }, t }()); const fa = (function() { function t(t) { this.chars = [], this.pos = 0, this.currPenState = new da(), this.cueStartTime = null, this.logger = void 0; for (let e = 0; e < ia; e++) this.chars.push(new ca()); this.logger = t } const e = t.prototype; return e.equals = function(t) { for (let e = 0; e < ia; e++) if (!this.chars[e].equals(t.chars[e])) return !1; return !0 }, e.copy = function(t) { for (let e = 0; e < ia; e++) this.chars[e].copy(t.chars[e]) }, e.isEmpty = function() { for (var t = !0, e = 0; e < ia; e++) if (!this.chars[e].isEmpty()) { t = !1; break } return t }, e.setCursor = function(t) { this.pos !== t && (this.pos = t), this.pos < 0 ? (this.logger.log(3, 'Negative cursor position ' + this.pos), this.pos = 0) : this.pos > ia && (this.logger.log(3, 'Too large cursor position ' + this.pos), this.pos = ia) }, e.moveCursor = function(t) { const e = this.pos + t; if (t > 1) for (let r = this.pos + 1; r < e + 1; r++) this.chars[r].setPenState(this.currPenState); this.setCursor(e) }, e.backSpace = function() { this.moveCursor(-1), this.chars[this.pos].setChar(' ', this.currPenState) }, e.insertChar = function(t) { const e = this; t >= 144 && this.backSpace(); const r = ea(t); this.pos >= ia ? this.logger.log(0, function() { return 'Cannot insert ' + t.toString(16) + ' (' + r + ') at position ' + e.pos + '. Skipping it!' }) : (this.chars[this.pos].setChar(r, this.currPenState), this.moveCursor(1)) }, e.clearFromPos = function(t) { let e; for (e = t; e < ia; e++) this.chars[e].reset() }, e.clear = function() { this.clearFromPos(0), this.pos = 0, this.currPenState.reset() }, e.clearToEndOfRow = function() { this.clearFromPos(this.pos) }, e.getTextString = function() { for (var t = [], e = !0, r = 0; r < ia; r++) { const i = this.chars[r].uchar; i !== ' ' && (e = !1), t.push(i) } return e ? '' : t.join('') }, e.setPenStyles = function(t) { this.currPenState.setStyles(t), this.chars[this.pos].setPenState(this.currPenState) }, t }()); const ga = (function() { function t(t) { this.rows = [], this.currRow = 14, this.nrRollUpRows = null, this.lastOutputScreen = null, this.logger = void 0; for (let e = 0; e < ra; e++) this.rows.push(new fa(t)); this.logger = t } const e = t.prototype; return e.reset = function() { for (let t = 0; t < ra; t++) this.rows[t].clear(); this.currRow = 14 }, e.equals = function(t) { for (var e = !0, r = 0; r < ra; r++) if (!this.rows[r].equals(t.rows[r])) { e = !1; break } return e }, e.copy = function(t) { for (let e = 0; e < ra; e++) this.rows[e].copy(t.rows[e]) }, e.isEmpty = function() { for (var t = !0, e = 0; e < ra; e++) if (!this.rows[e].isEmpty()) { t = !1; break } return t }, e.backSpace = function() { this.rows[this.currRow].backSpace() }, e.clearToEndOfRow = function() { this.rows[this.currRow].clearToEndOfRow() }, e.insertChar = function(t) { this.rows[this.currRow].insertChar(t) }, e.setPen = function(t) { this.rows[this.currRow].setPenStyles(t) }, e.moveCursor = function(t) { this.rows[this.currRow].moveCursor(t) }, e.setCursor = function(t) { this.logger.log(2, 'setCursor: ' + t), this.rows[this.currRow].setCursor(t) }, e.setPAC = function(t) { this.logger.log(2, function() { return 'pacData = ' + JSON.stringify(t) }); let e = t.row - 1; if (this.nrRollUpRows && e < this.nrRollUpRows - 1 && (e = this.nrRollUpRows - 1), this.nrRollUpRows && this.currRow !== e) { for (let r = 0; r < ra; r++) this.rows[r].clear(); const i = this.currRow + 1 - this.nrRollUpRows; const n = this.lastOutputScreen; if (n) { const a = n.rows[i].cueStartTime; const s = this.logger.time; if (a !== null && s !== null && a < s) for (let o = 0; o < this.nrRollUpRows; o++) this.rows[e - this.nrRollUpRows + o + 1].copy(n.rows[i + o]) } } this.currRow = e; const l = this.rows[this.currRow]; if (t.indent !== null) { const u = t.indent; const h = Math.max(u - 1, 0); l.setCursor(t.indent), t.color = l.chars[h].penState.foreground } const d = { foreground: t.color, underline: t.underline, italics: t.italics, background: 'black', flash: !1 }; this.setPen(d) }, e.setBkgData = function(t) { this.logger.log(2, function() { return 'bkgData = ' + JSON.stringify(t) }), this.backSpace(), this.setPen(t), this.insertChar(32) }, e.setRollUpRows = function(t) { this.nrRollUpRows = t }, e.rollUp = function() { const t = this; if (this.nrRollUpRows !== null) { this.logger.log(1, function() { return t.getDisplayText() }); const e = this.currRow + 1 - this.nrRollUpRows; const r = this.rows.splice(e, 1)[0]; r.clear(), this.rows.splice(this.currRow, 0, r), this.logger.log(2, 'Rolling up') } else this.logger.log(3, 'roll_up but nrRollUpRows not set yet') }, e.getDisplayText = function(t) { t = t || !1; for (var e = [], r = '', i = -1, n = 0; n < ra; n++) { const a = this.rows[n].getTextString(); a && (i = n + 1, t ? e.push('Row ' + i + ': \'' + a + '\'') : e.push(a.trim())) } return e.length > 0 && (r = t ? '[' + e.join(' | ') + ']' : e.join('\n')), r }, e.getTextAndFormat = function() { return this.rows }, t }()); const va = (function() { function t(t, e, r) { this.chNr = void 0, this.outputFilter = void 0, this.mode = void 0, this.verbose = void 0, this.displayedMemory = void 0, this.nonDisplayedMemory = void 0, this.lastOutputScreen = void 0, this.currRollUpRow = void 0, this.writeScreen = void 0, this.cueStartTime = void 0, this.logger = void 0, this.chNr = t, this.outputFilter = e, this.mode = null, this.verbose = 0, this.displayedMemory = new ga(r), this.nonDisplayedMemory = new ga(r), this.lastOutputScreen = new ga(r), this.currRollUpRow = this.displayedMemory.rows[14], this.writeScreen = this.displayedMemory, this.mode = null, this.cueStartTime = null, this.logger = r } const e = t.prototype; return e.reset = function() { this.mode = null, this.displayedMemory.reset(), this.nonDisplayedMemory.reset(), this.lastOutputScreen.reset(), this.outputFilter.reset(), this.currRollUpRow = this.displayedMemory.rows[14], this.writeScreen = this.displayedMemory, this.mode = null, this.cueStartTime = null }, e.getHandler = function() { return this.outputFilter }, e.setHandler = function(t) { this.outputFilter = t }, e.setPAC = function(t) { this.writeScreen.setPAC(t) }, e.setBkgData = function(t) { this.writeScreen.setBkgData(t) }, e.setMode = function(t) { t !== this.mode && (this.mode = t, this.logger.log(2, function() { return 'MODE=' + t }), this.mode === 'MODE_POP-ON' ? this.writeScreen = this.nonDisplayedMemory : (this.writeScreen = this.displayedMemory, this.writeScreen.reset()), this.mode !== 'MODE_ROLL-UP' && (this.displayedMemory.nrRollUpRows = null, this.nonDisplayedMemory.nrRollUpRows = null), this.mode = t) }, e.insertChars = function(t) { for (var e = this, r = 0; r < t.length; r++) this.writeScreen.insertChar(t[r]); const i = this.writeScreen === this.displayedMemory ? 'DISP' : 'NON_DISP'; this.logger.log(2, function() { return i + ': ' + e.writeScreen.getDisplayText(!0) }), this.mode !== 'MODE_PAINT-ON' && this.mode !== 'MODE_ROLL-UP' || (this.logger.log(1, function() { return 'DISPLAYED: ' + e.displayedMemory.getDisplayText(!0) }), this.outputDataUpdate()) }, e.ccRCL = function() { this.logger.log(2, 'RCL - Resume Caption Loading'), this.setMode('MODE_POP-ON') }, e.ccBS = function() { this.logger.log(2, 'BS - BackSpace'), this.mode !== 'MODE_TEXT' && (this.writeScreen.backSpace(), this.writeScreen === this.displayedMemory && this.outputDataUpdate()) }, e.ccAOF = function() {}, e.ccAON = function() {}, e.ccDER = function() { this.logger.log(2, 'DER- Delete to End of Row'), this.writeScreen.clearToEndOfRow(), this.outputDataUpdate() }, e.ccRU = function(t) { this.logger.log(2, 'RU(' + t + ') - Roll Up'), this.writeScreen = this.displayedMemory, this.setMode('MODE_ROLL-UP'), this.writeScreen.setRollUpRows(t) }, e.ccFON = function() { this.logger.log(2, 'FON - Flash On'), this.writeScreen.setPen({ flash: !0 }) }, e.ccRDC = function() { this.logger.log(2, 'RDC - Resume Direct Captioning'), this.setMode('MODE_PAINT-ON') }, e.ccTR = function() { this.logger.log(2, 'TR'), this.setMode('MODE_TEXT') }, e.ccRTD = function() { this.logger.log(2, 'RTD'), this.setMode('MODE_TEXT') }, e.ccEDM = function() { this.logger.log(2, 'EDM - Erase Displayed Memory'), this.displayedMemory.reset(), this.outputDataUpdate(!0) }, e.ccCR = function() { this.logger.log(2, 'CR - Carriage Return'), this.writeScreen.rollUp(), this.outputDataUpdate(!0) }, e.ccENM = function() { this.logger.log(2, 'ENM - Erase Non-displayed Memory'), this.nonDisplayedMemory.reset() }, e.ccEOC = function() { const t = this; if (this.logger.log(2, 'EOC - End Of Caption'), this.mode === 'MODE_POP-ON') { const e = this.displayedMemory; this.displayedMemory = this.nonDisplayedMemory, this.nonDisplayedMemory = e, this.writeScreen = this.nonDisplayedMemory, this.logger.log(1, function() { return 'DISP: ' + t.displayedMemory.getDisplayText() }) } this.outputDataUpdate(!0) }, e.ccTO = function(t) { this.logger.log(2, 'TO(' + t + ') - Tab Offset'), this.writeScreen.moveCursor(t) }, e.ccMIDROW = function(t) { const e = { flash: !1 }; if (e.underline = t % 2 == 1, e.italics = t >= 46, e.italics)e.foreground = 'white'; else { const r = Math.floor(t / 2) - 16; e.foreground = ['white', 'green', 'blue', 'cyan', 'red', 'yellow', 'magenta'][r] } this.logger.log(2, 'MIDROW: ' + JSON.stringify(e)), this.writeScreen.setPen(e) }, e.outputDataUpdate = function(t) { void 0 === t && (t = !1); const e = this.logger.time; e !== null && this.outputFilter && (this.cueStartTime !== null || this.displayedMemory.isEmpty() ? this.displayedMemory.equals(this.lastOutputScreen) || (this.outputFilter.newCue(this.cueStartTime, e, this.lastOutputScreen), t && this.outputFilter.dispatchCue && this.outputFilter.dispatchCue(), this.cueStartTime = this.displayedMemory.isEmpty() ? null : e) : this.cueStartTime = e, this.lastOutputScreen.copy(this.displayedMemory)) }, e.cueSplitAtTime = function(t) { this.outputFilter && (this.displayedMemory.isEmpty() || (this.outputFilter.newCue && this.outputFilter.newCue(this.cueStartTime, t, this.displayedMemory), this.cueStartTime = t)) }, t }()); const ma = (function() { function t(t, e, r) { this.channels = void 0, this.currentChannel = 0, this.cmdHistory = { a: null, b: null }, this.logger = void 0; const i = this.logger = new ua(); this.channels = [null, new va(t, e, i), new va(t + 1, r, i)] } const e = t.prototype; return e.getHandler = function(t) { return this.channels[t].getHandler() }, e.setHandler = function(t, e) { this.channels[t].setHandler(e) }, e.addData = function(t, e) { const r = this; this.logger.time = t; for (let i = function(t) { const i = 127 & e[t]; const n = 127 & e[t + 1]; let a = !1; let s = null; if (i === 0 && n === 0) return 0; r.logger.log(3, function() { return '[' + ha([e[t], e[t + 1]]) + '] -> (' + ha([i, n]) + ')' }); const o = r.cmdHistory; if (i >= 16 && i <= 31) { if (function(t, e, r) { return r.a === t && r.b === e }(i, n, o)) return pa(null, null, o), r.logger.log(3, function() { return 'Repeated command (' + ha([i, n]) + ') is dropped' }), 0; pa(i, n, r.cmdHistory), (a = r.parseCmd(i, n)) || (a = r.parseMidrow(i, n)), a || (a = r.parsePAC(i, n)), a || (a = r.parseBackgroundAttributes(i, n)) } else pa(null, null, o); if (!a && (s = r.parseChars(i, n))) { const l = r.currentChannel; l && l > 0 ? r.channels[l].insertChars(s) : r.logger.log(2, 'No channel found yet. TEXT-MODE?') }a || s || r.logger.log(2, function() { return 'Couldn\'t parse cleaned data ' + ha([i, n]) + ' orig: ' + ha([e[t], e[t + 1]]) }) }, n = 0; n < e.length; n += 2)i(n) }, e.parseCmd = function(t, e) { if (!((t === 20 || t === 28 || t === 21 || t === 29) && e >= 32 && e <= 47 || (t === 23 || t === 31) && e >= 33 && e <= 35)) return !1; const r = t === 20 || t === 21 || t === 23 ? 1 : 2; const i = this.channels[r]; return t === 20 || t === 21 || t === 28 || t === 29 ? e === 32 ? i.ccRCL() : e === 33 ? i.ccBS() : e === 34 ? i.ccAOF() : e === 35 ? i.ccAON() : e === 36 ? i.ccDER() : e === 37 ? i.ccRU(2) : e === 38 ? i.ccRU(3) : e === 39 ? i.ccRU(4) : e === 40 ? i.ccFON() : e === 41 ? i.ccRDC() : e === 42 ? i.ccTR() : e === 43 ? i.ccRTD() : e === 44 ? i.ccEDM() : e === 45 ? i.ccCR() : e === 46 ? i.ccENM() : e === 47 && i.ccEOC() : i.ccTO(e - 32), this.currentChannel = r, !0 }, e.parseMidrow = function(t, e) { let r = 0; if ((t === 17 || t === 25) && e >= 32 && e <= 47) { if ((r = t === 17 ? 1 : 2) !== this.currentChannel) return this.logger.log(0, 'Mismatch channel in midrow parsing'), !1; const i = this.channels[r]; return !!i && (i.ccMIDROW(e), this.logger.log(3, function() { return 'MIDROW (' + ha([t, e]) + ')' }), !0) } return !1 }, e.parsePAC = function(t, e) { let r; if (!((t >= 17 && t <= 23 || t >= 25 && t <= 31) && e >= 64 && e <= 127 || (t === 16 || t === 24) && e >= 64 && e <= 95)) return !1; const i = t <= 23 ? 1 : 2; r = e >= 64 && e <= 95 ? i === 1 ? na[t] : sa[t] : i === 1 ? aa[t] : oa[t]; const n = this.channels[i]; return !!n && (n.setPAC(this.interpretPAC(r, e)), this.currentChannel = i, !0) }, e.interpretPAC = function(t, e) { let r; const i = { color: null, italics: !1, indent: null, underline: !1, row: t }; return r = e > 95 ? e - 96 : e - 64, i.underline = (1 & r) == 1, r <= 13 ? i.color = ['white', 'green', 'blue', 'cyan', 'red', 'yellow', 'magenta', 'white'][Math.floor(r / 2)] : r <= 15 ? (i.italics = !0, i.color = 'white') : i.indent = 4 * Math.floor((r - 16) / 2), i }, e.parseChars = function(t, e) { let r; let i; let n = null; let a = null; return t >= 25 ? (r = 2, a = t - 8) : (r = 1, a = t), a >= 17 && a <= 19 ? (i = a === 17 ? e + 80 : a === 18 ? e + 112 : e + 144, this.logger.log(2, function() { return 'Special char \'' + ea(i) + '\' in channel ' + r }), n = [i]) : t >= 32 && t <= 127 && (n = e === 0 ? [t] : [t, e]), n && this.logger.log(3, function() { return 'Char codes =  ' + ha(n).join(',') }), n }, e.parseBackgroundAttributes = function(t, e) { let r; if (!((t === 16 || t === 24) && e >= 32 && e <= 47 || (t === 23 || t === 31) && e >= 45 && e <= 47)) return !1; const i = {}; t === 16 || t === 24 ? (r = Math.floor((e - 32) / 2), i.background = la[r], e % 2 == 1 && (i.background = i.background + '_semi')) : e === 45 ? i.background = 'transparent' : (i.foreground = 'black', e === 47 && (i.underline = !0)); const n = t <= 23 ? 1 : 2; return this.channels[n].setBkgData(i), !0 }, e.reset = function() { for (let t = 0; t < Object.keys(this.channels).length; t++) { const e = this.channels[t]; e && e.reset() }pa(null, null, this.cmdHistory) }, e.cueSplitAtTime = function(t) { for (let e = 0; e < this.channels.length; e++) { const r = this.channels[e]; r && r.cueSplitAtTime(t) } }, t }()); function pa(t, e, r) { r.a = t, r.b = e } const ya = (function() { function t(t, e) { this.timelineController = void 0, this.cueRanges = [], this.trackName = void 0, this.startTime = null, this.endTime = null, this.screen = null, this.timelineController = t, this.trackName = e } const e = t.prototype; return e.dispatchCue = function() { this.startTime !== null && (this.timelineController.addCues(this.trackName, this.startTime, this.endTime, this.screen, this.cueRanges), this.startTime = null) }, e.newCue = function(t, e, r) { (this.startTime === null || this.startTime > t) && (this.startTime = t), this.endTime = e, this.screen = r, this.timelineController.createCaptionsTrack(this.trackName) }, e.reset = function() { this.cueRanges = [], this.startTime = null }, t }()); const Ea = (function() { if (j != null && j.VTTCue) return self.VTTCue; const t = ['', 'lr', 'rl']; const e = ['start', 'middle', 'end', 'left', 'right']; function r(t, e) { if (typeof e !== 'string') return !1; if (!Array.isArray(t)) return !1; const r = e.toLowerCase(); return !!~t.indexOf(r) && r } function i(t) { return r(e, t) } function n(t) { for (let e = arguments.length, r = new Array(e > 1 ? e - 1 : 0), i = 1; i < e; i++)r[i - 1] = arguments[i]; for (let n = 1; n < arguments.length; n++) { const a = arguments[n]; for (const s in a)t[s] = a[s] } return t } function a(e, a, s) { const o = this; const l = { enumerable: !0 }; o.hasBeenReset = !1; let u = ''; let h = !1; let d = e; let c = a; let f = s; let g = null; let v = ''; let m = !0; let p = 'auto'; let y = 'start'; let E = 50; let T = 'middle'; let S = 50; let L = 'middle'; Object.defineProperty(o, 'id', n({}, l, { get: function() { return u }, set: function(t) { u = '' + t } })), Object.defineProperty(o, 'pauseOnExit', n({}, l, { get: function() { return h }, set: function(t) { h = !!t } })), Object.defineProperty(o, 'startTime', n({}, l, { get: function() { return d }, set: function(t) { if (typeof t !== 'number') throw new TypeError('Start time must be set to a number.'); d = t, this.hasBeenReset = !0 } })), Object.defineProperty(o, 'endTime', n({}, l, { get: function() { return c }, set: function(t) { if (typeof t !== 'number') throw new TypeError('End time must be set to a number.'); c = t, this.hasBeenReset = !0 } })), Object.defineProperty(o, 'text', n({}, l, { get: function() { return f }, set: function(t) { f = '' + t, this.hasBeenReset = !0 } })), Object.defineProperty(o, 'region', n({}, l, { get: function() { return g }, set: function(t) { g = t, this.hasBeenReset = !0 } })), Object.defineProperty(o, 'vertical', n({}, l, { get: function() { return v }, set: function(e) { const i = (function(e) { return r(t, e) }(e)); if (!1 === i) throw new SyntaxError('An invalid or illegal string was specified.'); v = i, this.hasBeenReset = !0 } })), Object.defineProperty(o, 'snapToLines', n({}, l, { get: function() { return m }, set: function(t) { m = !!t, this.hasBeenReset = !0 } })), Object.defineProperty(o, 'line', n({}, l, { get: function() { return p }, set: function(t) { if (typeof t !== 'number' && t !== 'auto') throw new SyntaxError('An invalid number or illegal string was specified.'); p = t, this.hasBeenReset = !0 } })), Object.defineProperty(o, 'lineAlign', n({}, l, { get: function() { return y }, set: function(t) { const e = i(t); if (!e) throw new SyntaxError('An invalid or illegal string was specified.'); y = e, this.hasBeenReset = !0 } })), Object.defineProperty(o, 'position', n({}, l, { get: function() { return E }, set: function(t) { if (t < 0 || t > 100) throw new Error('Position must be between 0 and 100.'); E = t, this.hasBeenReset = !0 } })), Object.defineProperty(o, 'positionAlign', n({}, l, { get: function() { return T }, set: function(t) { const e = i(t); if (!e) throw new SyntaxError('An invalid or illegal string was specified.'); T = e, this.hasBeenReset = !0 } })), Object.defineProperty(o, 'size', n({}, l, { get: function() { return S }, set: function(t) { if (t < 0 || t > 100) throw new Error('Size must be between 0 and 100.'); S = t, this.hasBeenReset = !0 } })), Object.defineProperty(o, 'align', n({}, l, { get: function() { return L }, set: function(t) { const e = i(t); if (!e) throw new SyntaxError('An invalid or illegal string was specified.'); L = e, this.hasBeenReset = !0 } })), o.displayState = void 0 } return a.prototype.getCueAsHTML = function() { return self.WebVTT.convertCueToDOMTree(self, this.text) }, a }()); const Ta = (function() { function t() {} return t.prototype.decode = function(t, e) { if (!t) return ''; if (typeof t !== 'string') throw new Error('Error - expected string data.'); return decodeURIComponent(encodeURIComponent(t)) }, t }()); function Sa(t) { function e(t, e, r, i) { return 3600 * (0 | t) + 60 * (0 | e) + (0 | r) + parseFloat(i || 0) } const r = t.match(/^(?:(\d+):)?(\d{2}):(\d{2})(\.\d+)?/); return r ? parseFloat(r[2]) > 59 ? e(r[2], r[3], 0, r[4]) : e(r[1], r[2], r[3], r[4]) : null } const La = (function() { function t() { this.values = Object.create(null) } const e = t.prototype; return e.set = function(t, e) { this.get(t) || e === '' || (this.values[t] = e) }, e.get = function(t, e, r) { return r ? this.has(t) ? this.values[t] : e[r] : this.has(t) ? this.values[t] : e }, e.has = function(t) { return t in this.values }, e.alt = function(t, e, r) { for (let i = 0; i < r.length; ++i) if (e === r[i]) { this.set(t, e); break } }, e.integer = function(t, e) { /^-?\d+$/.test(e) && this.set(t, parseInt(e, 10)) }, e.percent = function(t, e) { if (/^([\d]{1,3})(\.[\d]*)?%$/.test(e)) { const r = parseFloat(e); if (r >= 0 && r <= 100) return this.set(t, r), !0 } return !1 }, t }()); function Aa(t, e, r, i) { const n = i ? t.split(i) : [t]; for (const a in n) if (typeof n[a] === 'string') { const s = n[a].split(r); s.length === 2 && e(s[0], s[1]) } } const Ra = new Ea(0, 0, ''); const ka = Ra.align === 'middle' ? 'middle' : 'center'; function ba(t, e, r) { const i = t; function n() { const e = Sa(t); if (e === null) throw new Error('Malformed timestamp: ' + i); return t = t.replace(/^[^\sa-zA-Z-]+/, ''), e } function a() { t = t.replace(/^\s+/, '') } if (a(), e.startTime = n(), a(), t.slice(0, 3) !== '--\x3e') throw new Error('Malformed time stamp (time stamps must be separated by \'--\x3e\'): ' + i); t = t.slice(3), a(), e.endTime = n(), a(), (function(t, e) { const i = new La(); Aa(t, function(t, e) { let n; switch (t) { case 'region':for (let a = r.length - 1; a >= 0; a--) if (r[a].id === e) { i.set(t, r[a].region); break } break; case 'vertical':i.alt(t, e, ['rl', 'lr']); break; case 'line':n = e.split(','), i.integer(t, n[0]), i.percent(t, n[0]) && i.set('snapToLines', !1), i.alt(t, n[0], ['auto']), n.length === 2 && i.alt('lineAlign', n[1], ['start', ka, 'end']); break; case 'position':n = e.split(','), i.percent(t, n[0]), n.length === 2 && i.alt('positionAlign', n[1], ['start', ka, 'end', 'line-left', 'line-right', 'auto']); break; case 'size':i.percent(t, e); break; case 'align':i.alt(t, e, ['start', ka, 'end', 'left', 'right']) } }, /:/, /\s/), e.region = i.get('region', null), e.vertical = i.get('vertical', ''); let n = i.get('line', 'auto'); n === 'auto' && Ra.line === -1 && (n = -1), e.line = n, e.lineAlign = i.get('lineAlign', 'start'), e.snapToLines = i.get('snapToLines', !0), e.size = i.get('size', 100), e.align = i.get('align', ka); let a = i.get('position', 'auto'); a === 'auto' && Ra.position === 50 && (a = e.align === 'start' || e.align === 'left' ? 0 : e.align === 'end' || e.align === 'right' ? 100 : 50), e.position = a }(t, e)) } function Da(t) { return t.replace(/<br(?: \/)?>/gi, '\n') } const Ia = (function() { function t() { this.state = 'INITIAL', this.buffer = '', this.decoder = new Ta(), this.regionList = [], this.cue = null, this.oncue = void 0, this.onparsingerror = void 0, this.onflush = void 0 } const e = t.prototype; return e.parse = function(t) { const e = this; function r() { let t = e.buffer; let r = 0; for (t = Da(t); r < t.length && t[r] !== '\r' && t[r] !== '\n';)++r; const i = t.slice(0, r); return t[r] === '\r' && ++r, t[r] === '\n' && ++r, e.buffer = t.slice(r), i }t && (e.buffer += e.decoder.decode(t, { stream: !0 })); try { let i = ''; if (e.state === 'INITIAL') { if (!/\r\n|\n/.test(e.buffer)) return this; const n = (i = r()).match(/^(ï»¿)?WEBVTT([ \t].*)?$/); if (n == null || !n[0]) throw new Error('Malformed WebVTT signature.'); e.state = 'HEADER' } for (let a = !1; e.buffer;) { if (!/\r\n|\n/.test(e.buffer)) return this; switch (a ? a = !1 : i = r(), e.state) { case 'HEADER':/:/.test(i) ? Aa(i, function(t, e) {}, /:/) : i || (e.state = 'ID'); continue; case 'NOTE':i || (e.state = 'ID'); continue; case 'ID':if (/^NOTE($|[ \t])/.test(i)) { e.state = 'NOTE'; break } if (!i) continue; if (e.cue = new Ea(0, 0, ''), e.state = 'CUE', i.indexOf('--\x3e') === -1) { e.cue.id = i; continue } case 'CUE':if (!e.cue) { e.state = 'BADCUE'; continue } try { ba(i, e.cue, e.regionList) } catch (t) { e.cue = null, e.state = 'BADCUE'; continue }e.state = 'CUETEXT'; continue; case 'CUETEXT':var s = i.indexOf('--\x3e') !== -1; if (!i || s && (a = !0)) { e.oncue && e.cue && e.oncue(e.cue), e.cue = null, e.state = 'ID'; continue } if (e.cue === null) continue; e.cue.text && (e.cue.text += '\n'), e.cue.text += i; continue; case 'BADCUE':i || (e.state = 'ID') } } } catch (t) { e.state === 'CUETEXT' && e.cue && e.oncue && e.oncue(e.cue), e.cue = null, e.state = e.state === 'INITIAL' ? 'BADWEBVTT' : 'BADCUE' } return this }, e.flush = function() { const t = this; try { if ((t.cue || t.state === 'HEADER') && (t.buffer += '\n\n', t.parse()), t.state === 'INITIAL' || t.state === 'BADWEBVTT') throw new Error('Malformed WebVTT signature.') } catch (e) { t.onparsingerror && t.onparsingerror(e) } return t.onflush && t.onflush(), this }, t }()); const wa = /\r\n|\n\r|\n|\r/g; const Ca = function(t, e, r) { return void 0 === r && (r = 0), t.slice(r, r + e.length) === e }; const _a = function(t) { for (var e = 5381, r = t.length; r;)e = 33 * e ^ t.charCodeAt(--r); return (e >>> 0).toString() }; function xa(t, e, r) { return _a(t.toString()) + _a(e.toString()) + _a(r) } function Pa(t, e, r, i, n, a, s) { let o; let l; let u; const h = new Ia(); const d = Tt(new Uint8Array(t)).trim().replace(wa, '\n').split('\n'); const c = []; const f = e ? (o = e.baseTime, void 0 === (l = e.timescale) && (l = 1), yn(o, pn, 1 / l)) : 0; let g = '00:00.000'; let v = 0; let m = 0; let p = !0; h.oncue = function(t) { const a = r[i]; let s = r.ccOffset; const o = (v - f) / 9e4; if (a != null && a.new && (void 0 !== m ? s = r.ccOffset = a.start : (function(t, e, r) { let i = t[e]; let n = t[i.prevCC]; if (!n || !n.new && i.new) return t.ccOffset = t.presentationOffset = i.start, void (i.new = !1); for (;(a = n) != null && a.new;) { var a; t.ccOffset += i.start - n.start, i.new = !1, n = t[(i = n).prevCC] }t.presentationOffset = r }(r, i, o))), o) { if (!e) return void (u = new Error('Missing initPTS for VTT MPEGTS')); s = o - r.presentationOffset } const l = t.endTime - t.startTime; const h = An(9e4 * (t.startTime + s - m), 9e4 * n) / 9e4; t.startTime = Math.max(h, 0), t.endTime = Math.max(h + l, 0); const d = t.text.trim(); t.text = decodeURIComponent(encodeURIComponent(d)), t.id || (t.id = xa(t.startTime, t.endTime, d)), t.endTime > 0 && c.push(t) }, h.onparsingerror = function(t) { u = t }, h.onflush = function() { u ? s(u) : a(c) }, d.forEach(function(t) { if (p) { if (Ca(t, 'X-TIMESTAMP-MAP=')) { p = !1, t.slice(16).split(',').forEach(function(t) { Ca(t, 'LOCAL:') ? g = t.slice(6) : Ca(t, 'MPEGTS:') && (v = parseInt(t.slice(7))) }); try { m = (function(t) { let e = parseInt(t.slice(-3)); const r = parseInt(t.slice(-6, -4)); const i = parseInt(t.slice(-9, -7)); const n = t.length > 9 ? parseInt(t.substring(0, t.indexOf(':'))) : 0; if (!(y(e) && y(r) && y(i) && y(n))) throw Error('Malformed X-TIMESTAMP-MAP: Local:' + t); return e += 1e3 * r, (e += 6e4 * i) + 36e5 * n }(g)) / 1e3 } catch (t) { u = t } return }t === '' && (p = !1) }h.parse(t + '\n') }), h.flush() } const Fa = 'stpp.ttml.im1t'; const Ma = /^(\d{2,}):(\d{2}):(\d{2}):(\d{2})\.?(\d+)?$/; const Oa = /^(\d*(?:\.\d*)?)(h|m|s|ms|f|t)$/; const Na = { left: 'start', center: 'center', right: 'end', start: 'start', end: 'end' }; function Ua(t, e, r, i) { const n = xt(new Uint8Array(t), ['mdat']); if (n.length !== 0) { let a; let s; let l; let u; const h = n.map(function(t) { return Tt(t) }); const d = (a = e.baseTime, s = 1, void 0 === (l = e.timescale) && (l = 1), void 0 === u && (u = !1), yn(a, s, 1 / l, u)); try { h.forEach(function(t) { return r(function(t, e) { const r = (new DOMParser()).parseFromString(t, 'text/xml'); const i = r.getElementsByTagName('tt')[0]; if (!i) throw new Error('Invalid ttml'); const n = { frameRate: 30, subFrameRate: 1, frameRateMultiplier: 0, tickRate: 0 }; const a = Object.keys(n).reduce(function(t, e) { return t[e] = i.getAttribute('ttp:' + e) || n[e], t }, {}); const s = i.getAttribute('xml:space') !== 'preserve'; const l = Ga(Ba(i, 'styling', 'style')); const u = Ga(Ba(i, 'layout', 'region')); const h = Ba(i, 'body', '[begin]'); return [].map.call(h, function(t) { const r = Ka(t, s); if (!r || !t.hasAttribute('begin')) return null; const i = Ya(t.getAttribute('begin'), a); const n = Ya(t.getAttribute('dur'), a); let h = Ya(t.getAttribute('end'), a); if (i === null) throw Va(t); if (h === null) { if (n === null) throw Va(t); h = i + n } const d = new Ea(i - e, h - e, r); d.id = xa(d.startTime, d.endTime, d.text); const c = (function(t, e, r) { const i = 'http://www.w3.org/ns/ttml#styling'; let n = null; const a = ['displayAlign', 'textAlign', 'color', 'backgroundColor', 'fontSize', 'fontFamily']; const s = t != null && t.hasAttribute('style') ? t.getAttribute('style') : null; return s && r.hasOwnProperty(s) && (n = r[s]), a.reduce(function(r, a) { const s = Ha(e, i, a) || Ha(t, i, a) || Ha(n, i, a); return s && (r[a] = s), r }, {}) }(u[t.getAttribute('region')], l[t.getAttribute('style')], l)); const f = c.textAlign; if (f) { const g = Na[f]; g && (d.lineAlign = g), d.align = f } return o(d, c), d }).filter(function(t) { return t !== null }) }(t, d)) }) } catch (t) { i(t) } } else i(new Error('Could not parse IMSC1 mdat')) } function Ba(t, e, r) { const i = t.getElementsByTagName(e)[0]; return i ? [].slice.call(i.querySelectorAll(r)) : [] } function Ga(t) { return t.reduce(function(t, e) { const r = e.getAttribute('xml:id'); return r && (t[r] = e), t }, {}) } function Ka(t, e) { return [].slice.call(t.childNodes).reduce(function(t, r, i) { let n; return r.nodeName === 'br' && i ? t + '\n' : (n = r.childNodes) != null && n.length ? Ka(r, e) : e ? t + r.textContent.trim().replace(/\s+/g, ' ') : t + r.textContent }, '') } function Ha(t, e, r) { return t && t.hasAttributeNS(e, r) ? t.getAttributeNS(e, r) : null } function Va(t) { return new Error('Could not parse ttml timestamp ' + t) } function Ya(t, e) { if (!t) return null; let r = Sa(t); return r === null && (Ma.test(t) ? r = (function(t, e) { const r = Ma.exec(t); const i = (0 | r[4]) + (0 | r[5]) / e.subFrameRate; return 3600 * (0 | r[1]) + 60 * (0 | r[2]) + (0 | r[3]) + i / e.frameRate }(t, e)) : Oa.test(t) && (r = (function(t, e) { const r = Oa.exec(t); const i = Number(r[1]); switch (r[2]) { case 'h':return 3600 * i; case 'm':return 60 * i; case 'ms':return 1e3 * i; case 'f':return i / e.frameRate; case 't':return i / e.tickRate } return i }(t, e)))), r } const Wa = (function() { function t(t) { this.hls = void 0, this.media = null, this.config = void 0, this.enabled = !0, this.Cues = void 0, this.textTracks = [], this.tracks = [], this.initPTS = [], this.unparsedVttFrags = [], this.captionsTracks = {}, this.nonNativeCaptionsTracks = {}, this.cea608Parser1 = void 0, this.cea608Parser2 = void 0, this.lastCc = -1, this.lastSn = -1, this.lastPartIndex = -1, this.prevCC = -1, this.vttCCs = { ccOffset: 0, presentationOffset: 0, 0: { start: 0, prevCC: -1, new: !0 } }, this.captionsProperties = void 0, this.hls = t, this.config = t.config, this.Cues = t.config.cueHandler, this.captionsProperties = { textTrack1: { label: this.config.captionsTextTrack1Label, languageCode: this.config.captionsTextTrack1LanguageCode }, textTrack2: { label: this.config.captionsTextTrack2Label, languageCode: this.config.captionsTextTrack2LanguageCode }, textTrack3: { label: this.config.captionsTextTrack3Label, languageCode: this.config.captionsTextTrack3LanguageCode }, textTrack4: { label: this.config.captionsTextTrack4Label, languageCode: this.config.captionsTextTrack4LanguageCode } }, t.on(S.MEDIA_ATTACHING, this.onMediaAttaching, this), t.on(S.MEDIA_DETACHING, this.onMediaDetaching, this), t.on(S.MANIFEST_LOADING, this.onManifestLoading, this), t.on(S.MANIFEST_LOADED, this.onManifestLoaded, this), t.on(S.SUBTITLE_TRACKS_UPDATED, this.onSubtitleTracksUpdated, this), t.on(S.FRAG_LOADING, this.onFragLoading, this), t.on(S.FRAG_LOADED, this.onFragLoaded, this), t.on(S.FRAG_PARSING_USERDATA, this.onFragParsingUserdata, this), t.on(S.FRAG_DECRYPTED, this.onFragDecrypted, this), t.on(S.INIT_PTS_FOUND, this.onInitPtsFound, this), t.on(S.SUBTITLE_TRACKS_CLEARED, this.onSubtitleTracksCleared, this), t.on(S.BUFFER_FLUSHING, this.onBufferFlushing, this) } const e = t.prototype; return e.destroy = function() { const t = this.hls; t.off(S.MEDIA_ATTACHING, this.onMediaAttaching, this), t.off(S.MEDIA_DETACHING, this.onMediaDetaching, this), t.off(S.MANIFEST_LOADING, this.onManifestLoading, this), t.off(S.MANIFEST_LOADED, this.onManifestLoaded, this), t.off(S.SUBTITLE_TRACKS_UPDATED, this.onSubtitleTracksUpdated, this), t.off(S.FRAG_LOADING, this.onFragLoading, this), t.off(S.FRAG_LOADED, this.onFragLoaded, this), t.off(S.FRAG_PARSING_USERDATA, this.onFragParsingUserdata, this), t.off(S.FRAG_DECRYPTED, this.onFragDecrypted, this), t.off(S.INIT_PTS_FOUND, this.onInitPtsFound, this), t.off(S.SUBTITLE_TRACKS_CLEARED, this.onSubtitleTracksCleared, this), t.off(S.BUFFER_FLUSHING, this.onBufferFlushing, this), this.hls = this.config = null, this.cea608Parser1 = this.cea608Parser2 = void 0 }, e.initCea608Parsers = function() { if (this.config.enableCEA708Captions && (!this.cea608Parser1 || !this.cea608Parser2)) { const t = new ya(this, 'textTrack1'); const e = new ya(this, 'textTrack2'); const r = new ya(this, 'textTrack3'); const i = new ya(this, 'textTrack4'); this.cea608Parser1 = new ma(1, t, e), this.cea608Parser2 = new ma(3, r, i) } }, e.addCues = function(t, e, r, i, n) { for (var a, s, o, l, u = !1, h = n.length; h--;) { const d = n[h]; const c = (a = d[0], s = d[1], o = e, l = r, Math.min(s, l) - Math.max(a, o)); if (c >= 0 && (d[0] = Math.min(d[0], e), d[1] = Math.max(d[1], r), u = !0, c / (r - e) > 0.5)) return } if (u || n.push([e, r]), this.config.renderTextTracksNatively) { const f = this.captionsTracks[t]; this.Cues.newCue(f, e, r, i) } else { const g = this.Cues.newCue(null, e, r, i); this.hls.trigger(S.CUES_PARSED, { type: 'captions', cues: g, track: t }) } }, e.onInitPtsFound = function(t, e) { const r = this; const i = e.frag; const n = e.id; const a = e.initPTS; const s = e.timescale; const o = this.unparsedVttFrags; n === 'main' && (this.initPTS[i.cc] = { baseTime: a, timescale: s }), o.length && (this.unparsedVttFrags = [], o.forEach(function(t) { r.onFragLoaded(S.FRAG_LOADED, t) })) }, e.getExistingTrack = function(t, e) { const r = this.media; if (r) for (let i = 0; i < r.textTracks.length; i++) { const n = r.textTracks[i]; if (qa(n, { name: t, lang: e, attrs: {} })) return n } return null }, e.createCaptionsTrack = function(t) { this.config.renderTextTracksNatively ? this.createNativeTrack(t) : this.createNonNativeTrack(t) }, e.createNativeTrack = function(t) { if (!this.captionsTracks[t]) { const e = this.captionsProperties; const r = this.captionsTracks; const i = this.media; const n = e[t]; const a = n.label; const s = n.languageCode; const o = this.getExistingTrack(a, s); if (o)r[t] = o, Ne(r[t]), Me(r[t], i); else { const l = this.createTextTrack('captions', a, s); l && (l[t] = !0, r[t] = l) } } }, e.createNonNativeTrack = function(t) { if (!this.nonNativeCaptionsTracks[t]) { const e = this.captionsProperties[t]; if (e) { const r = { _id: t, label: e.label, kind: 'captions', default: !!e.media && !!e.media.default, closedCaptions: e.media }; this.nonNativeCaptionsTracks[t] = r, this.hls.trigger(S.NON_NATIVE_TEXT_TRACKS_FOUND, { tracks: [r] }) } } }, e.createTextTrack = function(t, e, r) { const i = this.media; if (i) return i.addTextTrack(t, e, r) }, e.onMediaAttaching = function(t, e) { this.media = e.media, this._cleanTracks() }, e.onMediaDetaching = function() { const t = this.captionsTracks; Object.keys(t).forEach(function(e) { Ne(t[e]), delete t[e] }), this.nonNativeCaptionsTracks = {} }, e.onManifestLoading = function() { this.lastCc = -1, this.lastSn = -1, this.lastPartIndex = -1, this.prevCC = -1, this.vttCCs = { ccOffset: 0, presentationOffset: 0, 0: { start: 0, prevCC: -1, new: !0 } }, this._cleanTracks(), this.tracks = [], this.captionsTracks = {}, this.nonNativeCaptionsTracks = {}, this.textTracks = [], this.unparsedVttFrags = [], this.initPTS = [], this.cea608Parser1 && this.cea608Parser2 && (this.cea608Parser1.reset(), this.cea608Parser2.reset()) }, e._cleanTracks = function() { const t = this.media; if (t) { const e = t.textTracks; if (e) for (let r = 0; r < e.length; r++)Ne(e[r]) } }, e.onSubtitleTracksUpdated = function(t, e) { const r = this; const i = e.subtitleTracks || []; const n = i.some(function(t) { return t.textCodec === Fa }); if (this.config.enableWebVTT || n && this.config.enableIMSC1) { if (Hn(this.tracks, i)) return void (this.tracks = i); if (this.textTracks = [], this.tracks = i, this.config.renderTextTracksNatively) { const a = this.media; const s = a ? Be(a.textTracks) : null; if (this.tracks.forEach(function(t, e) { let i; if (s) { for (var n = null, a = 0; a < s.length; a++) if (s[a] && qa(s[a], t)) { n = s[a], s[a] = null; break }n && (i = n) } if (i)Ne(i); else { const o = ja(t); (i = r.createTextTrack(o, t.name, t.lang)) && (i.mode = 'disabled') }i && r.textTracks.push(i) }), s != null && s.length) { const o = s.filter(function(t) { return t !== null }).map(function(t) { return t.label }); o.length && w.warn('Media element contains unused subtitle tracks: ' + o.join(', ') + '. Replace media element for each source to clear TextTracks and captions menu.') } } else if (this.tracks.length) { const l = this.tracks.map(function(t) { return { label: t.name, kind: t.type.toLowerCase(), default: t.default, subtitleTrack: t } }); this.hls.trigger(S.NON_NATIVE_TEXT_TRACKS_FOUND, { tracks: l }) } } }, e.onManifestLoaded = function(t, e) { const r = this; this.config.enableCEA708Captions && e.captions && e.captions.forEach(function(t) { const e = /(?:CC|SERVICE)([1-4])/.exec(t.instreamId); if (e) { const i = 'textTrack' + e[1]; const n = r.captionsProperties[i]; n && (n.label = t.name, t.lang && (n.languageCode = t.lang), n.media = t) } }) }, e.closedCaptionsForLevel = function(t) { const e = this.hls.levels[t.level]; return e == null ? void 0 : e.attrs['CLOSED-CAPTIONS'] }, e.onFragLoading = function(t, e) { if (this.enabled && e.frag.type === we) { let r; let i; const n = this.cea608Parser1; const a = this.cea608Parser2; const s = this.lastSn; const o = e.frag; const l = o.cc; const u = o.sn; const h = (r = (i = e.part) == null ? void 0 : i.index) != null ? r : -1; n && a && (u !== s + 1 || u === s && h !== this.lastPartIndex + 1 || l !== this.lastCc) && (n.reset(), a.reset()), this.lastCc = l, this.lastSn = u, this.lastPartIndex = h } }, e.onFragLoaded = function(t, e) { const r = e.frag; const i = e.payload; if (r.type === _e) if (i.byteLength) { const n = r.decryptdata; const a = 'stats' in e; if (n == null || !n.encrypted || a) { const s = this.tracks[r.level]; const o = this.vttCCs; o[r.cc] || (o[r.cc] = { start: r.start, prevCC: this.prevCC, new: !0 }, this.prevCC = r.cc), s && s.textCodec === Fa ? this._parseIMSC1(r, i) : this._parseVTTs(e) } } else this.hls.trigger(S.SUBTITLE_FRAG_PROCESSED, { success: !1, frag: r, error: new Error('Empty subtitle payload') }) }, e._parseIMSC1 = function(t, e) { const r = this; const i = this.hls; Ua(e, this.initPTS[t.cc], function(e) { r._appendCues(e, t.level), i.trigger(S.SUBTITLE_FRAG_PROCESSED, { success: !0, frag: t }) }, function(e) { w.log('Failed to parse IMSC1: ' + e), i.trigger(S.SUBTITLE_FRAG_PROCESSED, { success: !1, frag: t, error: e }) }) }, e._parseVTTs = function(t) { let e; const r = this; const i = t.frag; const n = t.payload; const a = this.initPTS; const s = this.unparsedVttFrags; const o = a.length - 1; if (a[i.cc] || o !== -1) { const l = this.hls; Pa((e = i.initSegment) != null && e.data ? Kt(i.initSegment.data, new Uint8Array(n)) : n, this.initPTS[i.cc], this.vttCCs, i.cc, i.start, function(t) { r._appendCues(t, i.level), l.trigger(S.SUBTITLE_FRAG_PROCESSED, { success: !0, frag: i }) }, function(e) { const a = e.message === 'Missing initPTS for VTT MPEGTS'; a ? s.push(t) : r._fallbackToIMSC1(i, n), w.log('Failed to parse VTT cue: ' + e), a && o > i.cc || l.trigger(S.SUBTITLE_FRAG_PROCESSED, { success: !1, frag: i, error: e }) }) } else s.push(t) }, e._fallbackToIMSC1 = function(t, e) { const r = this; const i = this.tracks[t.level]; i.textCodec || Ua(e, this.initPTS[t.cc], function() { i.textCodec = Fa, r._parseIMSC1(t, e) }, function() { i.textCodec = 'wvtt' }) }, e._appendCues = function(t, e) { const r = this.hls; if (this.config.renderTextTracksNatively) { const i = this.textTracks[e]; if (!i || i.mode === 'disabled') return; t.forEach(function(t) { return Oe(i, t) }) } else { const n = this.tracks[e]; if (!n) return; const a = n.default ? 'default' : 'subtitles' + e; r.trigger(S.CUES_PARSED, { type: 'subtitles', cues: t, track: a }) } }, e.onFragDecrypted = function(t, e) { e.frag.type === _e && this.onFragLoaded(S.FRAG_LOADED, e) }, e.onSubtitleTracksCleared = function() { this.tracks = [], this.captionsTracks = {} }, e.onFragParsingUserdata = function(t, e) { this.initCea608Parsers(); const r = this.cea608Parser1; const i = this.cea608Parser2; if (this.enabled && r && i) { const n = e.frag; const a = e.samples; if (n.type !== we || this.closedCaptionsForLevel(n) !== 'NONE') for (let s = 0; s < a.length; s++) { const o = a[s].bytes; if (o) { const l = this.extractCea608Data(o); r.addData(a[s].pts, l[0]), i.addData(a[s].pts, l[1]) } } } }, e.onBufferFlushing = function(t, e) { const r = e.startOffset; const i = e.endOffset; const n = e.endOffsetSubtitles; const a = e.type; const s = this.media; if (s && !(s.currentTime < i)) { if (!a || a === 'video') { const o = this.captionsTracks; Object.keys(o).forEach(function(t) { return Ue(o[t], r, i) }) } if (this.config.renderTextTracksNatively && r === 0 && void 0 !== n) { const l = this.textTracks; Object.keys(l).forEach(function(t) { return Ue(l[t], r, n) }) } } }, e.extractCea608Data = function(t) { for (var e = [[], []], r = 31 & t[0], i = 2, n = 0; n < r; n++) { const a = t[i++]; const s = 127 & t[i++]; const o = 127 & t[i++]; if ((s !== 0 || o !== 0) && (4 & a) != 0) { const l = 3 & a; l !== 0 && l !== 1 || (e[l].push(s), e[l].push(o)) } } return e }, t }()); function ja(t) { return t.characteristics && /transcribes-spoken-dialog/gi.test(t.characteristics) && /describes-music-and-sound/gi.test(t.characteristics) ? 'captions' : 'subtitles' } function qa(t, e) { return !!t && t.kind === ja(e) && Yn(e, t) } const Xa = (function() { function t(t) { this.hls = void 0, this.autoLevelCapping = void 0, this.firstLevel = void 0, this.media = void 0, this.restrictedLevels = void 0, this.timer = void 0, this.clientRect = void 0, this.streamController = void 0, this.hls = t, this.autoLevelCapping = Number.POSITIVE_INFINITY, this.firstLevel = -1, this.media = null, this.restrictedLevels = [], this.timer = void 0, this.clientRect = null, this.registerListeners() } const e = t.prototype; return e.setStreamController = function(t) { this.streamController = t }, e.destroy = function() { this.hls && this.unregisterListener(), this.timer && this.stopCapping(), this.media = null, this.clientRect = null, this.hls = this.streamController = null }, e.registerListeners = function() { const t = this.hls; t.on(S.FPS_DROP_LEVEL_CAPPING, this.onFpsDropLevelCapping, this), t.on(S.MEDIA_ATTACHING, this.onMediaAttaching, this), t.on(S.MANIFEST_PARSED, this.onManifestParsed, this), t.on(S.LEVELS_UPDATED, this.onLevelsUpdated, this), t.on(S.BUFFER_CODECS, this.onBufferCodecs, this), t.on(S.MEDIA_DETACHING, this.onMediaDetaching, this) }, e.unregisterListener = function() { const t = this.hls; t.off(S.FPS_DROP_LEVEL_CAPPING, this.onFpsDropLevelCapping, this), t.off(S.MEDIA_ATTACHING, this.onMediaAttaching, this), t.off(S.MANIFEST_PARSED, this.onManifestParsed, this), t.off(S.LEVELS_UPDATED, this.onLevelsUpdated, this), t.off(S.BUFFER_CODECS, this.onBufferCodecs, this), t.off(S.MEDIA_DETACHING, this.onMediaDetaching, this) }, e.onFpsDropLevelCapping = function(t, e) { const r = this.hls.levels[e.droppedLevel]; this.isLevelAllowed(r) && this.restrictedLevels.push({ bitrate: r.bitrate, height: r.height, width: r.width }) }, e.onMediaAttaching = function(t, e) { this.media = e.media instanceof HTMLVideoElement ? e.media : null, this.clientRect = null, this.timer && this.hls.levels.length && this.detectPlayerSize() }, e.onManifestParsed = function(t, e) { const r = this.hls; this.restrictedLevels = [], this.firstLevel = e.firstLevel, r.config.capLevelToPlayerSize && e.video && this.startCapping() }, e.onLevelsUpdated = function(t, e) { this.timer && y(this.autoLevelCapping) && this.detectPlayerSize() }, e.onBufferCodecs = function(t, e) { this.hls.config.capLevelToPlayerSize && e.video && this.startCapping() }, e.onMediaDetaching = function() { this.stopCapping() }, e.detectPlayerSize = function() { if (this.media) { if (this.mediaHeight <= 0 || this.mediaWidth <= 0) return void (this.clientRect = null); const t = this.hls.levels; if (t.length) { const e = this.hls; const r = this.getMaxLevel(t.length - 1); r !== this.autoLevelCapping && w.log('Setting autoLevelCapping to ' + r + ': ' + t[r].height + 'p@' + t[r].bitrate + ' for media ' + this.mediaWidth + 'x' + this.mediaHeight), e.autoLevelCapping = r, e.autoLevelCapping > this.autoLevelCapping && this.streamController && this.streamController.nextLevelSwitch(), this.autoLevelCapping = e.autoLevelCapping } } }, e.getMaxLevel = function(e) { const r = this; const i = this.hls.levels; if (!i.length) return -1; const n = i.filter(function(t, i) { return r.isLevelAllowed(t) && i <= e }); return this.clientRect = null, t.getMaxLevelByMediaSize(n, this.mediaWidth, this.mediaHeight) }, e.startCapping = function() { this.timer || (this.autoLevelCapping = Number.POSITIVE_INFINITY, self.clearInterval(this.timer), this.timer = self.setInterval(this.detectPlayerSize.bind(this), 1e3), this.detectPlayerSize()) }, e.stopCapping = function() { this.restrictedLevels = [], this.firstLevel = -1, this.autoLevelCapping = Number.POSITIVE_INFINITY, this.timer && (self.clearInterval(this.timer), this.timer = void 0) }, e.getDimensions = function() { if (this.clientRect) return this.clientRect; const t = this.media; const e = { width: 0, height: 0 }; if (t) { const r = t.getBoundingClientRect(); e.width = r.width, e.height = r.height, e.width || e.height || (e.width = r.right - r.left || t.width || 0, e.height = r.bottom - r.top || t.height || 0) } return this.clientRect = e, e }, e.isLevelAllowed = function(t) { return !this.restrictedLevels.some(function(e) { return t.bitrate === e.bitrate && t.width === e.width && t.height === e.height }) }, t.getMaxLevelByMediaSize = function(t, e, r) { if (t == null || !t.length) return -1; for (var i, n, a = t.length - 1, s = Math.max(e, r), o = 0; o < t.length; o += 1) { const l = t[o]; if ((l.width >= s || l.height >= s) && (i = l, !(n = t[o + 1]) || i.width !== n.width || i.height !== n.height)) { a = o; break } } return a }, s(t, [{ key: 'mediaWidth', get: function() { return this.getDimensions().width * this.contentScaleFactor } }, { key: 'mediaHeight', get: function() { return this.getDimensions().height * this.contentScaleFactor } }, { key: 'contentScaleFactor', get: function() { let t = 1; if (!this.hls.config.ignoreDevicePixelRatio) try { t = self.devicePixelRatio } catch (t) {} return t } }]), t }()); const za = (function() { function t(t) { this.hls = void 0, this.isVideoPlaybackQualityAvailable = !1, this.timer = void 0, this.media = null, this.lastTime = void 0, this.lastDroppedFrames = 0, this.lastDecodedFrames = 0, this.streamController = void 0, this.hls = t, this.registerListeners() } const e = t.prototype; return e.setStreamController = function(t) { this.streamController = t }, e.registerListeners = function() { this.hls.on(S.MEDIA_ATTACHING, this.onMediaAttaching, this) }, e.unregisterListeners = function() { this.hls.off(S.MEDIA_ATTACHING, this.onMediaAttaching, this) }, e.destroy = function() { this.timer && clearInterval(this.timer), this.unregisterListeners(), this.isVideoPlaybackQualityAvailable = !1, this.media = null }, e.onMediaAttaching = function(t, e) { const r = this.hls.config; if (r.capLevelOnFPSDrop) { const i = e.media instanceof self.HTMLVideoElement ? e.media : null; this.media = i, i && typeof i.getVideoPlaybackQuality === 'function' && (this.isVideoPlaybackQualityAvailable = !0), self.clearInterval(this.timer), this.timer = self.setInterval(this.checkFPSInterval.bind(this), r.fpsDroppedMonitoringPeriod) } }, e.checkFPS = function(t, e, r) { const i = performance.now(); if (e) { if (this.lastTime) { const n = i - this.lastTime; const a = r - this.lastDroppedFrames; const s = e - this.lastDecodedFrames; const o = 1e3 * a / n; const l = this.hls; if (l.trigger(S.FPS_DROP, { currentDropped: a, currentDecoded: s, totalDroppedFrames: r }), o > 0 && a > l.config.fpsDroppedMonitoringThreshold * s) { let u = l.currentLevel; w.warn('drop FPS ratio greater than max allowed value for currentLevel: ' + u), u > 0 && (l.autoLevelCapping === -1 || l.autoLevelCapping >= u) && (u -= 1, l.trigger(S.FPS_DROP_LEVEL_CAPPING, { level: u, droppedLevel: l.currentLevel }), l.autoLevelCapping = u, this.streamController.nextLevelSwitch()) } } this.lastTime = i, this.lastDroppedFrames = r, this.lastDecodedFrames = e } }, e.checkFPSInterval = function() { const t = this.media; if (t) if (this.isVideoPlaybackQualityAvailable) { const e = t.getVideoPlaybackQuality(); this.checkFPS(t, e.totalVideoFrames, e.droppedVideoFrames) } else this.checkFPS(t, t.webkitDecodedFrameCount, t.webkitDroppedFrameCount) }, t }()); const Qa = '[eme]'; const Ja = (function() { function t(e) { this.hls = void 0, this.config = void 0, this.media = null, this.keyFormatPromise = null, this.keySystemAccessPromises = {}, this._requestLicenseFailureCount = 0, this.mediaKeySessions = [], this.keyIdToKeySessionPromise = {}, this.setMediaKeysQueue = t.CDMCleanupPromise ? [t.CDMCleanupPromise] : [], this.onMediaEncrypted = this._onMediaEncrypted.bind(this), this.onWaitingForKey = this._onWaitingForKey.bind(this), this.debug = w.debug.bind(w, Qa), this.log = w.log.bind(w, Qa), this.warn = w.warn.bind(w, Qa), this.error = w.error.bind(w, Qa), this.hls = e, this.config = e.config, this.registerListeners() } const e = t.prototype; return e.destroy = function() { this.unregisterListeners(), this.onMediaDetached(); const t = this.config; t.requestMediaKeySystemAccessFunc = null, t.licenseXhrSetup = t.licenseResponseCallback = void 0, t.drmSystems = t.drmSystemOptions = {}, this.hls = this.onMediaEncrypted = this.onWaitingForKey = this.keyIdToKeySessionPromise = null, this.config = null }, e.registerListeners = function() { this.hls.on(S.MEDIA_ATTACHED, this.onMediaAttached, this), this.hls.on(S.MEDIA_DETACHED, this.onMediaDetached, this), this.hls.on(S.MANIFEST_LOADING, this.onManifestLoading, this), this.hls.on(S.MANIFEST_LOADED, this.onManifestLoaded, this) }, e.unregisterListeners = function() { this.hls.off(S.MEDIA_ATTACHED, this.onMediaAttached, this), this.hls.off(S.MEDIA_DETACHED, this.onMediaDetached, this), this.hls.off(S.MANIFEST_LOADING, this.onManifestLoading, this), this.hls.off(S.MANIFEST_LOADED, this.onManifestLoaded, this) }, e.getLicenseServerUrl = function(t) { const e = this.config; const r = e.drmSystems; const i = e.widevineLicenseUrl; const n = r[t]; if (n) return n.licenseUrl; if (t === q.WIDEVINE && i) return i; throw new Error('no license server URL configured for key-system "' + t + '"') }, e.getServerCertificateUrl = function(t) { const e = this.config.drmSystems[t]; if (e) return e.serverCertificateUrl; this.log('No Server Certificate in config.drmSystems["' + t + '"]') }, e.attemptKeySystemAccess = function(t) { const e = this; const r = this.hls.levels; const i = function(t, e, r) { return !!t && r.indexOf(t) === e }; const n = r.map(function(t) { return t.audioCodec }).filter(i); const a = r.map(function(t) { return t.videoCodec }).filter(i); return n.length + a.length === 0 && a.push('avc1.42e01e'), new Promise(function(r, i) { !(function t(s) { const o = s.shift(); e.getMediaKeysPromise(o, n, a).then(function(t) { return r({ keySystem: o, mediaKeys: t }) }).catch(function(e) { s.length ? t(s) : i(e instanceof rs ? e : new rs({ type: L.KEY_SYSTEM_ERROR, details: A.KEY_SYSTEM_NO_ACCESS, error: e, fatal: !0 }, e.message)) }) }(t)) }) }, e.requestMediaKeySystemAccess = function(t, e) { const r = this.config.requestMediaKeySystemAccessFunc; if (typeof r !== 'function') { let i = 'Configured requestMediaKeySystemAccess is not a function ' + r; return it === null && self.location.protocol === 'http:' && (i = 'navigator.requestMediaKeySystemAccess is not available over insecure protocol ' + location.protocol), Promise.reject(new Error(i)) } return r(t, e) }, e.getMediaKeysPromise = function(t, e, r) { const i = this; const n = (function(t, e, r, i) { let n; switch (t) { case q.FAIRPLAY:n = ['cenc', 'sinf']; break; case q.WIDEVINE:case q.PLAYREADY:n = ['cenc']; break; case q.CLEARKEY:n = ['cenc', 'keyids']; break; default:throw new Error('Unknown key-system: ' + t) } return (function(t, e, r, i) { return [{ initDataTypes: t, persistentState: i.persistentState || 'optional', distinctiveIdentifier: i.distinctiveIdentifier || 'optional', sessionTypes: i.sessionTypes || [i.sessionType || 'temporary'], audioCapabilities: e.map(function(t) { return { contentType: 'audio/mp4; codecs="' + t + '"', robustness: i.audioRobustness || '', encryptionScheme: i.audioEncryptionScheme || null } }), videoCapabilities: r.map(function(t) { return { contentType: 'video/mp4; codecs="' + t + '"', robustness: i.videoRobustness || '', encryptionScheme: i.videoEncryptionScheme || null } }) }] }(n, e, r, i)) }(t, e, r, this.config.drmSystemOptions)); const a = this.keySystemAccessPromises[t]; let s = a == null ? void 0 : a.keySystemAccess; if (!s) { this.log('Requesting encrypted media "' + t + '" key-system access with config: ' + JSON.stringify(n)), s = this.requestMediaKeySystemAccess(t, n); const o = this.keySystemAccessPromises[t] = { keySystemAccess: s }; return s.catch(function(e) { i.log('Failed to obtain access to key-system "' + t + '": ' + e) }), s.then(function(e) { i.log('Access for key-system "' + e.keySystem + '" obtained'); const r = i.fetchServerCertificate(t); return i.log('Create media-keys for "' + t + '"'), o.mediaKeys = e.createMediaKeys().then(function(e) { return i.log('Media-keys created for "' + t + '"'), r.then(function(r) { return r ? i.setMediaKeysServerCertificate(e, t, r) : e }) }), o.mediaKeys.catch(function(e) { i.error('Failed to create media-keys for "' + t + '"}: ' + e) }), o.mediaKeys }) } return s.then(function() { return a.mediaKeys }) }, e.createMediaKeySessionContext = function(t) { const e = t.decryptdata; const r = t.keySystem; const i = t.mediaKeys; this.log('Creating key-system session "' + r + '" keyId: ' + Lt(e.keyId || [])); const n = i.createSession(); const a = { decryptdata: e, keySystem: r, mediaKeys: i, mediaKeysSession: n, keyStatus: 'status-pending' }; return this.mediaKeySessions.push(a), a }, e.renewKeySession = function(t) { const e = t.decryptdata; if (e.pssh) { const r = this.createMediaKeySessionContext(t); const i = this.getKeyIdString(e); this.keyIdToKeySessionPromise[i] = this.generateRequestWithPreferredKeySession(r, 'cenc', e.pssh, 'expired') } else this.warn('Could not renew expired session. Missing pssh initData.'); this.removeSession(t) }, e.getKeyIdString = function(t) { if (!t) throw new Error('Could not read keyId of undefined decryptdata'); if (t.keyId === null) throw new Error('keyId is null'); return Lt(t.keyId) }, e.updateKeySession = function(t, e) { let r; const i = t.mediaKeysSession; return this.log('Updating key-session "' + i.sessionId + '" for keyID ' + Lt(((r = t.decryptdata) == null ? void 0 : r.keyId) || []) + '\n      } (data length: ' + (e ? e.byteLength : e) + ')'), i.update(e) }, e.selectKeySystemFormat = function(t) { const e = Object.keys(t.levelkeys || {}); return this.keyFormatPromise || (this.log('Selecting key-system from fragment (sn: ' + t.sn + ' ' + t.type + ': ' + t.level + ') key formats ' + e.join(', ')), this.keyFormatPromise = this.getKeyFormatPromise(e)), this.keyFormatPromise }, e.getKeyFormatPromise = function(t) { const e = this; return new Promise(function(r, i) { const n = et(e.config); const a = t.map($).filter(function(t) { return !!t && n.indexOf(t) !== -1 }); return e.getKeySystemSelectionPromise(a).then(function(t) { const e = t.keySystem; const n = tt(e); n ? r(n) : i(new Error('Unable to find format for key-system "' + e + '"')) }).catch(i) }) }, e.loadKey = function(t) { const e = this; const r = t.keyInfo.decryptdata; const i = this.getKeyIdString(r); const n = '(keyId: ' + i + ' format: "' + r.keyFormat + '" method: ' + r.method + ' uri: ' + r.uri + ')'; this.log('Starting session for key ' + n); let a = this.keyIdToKeySessionPromise[i]; return a || (a = this.keyIdToKeySessionPromise[i] = this.getKeySystemForKeyPromise(r).then(function(i) { const a = i.keySystem; const s = i.mediaKeys; return e.throwIfDestroyed(), e.log('Handle encrypted media sn: ' + t.frag.sn + ' ' + t.frag.type + ': ' + t.frag.level + ' using key ' + n), e.attemptSetMediaKeys(a, s).then(function() { e.throwIfDestroyed(); const t = e.createMediaKeySessionContext({ keySystem: a, mediaKeys: s, decryptdata: r }); return e.generateRequestWithPreferredKeySession(t, 'cenc', r.pssh, 'playlist-key') }) })).catch(function(t) { return e.handleError(t) }), a }, e.throwIfDestroyed = function(t) { if (!this.hls) throw new Error('invalid state') }, e.handleError = function(t) { this.hls && (this.error(t.message), t instanceof rs ? this.hls.trigger(S.ERROR, t.data) : this.hls.trigger(S.ERROR, { type: L.KEY_SYSTEM_ERROR, details: A.KEY_SYSTEM_NO_KEYS, error: t, fatal: !0 })) }, e.getKeySystemForKeyPromise = function(t) { const e = this.getKeyIdString(t); const r = this.keyIdToKeySessionPromise[e]; if (!r) { const i = $(t.keyFormat); const n = i ? [i] : et(this.config); return this.attemptKeySystemAccess(n) } return r }, e.getKeySystemSelectionPromise = function(t) { if (t.length || (t = et(this.config)), t.length === 0) throw new rs({ type: L.KEY_SYSTEM_ERROR, details: A.KEY_SYSTEM_NO_CONFIGURED_LICENSE, fatal: !0 }, 'Missing key-system license configuration options ' + JSON.stringify({ drmSystems: this.config.drmSystems })); return this.attemptKeySystemAccess(t) }, e._onMediaEncrypted = function(t) { const e = this; const r = t.initDataType; const i = t.initData; if (this.debug('"' + t.type + '" event: init data type: "' + r + '"'), i !== null) { let n, a; if (r === 'sinf' && this.config.drmSystems[q.FAIRPLAY]) { const s = bt(new Uint8Array(i)); try { const o = V(JSON.parse(s).sinf); const l = Bt(new Uint8Array(o)); if (!l) return; n = l.subarray(8, 24), a = q.FAIRPLAY } catch (t) { return void this.warn('Failed to parse sinf "encrypted" event message initData') } } else { const u = (function(t) { if (!(t instanceof ArrayBuffer) || t.byteLength < 32) return null; const e = { version: 0, systemId: '', kids: null, data: null }; const r = new DataView(t); const i = r.getUint32(0); if (t.byteLength !== i && i > 44) return null; if (r.getUint32(4) !== 1886614376) return null; if (e.version = r.getUint32(8) >>> 24, e.version > 1) return null; e.systemId = Lt(new Uint8Array(t, 12, 16)); const n = r.getUint32(28); if (e.version === 0) { if (i - 32 < n) return null; e.data = new Uint8Array(t, 32, n) } else if (e.version === 1) { e.kids = []; for (let a = 0; a < n; a++)e.kids.push(new Uint8Array(t, 32 + 16 * a, 16)) } return e }(i)); if (u === null) return; u.version === 0 && u.systemId === Z && u.data && (n = u.data.subarray(8, 24)), a = (function(t) { if (t === Z) return q.WIDEVINE }(u.systemId)) } if (a && n) { for (var h, d = Lt(n), c = this.keyIdToKeySessionPromise, f = this.mediaKeySessions, g = c[d], v = function() { const t = f[m]; const a = t.decryptdata; if (a.pssh || !a.keyId) return 0; const s = Lt(a.keyId); return d === s || a.uri.replace(/-/g, '').indexOf(d) !== -1 ? (g = c[s], delete c[s], a.pssh = new Uint8Array(i), a.keyId = n, g = c[d] = g.then(function() { return e.generateRequestWithPreferredKeySession(t, r, i, 'encrypted-event-key-match') }), 1) : void 0 }, m = 0; m < f.length && ((h = v()) === 0 || h !== 1); m++);g || (g = c[d] = this.getKeySystemSelectionPromise([a]).then(function(t) { let a; const s = t.keySystem; const o = t.mediaKeys; e.throwIfDestroyed(); const l = new Xt('ISO-23001-7', d, (a = tt(s)) != null ? a : ''); return l.pssh = new Uint8Array(i), l.keyId = n, e.attemptSetMediaKeys(s, o).then(function() { e.throwIfDestroyed(); const t = e.createMediaKeySessionContext({ decryptdata: l, keySystem: s, mediaKeys: o }); return e.generateRequestWithPreferredKeySession(t, r, i, 'encrypted-event-no-match') }) })), g.catch(function(t) { return e.handleError(t) }) } } }, e._onWaitingForKey = function(t) { this.log('"' + t.type + '" event') }, e.attemptSetMediaKeys = function(t, e) { const r = this; const i = this.setMediaKeysQueue.slice(); this.log('Setting media-keys for "' + t + '"'); const n = Promise.all(i).then(function() { if (!r.media) throw new Error('Attempted to set mediaKeys without media element attached'); return r.media.setMediaKeys(e) }); return this.setMediaKeysQueue.push(n), n.then(function() { r.log('Media-keys set for "' + t + '"'), i.push(n), r.setMediaKeysQueue = r.setMediaKeysQueue.filter(function(t) { return i.indexOf(t) === -1 }) }) }, e.generateRequestWithPreferredKeySession = function(t, e, r, i) { let n; let a; const s = this; const o = (n = this.config.drmSystems) == null || (a = n[t.keySystem]) == null ? void 0 : a.generateRequest; if (o) try { const l = o.call(this.hls, e, r, t); if (!l) throw new Error('Invalid response from configured generateRequest filter'); e = l.initDataType, r = t.decryptdata.pssh = l.initData ? new Uint8Array(l.initData) : null } catch (t) { let u; if (this.warn(t.message), (u = this.hls) != null && u.config.debug) throw t } if (r === null) return this.log('Skipping key-session request for "' + i + '" (no initData)'), Promise.resolve(t); const h = this.getKeyIdString(t.decryptdata); this.log('Generating key-session request for "' + i + '": ' + h + ' (init data type: ' + e + ' length: ' + (r ? r.byteLength : null) + ')'); const d = new Nn(); const c = t._onmessage = function(e) { const r = t.mediaKeysSession; if (r) { const i = e.messageType; const n = e.message; s.log('"' + i + '" message event for session "' + r.sessionId + '" message size: ' + n.byteLength), i === 'license-request' || i === 'license-renewal' ? s.renewLicense(t, n).catch(function(t) { s.handleError(t), d.emit('error', t) }) : i === 'license-release' ? t.keySystem === q.FAIRPLAY && (s.updateKeySession(t, W('acknowledged')), s.removeSession(t)) : s.warn('unhandled media key message type "' + i + '"') } else d.emit('error', new Error('invalid state')) }; const f = t._onkeystatuseschange = function(e) { if (t.mediaKeysSession) { s.onKeyStatusChange(t); const r = t.keyStatus; d.emit('keyStatus', r), r === 'expired' && (s.warn(t.keySystem + ' expired for key ' + h), s.renewKeySession(t)) } else d.emit('error', new Error('invalid state')) }; t.mediaKeysSession.addEventListener('message', c), t.mediaKeysSession.addEventListener('keystatuseschange', f); const g = new Promise(function(t, e) { d.on('error', e), d.on('keyStatus', function(r) { r.startsWith('usable') ? t() : r === 'output-restricted' ? e(new rs({ type: L.KEY_SYSTEM_ERROR, details: A.KEY_SYSTEM_STATUS_OUTPUT_RESTRICTED, fatal: !1 }, 'HDCP level output restricted')) : r === 'internal-error' ? e(new rs({ type: L.KEY_SYSTEM_ERROR, details: A.KEY_SYSTEM_STATUS_INTERNAL_ERROR, fatal: !0 }, 'key status changed to "' + r + '"')) : r === 'expired' ? e(new Error('key expired while generating request')) : s.warn('unhandled key status change "' + r + '"') }) }); return t.mediaKeysSession.generateRequest(e, r).then(function() { let e; s.log('Request generated for key-session "' + ((e = t.mediaKeysSession) == null ? void 0 : e.sessionId) + '" keyId: ' + h) }).catch(function(t) { throw new rs({ type: L.KEY_SYSTEM_ERROR, details: A.KEY_SYSTEM_NO_SESSION, error: t, fatal: !1 }, 'Error generating key-session request: ' + t) }).then(function() { return g }).catch(function(e) { throw d.removeAllListeners(), s.removeSession(t), e }).then(function() { return d.removeAllListeners(), t }) }, e.onKeyStatusChange = function(t) { const e = this; t.mediaKeysSession.keyStatuses.forEach(function(r, i) { e.log('key status change "' + r + '" for keyStatuses keyId: ' + Lt('buffer' in i ? new Uint8Array(i.buffer, i.byteOffset, i.byteLength) : new Uint8Array(i)) + ' session keyId: ' + Lt(new Uint8Array(t.decryptdata.keyId || [])) + ' uri: ' + t.decryptdata.uri), t.keyStatus = r }) }, e.fetchServerCertificate = function(t) { const e = this.config; const r = new (0, e.loader)(e); const n = this.getServerCertificateUrl(t); return n ? (this.log('Fetching server certificate for "' + t + '"'), new Promise(function(a, s) { const o = { responseType: 'arraybuffer', url: n }; const l = e.certLoadPolicy.default; const u = { loadPolicy: l, timeout: l.maxLoadTimeMs, maxRetry: 0, retryDelay: 0, maxRetryDelay: 0 }; const h = { onSuccess: function(t, e, r, i) { a(t.data) }, onError: function(e, r, a, l) { s(new rs({ type: L.KEY_SYSTEM_ERROR, details: A.KEY_SYSTEM_SERVER_CERTIFICATE_REQUEST_FAILED, fatal: !0, networkDetails: a, response: i({ url: o.url, data: void 0 }, e) }, '"' + t + '" certificate request failed (' + n + '). Status: ' + e.code + ' (' + e.text + ')')) }, onTimeout: function(e, r, i) { s(new rs({ type: L.KEY_SYSTEM_ERROR, details: A.KEY_SYSTEM_SERVER_CERTIFICATE_REQUEST_FAILED, fatal: !0, networkDetails: i, response: { url: o.url, data: void 0 } }, '"' + t + '" certificate request timed out (' + n + ')')) }, onAbort: function(t, e, r) { s(new Error('aborted')) } }; r.load(o, u, h) })) : Promise.resolve() }, e.setMediaKeysServerCertificate = function(t, e, r) { const i = this; return new Promise(function(n, a) { t.setServerCertificate(r).then(function(a) { i.log('setServerCertificate ' + (a ? 'success' : 'not supported by CDM') + ' (' + (r == null ? void 0 : r.byteLength) + ') on "' + e + '"'), n(t) }).catch(function(t) { a(new rs({ type: L.KEY_SYSTEM_ERROR, details: A.KEY_SYSTEM_SERVER_CERTIFICATE_UPDATE_FAILED, error: t, fatal: !0 }, t.message)) }) }) }, e.renewLicense = function(t, e) { const r = this; return this.requestLicense(t, new Uint8Array(e)).then(function(e) { return r.updateKeySession(t, new Uint8Array(e)).catch(function(t) { throw new rs({ type: L.KEY_SYSTEM_ERROR, details: A.KEY_SYSTEM_SESSION_UPDATE_FAILED, error: t, fatal: !0 }, t.message) }) }) }, e.unpackPlayReadyKeyMessage = function(t, e) { const r = String.fromCharCode.apply(null, new Uint16Array(e.buffer)); if (!r.includes('PlayReadyKeyMessage')) return t.setRequestHeader('Content-Type', 'text/xml; charset=utf-8'), e; const i = (new DOMParser()).parseFromString(r, 'application/xml'); const n = i.querySelectorAll('HttpHeader'); if (n.length > 0) for (var a, s = 0, o = n.length; s < o; s++) { var l; var u; const h = (l = (a = n[s]).querySelector('name')) == null ? void 0 : l.textContent; const d = (u = a.querySelector('value')) == null ? void 0 : u.textContent; h && d && t.setRequestHeader(h, d) } const c = i.querySelector('Challenge'); const f = c == null ? void 0 : c.textContent; if (!f) throw new Error('Cannot find <Challenge> in key message'); return W(atob(f)) }, e.setupLicenseXHR = function(t, e, r, i) { const n = this; const a = this.config.licenseXhrSetup; return a ? Promise.resolve().then(function() { if (!r.decryptdata) throw new Error('Key removed'); return a.call(n.hls, t, e, r, i) }).catch(function(s) { if (!r.decryptdata) throw s; return t.open('POST', e, !0), a.call(n.hls, t, e, r, i) }).then(function(r) { return t.readyState || t.open('POST', e, !0), { xhr: t, licenseChallenge: r || i } }) : (t.open('POST', e, !0), Promise.resolve({ xhr: t, licenseChallenge: i })) }, e.requestLicense = function(t, e) { const r = this; const i = this.config.keyLoadPolicy.default; return new Promise(function(n, a) { const s = r.getLicenseServerUrl(t.keySystem); r.log('Sending license request to URL: ' + s); const o = new XMLHttpRequest(); o.responseType = 'arraybuffer', o.onreadystatechange = function() { if (!r.hls || !t.mediaKeysSession) return a(new Error('invalid state')); if (o.readyState === 4) if (o.status === 200) { r._requestLicenseFailureCount = 0; let l = o.response; r.log('License received ' + (l instanceof ArrayBuffer ? l.byteLength : l)); const u = r.config.licenseResponseCallback; if (u) try { l = u.call(r.hls, o, s, t) } catch (t) { r.error(t) }n(l) } else { const h = i.errorRetry; const d = h ? h.maxNumRetry : 0; if (r._requestLicenseFailureCount++, r._requestLicenseFailureCount > d || o.status >= 400 && o.status < 500)a(new rs({ type: L.KEY_SYSTEM_ERROR, details: A.KEY_SYSTEM_LICENSE_REQUEST_FAILED, fatal: !0, networkDetails: o, response: { url: s, data: void 0, code: o.status, text: o.statusText } }, 'License Request XHR failed (' + s + '). Status: ' + o.status + ' (' + o.statusText + ')')); else { const c = d - r._requestLicenseFailureCount + 1; r.warn('Retrying license request, ' + c + ' attempts left'), r.requestLicense(t, e).then(n, a) } } }, t.licenseXhr && t.licenseXhr.readyState !== XMLHttpRequest.DONE && t.licenseXhr.abort(), t.licenseXhr = o, r.setupLicenseXHR(o, s, t, e).then(function(e) { const i = e.xhr; let n = e.licenseChallenge; t.keySystem == q.PLAYREADY && (n = r.unpackPlayReadyKeyMessage(i, n)), i.send(n) }) }) }, e.onMediaAttached = function(t, e) { if (this.config.emeEnabled) { const r = e.media; this.media = r, r.addEventListener('encrypted', this.onMediaEncrypted), r.addEventListener('waitingforkey', this.onWaitingForKey) } }, e.onMediaDetached = function() { const e = this; const r = this.media; const i = this.mediaKeySessions; r && (r.removeEventListener('encrypted', this.onMediaEncrypted), r.removeEventListener('waitingforkey', this.onWaitingForKey), this.media = null), this._requestLicenseFailureCount = 0, this.setMediaKeysQueue = [], this.mediaKeySessions = [], this.keyIdToKeySessionPromise = {}, Xt.clearKeyUriToKeyIdMap(); const n = i.length; t.CDMCleanupPromise = Promise.all(i.map(function(t) { return e.removeSession(t) }).concat(r == null ? void 0 : r.setMediaKeys(null).catch(function(t) { e.log('Could not clear media keys: ' + t) }))).then(function() { n && (e.log('finished closing key sessions and clearing media keys'), i.length = 0) }).catch(function(t) { e.log('Could not close sessions and clear media keys: ' + t) }) }, e.onManifestLoading = function() { this.keyFormatPromise = null }, e.onManifestLoaded = function(t, e) { const r = e.sessionKeys; if (r && this.config.emeEnabled && !this.keyFormatPromise) { const i = r.reduce(function(t, e) { return t.indexOf(e.keyFormat) === -1 && t.push(e.keyFormat), t }, []); this.log('Selecting key-system from session-keys ' + i.join(', ')), this.keyFormatPromise = this.getKeyFormatPromise(i) } }, e.removeSession = function(t) { const e = this; const r = t.mediaKeysSession; const i = t.licenseXhr; if (r) { this.log('Remove licenses and keys and close session ' + r.sessionId), t._onmessage && (r.removeEventListener('message', t._onmessage), t._onmessage = void 0), t._onkeystatuseschange && (r.removeEventListener('keystatuseschange', t._onkeystatuseschange), t._onkeystatuseschange = void 0), i && i.readyState !== XMLHttpRequest.DONE && i.abort(), t.mediaKeysSession = t.decryptdata = t.licenseXhr = void 0; const n = this.mediaKeySessions.indexOf(t); return n > -1 && this.mediaKeySessions.splice(n, 1), r.remove().catch(function(t) { e.log('Could not remove session: ' + t) }).then(function() { return r.close() }).catch(function(t) { e.log('Could not close session: ' + t) }) } }, t }()); Ja.CDMCleanupPromise = void 0; let $a; let Za; let ts; let es; var rs = (function(t) { function e(e, r) { let i; return (i = t.call(this, r) || this).data = void 0, e.error || (e.error = new Error(r)), i.data = e, e.err = e.error, i } return l(e, t), e }(c(Error))); !(function(t) { t.MANIFEST = 'm', t.AUDIO = 'a', t.VIDEO = 'v', t.MUXED = 'av', t.INIT = 'i', t.CAPTION = 'c', t.TIMED_TEXT = 'tt', t.KEY = 'k', t.OTHER = 'o' }($a || ($a = {}))), (function(t) { t.DASH = 'd', t.HLS = 'h', t.SMOOTH = 's', t.OTHER = 'o' }(Za || (Za = {}))), (function(t) { t.OBJECT = 'CMCD-Object', t.REQUEST = 'CMCD-Request', t.SESSION = 'CMCD-Session', t.STATUS = 'CMCD-Status' }(ts || (ts = {}))); const is = ((es = {})[ts.OBJECT] = ['br', 'd', 'ot', 'tb'], es[ts.REQUEST] = ['bl', 'dl', 'mtp', 'nor', 'nrr', 'su'], es[ts.SESSION] = ['cid', 'pr', 'sf', 'sid', 'st', 'v'], es[ts.STATUS] = ['bs', 'rtp'], es); const ns = function t(e, r) { this.value = void 0, this.params = void 0, Array.isArray(e) && (e = e.map(function(e) { return e instanceof t ? e : new t(e) })), this.value = e, this.params = r }; const as = function(t) { this.description = void 0, this.description = t }; const ss = 'Dict'; function os(t, e, r, i) { return new Error('failed to ' + t + ' "' + (n = e, (Array.isArray(n) ? JSON.stringify(n) : n instanceof Map ? 'Map{}' : n instanceof Set ? 'Set{}' : typeof n === 'object' ? JSON.stringify(n) : String(n)) + '" as ') + r, { cause: i }); let n } const ls = 'Bare Item'; const us = 'Boolean'; const hs = 'Byte Sequence'; const ds = 'Decimal'; const cs = 'Integer'; const fs = /[\x00-\x1f\x7f]+/; const gs = 'Token'; const vs = 'Key'; function ms(t, e, r) { return os('serialize', t, e, r) } function ps(t) { if (!1 === ArrayBuffer.isView(t)) throw ms(t, hs); return ':' + (e = t, btoa(String.fromCharCode.apply(String, e)) + ':'); let e } function ys(t) { if (function(t) { return t < -999999999999999 || t > 999999999999999 }(t)) throw ms(t, cs); return t.toString() } function Es(t, e) { if (t < 0) return -Es(-t, e); const r = Math.pow(10, e); if (Math.abs(t * r % 1 - 0.5) < Number.EPSILON) { const i = Math.floor(t * r); return (i % 2 == 0 ? i : i + 1) / r } return Math.round(t * r) / r } function Ts(t) { const e = Es(t, 3); if (Math.floor(Math.abs(e)).toString().length > 12) throw ms(t, ds); const r = e.toString(); return r.includes('.') ? r : r + '.0' } const Ss = 'String'; function Ls(t) { let e; const r = (e = t).description || e.toString().slice(7, -1); if (!1 === /^([a-zA-Z*])([!#$%&'*+\-.^_`|~\w:/]*)$/.test(r)) throw ms(r, gs); return r } function As(t) { switch (typeof t) { case 'number':if (!y(t)) throw ms(t, ls); return Number.isInteger(t) ? ys(t) : Ts(t); case 'string':return (function(t) { if (fs.test(t)) throw ms(t, Ss); return '"' + t.replace(/\\/g, '\\\\').replace(/"/g, '\\"') + '"' }(t)); case 'symbol':return Ls(t); case 'boolean':return (function(t) { if (typeof t !== 'boolean') throw ms(t, us); return t ? '?1' : '?0' }(t)); case 'object':if (t instanceof Date) return (function(t) { return '@' + ys(t.getTime() / 1e3) }(t)); if (t instanceof Uint8Array) return ps(t); if (t instanceof as) return Ls(t); default:throw ms(t, ls) } } function Rs(t) { if (!1 === /^[a-z*][a-z0-9\-_.*]*$/.test(t)) throw ms(t, vs); return t } function ks(t) { return t == null ? '' : Object.entries(t).map(function(t) { const e = t[0]; const r = t[1]; return !0 === r ? ';' + Rs(e) : ';' + Rs(e) + '=' + As(r) }).join('') } function bs(t) { return t instanceof ns ? '' + As(t.value) + ks(t.params) : As(t) } function Ds(t, e) { let r; if (void 0 === e && (e = { whitespace: !0 }), typeof t !== 'object') throw ms(t, ss); const i = t instanceof Map ? t.entries() : Object.entries(t); const n = (r = e) != null && r.whitespace ? ' ' : ''; return Array.from(i).map(function(t) { const e = t[0]; let r = t[1]; r instanceof ns == 0 && (r = new ns(r)); let i; let n = Rs(e); return !0 === r.value ? n += ks(r.params) : (n += '=', Array.isArray(r.value) ? n += '(' + (i = r).value.map(bs).join(' ') + ')' + ks(i.params) : n += bs(r)), n }).join(',' + n) } const Is = function(t) { return t === 'ot' || t === 'sf' || t === 'st' }; const ws = function(t) { return typeof t === 'number' ? y(t) : t != null && t !== '' && !1 !== t }; const Cs = function(t) { return Math.round(t) }; const _s = function(t) { return 100 * Cs(t / 100) }; const xs = { br: Cs, d: Cs, bl: _s, dl: _s, mtp: _s, nor: function(t, e) { return e != null && e.baseUrl && (t = (function(t, e) { const r = new URL(t); const i = new URL(e); if (r.origin !== i.origin) return t; for (var n = r.pathname.split('/').slice(1), a = i.pathname.split('/').slice(1, -1); n[0] === a[0];)n.shift(), a.shift(); for (;a.length;)a.shift(), n.unshift('..'); return n.join('/') }(t, e.baseUrl))), encodeURIComponent(t) }, rtp: _s, tb: Cs }; function Ps(t, e) { return void 0 === e && (e = {}), t ? (function(t, e) { return Ds(t, e) }((function(t, e) { const r = {}; if (t == null || typeof t !== 'object') return r; const i = Object.keys(t).sort(); const n = o({}, xs, e == null ? void 0 : e.formatters); const a = e == null ? void 0 : e.filter; return i.forEach(function(i) { if (a == null || !a(i)) { let s = t[i]; const o = n[i]; o && (s = o(s, e)), i === 'v' && s === 1 || i == 'pr' && s === 1 || ws(s) && (Is(i) && typeof s === 'string' && (s = new as(s)), r[i] = s) } }), r }(t, e)), o({ whitespace: !1 }, e))) : '' } function Fs(t, e, r) { return o(t, (function(t, e) { let r; if (void 0 === e && (e = {}), !t) return {}; const i = Object.entries(t); const n = Object.entries(is).concat(Object.entries(((r = e) == null ? void 0 : r.customHeaderMap) || {})); const a = i.reduce(function(t, e) { let r; const i = e[0]; const a = e[1]; const s = ((r = n.find(function(t) { return t[1].includes(i) })) == null ? void 0 : r[0]) || ts.REQUEST; return t[s] != null || (t[s] = {}), t[s][i] = a, t }, {}); return Object.entries(a).reduce(function(t, r) { const i = r[0]; const n = r[1]; return t[i] = Ps(n, e), t }, {}) }(e, r))) } const Ms = 'CMCD'; const Os = /CMCD=[^&#]+/; function Ns(t, e, r) { const i = (function(t, e) { if (void 0 === e && (e = {}), !t) return ''; const r = Ps(t, e); return Ms + '=' + encodeURIComponent(r) }(e, r)); if (!i) return t; if (Os.test(t)) return t.replace(Os, i); const n = t.includes('?') ? '&' : '?'; return '' + t + n + i } const Us = (function() { function t(t) { const e = this; this.hls = void 0, this.config = void 0, this.media = void 0, this.sid = void 0, this.cid = void 0, this.useHeaders = !1, this.includeKeys = void 0, this.initialized = !1, this.starved = !1, this.buffering = !0, this.audioBuffer = void 0, this.videoBuffer = void 0, this.onWaiting = function() { e.initialized && (e.starved = !0), e.buffering = !0 }, this.onPlaying = function() { e.initialized || (e.initialized = !0), e.buffering = !1 }, this.applyPlaylistData = function(t) { try { e.apply(t, { ot: $a.MANIFEST, su: !e.initialized }) } catch (t) { w.warn('Could not generate manifest CMCD data.', t) } }, this.applyFragmentData = function(t) { try { const r = t.frag; const i = e.hls.levels[r.level]; const n = e.getObjectType(r); const a = { d: 1e3 * r.duration, ot: n }; n !== $a.VIDEO && n !== $a.AUDIO && n != $a.MUXED || (a.br = i.bitrate / 1e3, a.tb = e.getTopBandwidth(n) / 1e3, a.bl = e.getBufferLength(n)), e.apply(t, a) } catch (t) { w.warn('Could not generate segment CMCD data.', t) } }, this.hls = t; const r = this.config = t.config; const i = r.cmcd; i != null && (r.pLoader = this.createPlaylistLoader(), r.fLoader = this.createFragmentLoader(), this.sid = i.sessionId || (function() { try { return crypto.randomUUID() } catch (i) { try { const t = URL.createObjectURL(new Blob()); const e = t.toString(); return URL.revokeObjectURL(t), e.slice(e.lastIndexOf('/') + 1) } catch (t) { let r = (new Date()).getTime(); return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(t) { const e = (r + 16 * Math.random()) % 16 | 0; return r = Math.floor(r / 16), (t == 'x' ? e : 3 & e | 8).toString(16) }) } } }()), this.cid = i.contentId, this.useHeaders = !0 === i.useHeaders, this.includeKeys = i.includeKeys, this.registerListeners()) } const e = t.prototype; return e.registerListeners = function() { const t = this.hls; t.on(S.MEDIA_ATTACHED, this.onMediaAttached, this), t.on(S.MEDIA_DETACHED, this.onMediaDetached, this), t.on(S.BUFFER_CREATED, this.onBufferCreated, this) }, e.unregisterListeners = function() { const t = this.hls; t.off(S.MEDIA_ATTACHED, this.onMediaAttached, this), t.off(S.MEDIA_DETACHED, this.onMediaDetached, this), t.off(S.BUFFER_CREATED, this.onBufferCreated, this) }, e.destroy = function() { this.unregisterListeners(), this.onMediaDetached(), this.hls = this.config = this.audioBuffer = this.videoBuffer = null, this.onWaiting = this.onPlaying = null }, e.onMediaAttached = function(t, e) { this.media = e.media, this.media.addEventListener('waiting', this.onWaiting), this.media.addEventListener('playing', this.onPlaying) }, e.onMediaDetached = function() { this.media && (this.media.removeEventListener('waiting', this.onWaiting), this.media.removeEventListener('playing', this.onPlaying), this.media = null) }, e.onBufferCreated = function(t, e) { let r, i; this.audioBuffer = (r = e.tracks.audio) == null ? void 0 : r.buffer, this.videoBuffer = (i = e.tracks.video) == null ? void 0 : i.buffer }, e.createData = function() { let t; return { v: 1, sf: Za.HLS, sid: this.sid, cid: this.cid, pr: (t = this.media) == null ? void 0 : t.playbackRate, mtp: this.hls.bandwidthEstimate / 1e3 } }, e.apply = function(t, e) { void 0 === e && (e = {}), o(e, this.createData()); const r = e.ot === $a.INIT || e.ot === $a.VIDEO || e.ot === $a.MUXED; this.starved && r && (e.bs = !0, e.su = !0, this.starved = !1), e.su == null && (e.su = this.buffering); const i = this.includeKeys; i && (e = Object.keys(e).reduce(function(t, r) { return i.includes(r) && (t[r] = e[r]), t }, {})), this.useHeaders ? (t.headers || (t.headers = {}), Fs(t.headers, e)) : t.url = Ns(t.url, e) }, e.getObjectType = function(t) { const e = t.type; return e === 'subtitle' ? $a.TIMED_TEXT : t.sn === 'initSegment' ? $a.INIT : e === 'audio' ? $a.AUDIO : e === 'main' ? this.hls.audioTracks.length ? $a.VIDEO : $a.MUXED : void 0 }, e.getTopBandwidth = function(t) { let e; let r = 0; const i = this.hls; if (t === $a.AUDIO)e = i.audioTracks; else { const n = i.maxAutoLevel; const a = n > -1 ? n + 1 : i.levels.length; e = i.levels.slice(0, a) } for (var s, o = g(e); !(s = o()).done;) { const l = s.value; l.bitrate > r && (r = l.bitrate) } return r > 0 ? r : NaN }, e.getBufferLength = function(t) { const e = this.hls.media; const r = t === $a.AUDIO ? this.audioBuffer : this.videoBuffer; return r && e ? 1e3 * Jr.bufferInfo(r, e.currentTime, this.config.maxBufferHole).len : NaN }, e.createPlaylistLoader = function() { const t = this.config.pLoader; const e = this.applyPlaylistData; const r = t || this.config.loader; return (function() { function t(t) { this.loader = void 0, this.loader = new r(t) } const i = t.prototype; return i.destroy = function() { this.loader.destroy() }, i.abort = function() { this.loader.abort() }, i.load = function(t, r, i) { e(t), this.loader.load(t, r, i) }, s(t, [{ key: 'stats', get: function() { return this.loader.stats } }, { key: 'context', get: function() { return this.loader.context } }]), t }()) }, e.createFragmentLoader = function() { const t = this.config.fLoader; const e = this.applyFragmentData; const r = t || this.config.loader; return (function() { function t(t) { this.loader = void 0, this.loader = new r(t) } const i = t.prototype; return i.destroy = function() { this.loader.destroy() }, i.abort = function() { this.loader.abort() }, i.load = function(t, r, i) { e(t), this.loader.load(t, r, i) }, s(t, [{ key: 'stats', get: function() { return this.loader.stats } }, { key: 'context', get: function() { return this.loader.context } }]), t }()) }, t }()); const Bs = (function() { function t(t) { this.hls = void 0, this.log = void 0, this.loader = null, this.uri = null, this.pathwayId = '.', this.pathwayPriority = null, this.timeToLoad = 300, this.reloadTimer = -1, this.updated = 0, this.started = !1, this.enabled = !0, this.levels = null, this.audioTracks = null, this.subtitleTracks = null, this.penalizedPathways = {}, this.hls = t, this.log = w.log.bind(w, '[content-steering]:'), this.registerListeners() } const e = t.prototype; return e.registerListeners = function() { const t = this.hls; t.on(S.MANIFEST_LOADING, this.onManifestLoading, this), t.on(S.MANIFEST_LOADED, this.onManifestLoaded, this), t.on(S.MANIFEST_PARSED, this.onManifestParsed, this), t.on(S.ERROR, this.onError, this) }, e.unregisterListeners = function() { const t = this.hls; t && (t.off(S.MANIFEST_LOADING, this.onManifestLoading, this), t.off(S.MANIFEST_LOADED, this.onManifestLoaded, this), t.off(S.MANIFEST_PARSED, this.onManifestParsed, this), t.off(S.ERROR, this.onError, this)) }, e.startLoad = function() { if (this.started = !0, this.clearTimeout(), this.enabled && this.uri) { if (this.updated) { const t = 1e3 * this.timeToLoad - (performance.now() - this.updated); if (t > 0) return void this.scheduleRefresh(this.uri, t) } this.loadSteeringManifest(this.uri) } }, e.stopLoad = function() { this.started = !1, this.loader && (this.loader.destroy(), this.loader = null), this.clearTimeout() }, e.clearTimeout = function() { this.reloadTimer !== -1 && (self.clearTimeout(this.reloadTimer), this.reloadTimer = -1) }, e.destroy = function() { this.unregisterListeners(), this.stopLoad(), this.hls = null, this.levels = this.audioTracks = this.subtitleTracks = null }, e.removeLevel = function(t) { const e = this.levels; e && (this.levels = e.filter(function(e) { return e !== t })) }, e.onManifestLoading = function() { this.stopLoad(), this.enabled = !0, this.timeToLoad = 300, this.updated = 0, this.uri = null, this.pathwayId = '.', this.levels = this.audioTracks = this.subtitleTracks = null }, e.onManifestLoaded = function(t, e) { const r = e.contentSteering; r !== null && (this.pathwayId = r.pathwayId, this.uri = r.uri, this.started && this.startLoad()) }, e.onManifestParsed = function(t, e) { this.audioTracks = e.audioTracks, this.subtitleTracks = e.subtitleTracks }, e.onError = function(t, e) { const r = e.errorAction; if ((r == null ? void 0 : r.action) === Lr && r.flags === br) { const i = this.levels; let n = this.pathwayPriority; let a = this.pathwayId; if (e.context) { const s = e.context; const o = s.groupId; const l = s.pathwayId; const u = s.type; o && i ? a = this.getPathwayForGroupId(o, u, a) : l && (a = l) }a in this.penalizedPathways || (this.penalizedPathways[a] = performance.now()), !n && i && (n = i.reduce(function(t, e) { return t.indexOf(e.pathwayId) === -1 && t.push(e.pathwayId), t }, [])), n && n.length > 1 && (this.updatePathwayPriority(n), r.resolved = this.pathwayId !== a), r.resolved || w.warn('Could not resolve ' + e.details + ' ("' + e.error.message + '") with content-steering for Pathway: ' + a + ' levels: ' + (i ? i.length : i) + ' priorities: ' + JSON.stringify(n) + ' penalized: ' + JSON.stringify(this.penalizedPathways)) } }, e.filterParsedLevels = function(t) { this.levels = t; let e = this.getLevelsForPathway(this.pathwayId); if (e.length === 0) { const r = t[0].pathwayId; this.log('No levels found in Pathway ' + this.pathwayId + '. Setting initial Pathway to "' + r + '"'), e = this.getLevelsForPathway(r), this.pathwayId = r } return e.length !== t.length ? (this.log('Found ' + e.length + '/' + t.length + ' levels in Pathway "' + this.pathwayId + '"'), e) : t }, e.getLevelsForPathway = function(t) { return this.levels === null ? [] : this.levels.filter(function(e) { return t === e.pathwayId }) }, e.updatePathwayPriority = function(t) { let e; this.pathwayPriority = t; const r = this.penalizedPathways; const i = performance.now(); Object.keys(r).forEach(function(t) { i - r[t] > 3e5 && delete r[t] }); for (let n = 0; n < t.length; n++) { const a = t[n]; if (!(a in r)) { if (a === this.pathwayId) return; const s = this.hls.nextLoadLevel; const o = this.hls.levels[s]; if ((e = this.getLevelsForPathway(a)).length > 0) { this.log('Setting Pathway to "' + a + '"'), this.pathwayId = a, dr(e), this.hls.trigger(S.LEVELS_UPDATED, { levels: e }); const l = this.hls.levels[s]; o && l && this.levels && (l.attrs['STABLE-VARIANT-ID'] !== o.attrs['STABLE-VARIANT-ID'] && l.bitrate !== o.bitrate && this.log('Unstable Pathways change from bitrate ' + o.bitrate + ' to ' + l.bitrate), this.hls.nextLoadLevel = s); break } } } }, e.getPathwayForGroupId = function(t, e, r) { for (let i = this.getLevelsForPathway(r).concat(this.levels || []), n = 0; n < i.length; n++) if (e === De && i[n].hasAudioGroup(t) || e === Ie && i[n].hasSubtitleGroup(t)) return i[n].pathwayId; return r }, e.clonePathways = function(t) { const e = this; const r = this.levels; if (r) { const i = {}; const n = {}; t.forEach(function(t) { const a = t.ID; const s = t['BASE-ID']; const o = t['URI-REPLACEMENT']; if (!r.some(function(t) { return t.pathwayId === a })) { const l = e.getLevelsForPathway(s).map(function(t) { const e = new x(t.attrs); e['PATHWAY-ID'] = a; const r = e.AUDIO && e.AUDIO + '_clone_' + a; const s = e.SUBTITLES && e.SUBTITLES + '_clone_' + a; r && (i[e.AUDIO] = r, e.AUDIO = r), s && (n[e.SUBTITLES] = s, e.SUBTITLES = s); const l = Ks(t.uri, e['STABLE-VARIANT-ID'], 'PER-VARIANT-URIS', o); const u = new rr({ attrs: e, audioCodec: t.audioCodec, bitrate: t.bitrate, height: t.height, name: t.name, url: l, videoCodec: t.videoCodec, width: t.width }); if (t.audioGroups) for (let h = 1; h < t.audioGroups.length; h++)u.addGroupId('audio', t.audioGroups[h] + '_clone_' + a); if (t.subtitleGroups) for (let d = 1; d < t.subtitleGroups.length; d++)u.addGroupId('text', t.subtitleGroups[d] + '_clone_' + a); return u }); r.push.apply(r, l), Gs(e.audioTracks, i, o, a), Gs(e.subtitleTracks, n, o, a) } }) } }, e.loadSteeringManifest = function(t) { let e; const r = this; const i = this.hls.config; const n = i.loader; this.loader && this.loader.destroy(), this.loader = new n(i); try { e = new self.URL(t) } catch (e) { return this.enabled = !1, void this.log('Failed to parse Steering Manifest URI: ' + t) } if (e.protocol !== 'data:') { const a = 0 | (this.hls.bandwidthEstimate || i.abrEwmaDefaultEstimate); e.searchParams.set('_HLS_pathway', this.pathwayId), e.searchParams.set('_HLS_throughput', '' + a) } const s = { responseType: 'json', url: e.href }; const o = i.steeringManifestLoadPolicy.default; const l = o.errorRetry || o.timeoutRetry || {}; const u = { loadPolicy: o, timeout: o.maxLoadTimeMs, maxRetry: l.maxNumRetry || 0, retryDelay: l.retryDelayMs || 0, maxRetryDelay: l.maxRetryDelayMs || 0 }; const h = { onSuccess: function(t, i, n, a) { r.log('Loaded steering manifest: "' + e + '"'); const s = t.data; if (s.VERSION === 1) { r.updated = performance.now(), r.timeToLoad = s.TTL; const o = s['RELOAD-URI']; const l = s['PATHWAY-CLONES']; const u = s['PATHWAY-PRIORITY']; if (o) try { r.uri = new self.URL(o, e).href } catch (t) { return r.enabled = !1, void r.log('Failed to parse Steering Manifest RELOAD-URI: ' + o) }r.scheduleRefresh(r.uri || n.url), l && r.clonePathways(l); const h = { steeringManifest: s, url: e.toString() }; r.hls.trigger(S.STEERING_MANIFEST_LOADED, h), u && r.updatePathwayPriority(u) } else r.log('Steering VERSION ' + s.VERSION + ' not supported!') }, onError: function(t, e, i, n) { if (r.log('Error loading steering manifest: ' + t.code + ' ' + t.text + ' (' + e.url + ')'), r.stopLoad(), t.code === 410) return r.enabled = !1, void r.log('Steering manifest ' + e.url + ' no longer available'); let a = 1e3 * r.timeToLoad; if (t.code !== 429)r.scheduleRefresh(r.uri || e.url, a); else { const s = r.loader; if (typeof (s == null ? void 0 : s.getResponseHeader) === 'function') { const o = s.getResponseHeader('Retry-After'); o && (a = 1e3 * parseFloat(o)) }r.log('Steering manifest ' + e.url + ' rate limited') } }, onTimeout: function(t, e, i) { r.log('Timeout loading steering manifest (' + e.url + ')'), r.scheduleRefresh(r.uri || e.url) } }; this.log('Requesting steering manifest: ' + e), this.loader.load(s, u, h) }, e.scheduleRefresh = function(t, e) { const r = this; void 0 === e && (e = 1e3 * this.timeToLoad), this.clearTimeout(), this.reloadTimer = self.setTimeout(function() { let e; const i = (e = r.hls) == null ? void 0 : e.media; !i || i.ended ? r.scheduleRefresh(t, 1e3 * r.timeToLoad) : r.loadSteeringManifest(t) }, e) }, t }()); function Gs(t, e, r, i) { t && Object.keys(e).forEach(function(n) { const a = t.filter(function(t) { return t.groupId === n }).map(function(t) { const a = o({}, t); return a.details = void 0, a.attrs = new x(a.attrs), a.url = a.attrs.URI = Ks(t.url, t.attrs['STABLE-RENDITION-ID'], 'PER-RENDITION-URIS', r), a.groupId = a.attrs['GROUP-ID'] = e[n], a.attrs['PATHWAY-ID'] = i, a }); t.push.apply(t, a) }) } function Ks(t, e, r, i) { let n; const a = i.HOST; const s = i.PARAMS; const o = i[r]; e && (n = o == null ? void 0 : o[e]) && (t = n); const l = new self.URL(t); return a && !n && (l.host = a), s && Object.keys(s).sort().forEach(function(t) { t && l.searchParams.set(t, s[t]) }), l.href } const Hs = /^age:\s*[\d.]+\s*$/im; const Vs = (function() { function t(t) { this.xhrSetup = void 0, this.requestTimeout = void 0, this.retryTimeout = void 0, this.retryDelay = void 0, this.config = null, this.callbacks = null, this.context = null, this.loader = null, this.stats = void 0, this.xhrSetup = t && t.xhrSetup || null, this.stats = new M(), this.retryDelay = 0 } const e = t.prototype; return e.destroy = function() { this.callbacks = null, this.abortInternal(), this.loader = null, this.config = null, this.context = null, this.xhrSetup = null, this.stats = null }, e.abortInternal = function() { const t = this.loader; self.clearTimeout(this.requestTimeout), self.clearTimeout(this.retryTimeout), t && (t.onreadystatechange = null, t.onprogress = null, t.readyState !== 4 && (this.stats.aborted = !0, t.abort())) }, e.abort = function() { let t; this.abortInternal(), (t = this.callbacks) != null && t.onAbort && this.callbacks.onAbort(this.stats, this.context, this.loader) }, e.load = function(t, e, r) { if (this.stats.loading.start) throw new Error('Loader can only be used once.'); this.stats.loading.start = self.performance.now(), this.context = t, this.config = e, this.callbacks = r, this.loadInternal() }, e.loadInternal = function() { const t = this; const e = this.config; const r = this.context; if (e && r) { const i = this.loader = new self.XMLHttpRequest(); const n = this.stats; n.loading.first = 0, n.loaded = 0, n.aborted = !1; const a = this.xhrSetup; a ? Promise.resolve().then(function() { if (!t.stats.aborted) return a(i, r.url) }).catch(function(t) { return i.open('GET', r.url, !0), a(i, r.url) }).then(function() { t.stats.aborted || t.openAndSendXhr(i, r, e) }).catch(function(e) { t.callbacks.onError({ code: i.status, text: e.message }, r, i, n) }) : this.openAndSendXhr(i, r, e) } }, e.openAndSendXhr = function(t, e, r) { t.readyState || t.open('GET', e.url, !0); const i = e.headers; const n = r.loadPolicy; const a = n.maxTimeToFirstByteMs; const s = n.maxLoadTimeMs; if (i) for (const o in i)t.setRequestHeader(o, i[o]); e.rangeEnd && t.setRequestHeader('Range', 'bytes=' + e.rangeStart + '-' + (e.rangeEnd - 1)), t.onreadystatechange = this.readystatechange.bind(this), t.onprogress = this.loadprogress.bind(this), t.responseType = e.responseType, self.clearTimeout(this.requestTimeout), r.timeout = a && y(a) ? a : s, this.requestTimeout = self.setTimeout(this.loadtimeout.bind(this), r.timeout), t.send() }, e.readystatechange = function() { const t = this.context; const e = this.loader; const r = this.stats; if (t && e) { const i = e.readyState; const n = this.config; if (!r.aborted && i >= 2 && (r.loading.first === 0 && (r.loading.first = Math.max(self.performance.now(), r.loading.start), n.timeout !== n.loadPolicy.maxLoadTimeMs && (self.clearTimeout(this.requestTimeout), n.timeout = n.loadPolicy.maxLoadTimeMs, this.requestTimeout = self.setTimeout(this.loadtimeout.bind(this), n.loadPolicy.maxLoadTimeMs - (r.loading.first - r.loading.start)))), i === 4)) { self.clearTimeout(this.requestTimeout), e.onreadystatechange = null, e.onprogress = null; const a = e.status; const s = e.responseType !== 'text'; if (a >= 200 && a < 300 && (s && e.response || e.responseText !== null)) { r.loading.end = Math.max(self.performance.now(), r.loading.first); const o = s ? e.response : e.responseText; const l = e.responseType === 'arraybuffer' ? o.byteLength : o.length; if (r.loaded = r.total = l, r.bwEstimate = 8e3 * r.total / (r.loading.end - r.loading.first), !this.callbacks) return; const u = this.callbacks.onProgress; if (u && u(r, t, o, e), !this.callbacks) return; const h = { url: e.responseURL, data: o, code: a }; this.callbacks.onSuccess(h, r, t, e) } else { const d = n.loadPolicy.errorRetry; mr(d, r.retry, !1, { url: t.url, data: void 0, code: a }) ? this.retry(d) : (w.error(a + ' while loading ' + t.url), this.callbacks.onError({ code: a, text: e.statusText }, t, e, r)) } } } }, e.loadtimeout = function() { let t; const e = (t = this.config) == null ? void 0 : t.loadPolicy.timeoutRetry; if (mr(e, this.stats.retry, !0)) this.retry(e); else { let r; w.warn('timeout while loading ' + ((r = this.context) == null ? void 0 : r.url)); const i = this.callbacks; i && (this.abortInternal(), i.onTimeout(this.stats, this.context, this.loader)) } }, e.retry = function(t) { const e = this.context; const r = this.stats; this.retryDelay = gr(t, r.retry), r.retry++, w.warn((status ? 'HTTP Status ' + status : 'Timeout') + ' while loading ' + (e == null ? void 0 : e.url) + ', retrying ' + r.retry + '/' + t.maxNumRetry + ' in ' + this.retryDelay + 'ms'), this.abortInternal(), this.loader = null, self.clearTimeout(this.retryTimeout), this.retryTimeout = self.setTimeout(this.loadInternal.bind(this), this.retryDelay) }, e.loadprogress = function(t) { const e = this.stats; e.loaded = t.loaded, t.lengthComputable && (e.total = t.total) }, e.getCacheAge = function() { let t = null; if (this.loader && Hs.test(this.loader.getAllResponseHeaders())) { const e = this.loader.getResponseHeader('age'); t = e ? parseFloat(e) : null } return t }, e.getResponseHeader = function(t) { return this.loader && new RegExp('^' + t + ':\\s*[\\d.]+\\s*$', 'im').test(this.loader.getAllResponseHeaders()) ? this.loader.getResponseHeader(t) : null }, t }()); const Ys = /(\d+)-(\d+)\/(\d+)/; const Ws = (function() { function t(t) { this.fetchSetup = void 0, this.requestTimeout = void 0, this.request = null, this.response = null, this.controller = void 0, this.context = null, this.config = null, this.callbacks = null, this.stats = void 0, this.loader = null, this.fetchSetup = t.fetchSetup || js, this.controller = new self.AbortController(), this.stats = new M() } const e = t.prototype; return e.destroy = function() { this.loader = this.callbacks = this.context = this.config = this.request = null, this.abortInternal(), this.response = null, this.fetchSetup = this.controller = this.stats = null }, e.abortInternal = function() { this.controller && !this.stats.loading.end && (this.stats.aborted = !0, this.controller.abort()) }, e.abort = function() { let t; this.abortInternal(), (t = this.callbacks) != null && t.onAbort && this.callbacks.onAbort(this.stats, this.context, this.response) }, e.load = function(t, e, r) { const i = this; const n = this.stats; if (n.loading.start) throw new Error('Loader can only be used once.'); n.loading.start = self.performance.now(); const a = (function(t, e) { const r = { method: 'GET', mode: 'cors', credentials: 'same-origin', signal: e, headers: new self.Headers(o({}, t.headers)) }; return t.rangeEnd && r.headers.set('Range', 'bytes=' + t.rangeStart + '-' + String(t.rangeEnd - 1)), r }(t, this.controller.signal)); const s = r.onProgress; const l = t.responseType === 'arraybuffer'; const u = l ? 'byteLength' : 'length'; const h = e.loadPolicy; const d = h.maxTimeToFirstByteMs; const c = h.maxLoadTimeMs; this.context = t, this.config = e, this.callbacks = r, this.request = this.fetchSetup(t, a), self.clearTimeout(this.requestTimeout), e.timeout = d && y(d) ? d : c, this.requestTimeout = self.setTimeout(function() { i.abortInternal(), r.onTimeout(n, t, i.response) }, e.timeout), self.fetch(this.request).then(function(a) { i.response = i.loader = a; const o = Math.max(self.performance.now(), n.loading.start); if (self.clearTimeout(i.requestTimeout), e.timeout = c, i.requestTimeout = self.setTimeout(function() { i.abortInternal(), r.onTimeout(n, t, i.response) }, c - (o - n.loading.start)), !a.ok) { const u = a.status; const h = a.statusText; throw new Xs(h || 'fetch, bad network response', u, a) } return n.loading.first = o, n.total = (function(t) { const e = t.get('Content-Range'); if (e) { const r = (function(t) { const e = Ys.exec(t); if (e) return parseInt(e[2]) - parseInt(e[1]) + 1 }(e)); if (y(r)) return r } const i = t.get('Content-Length'); if (i) return parseInt(i) }(a.headers)) || n.total, s && y(e.highWaterMark) ? i.loadProgressively(a, n, t, e.highWaterMark, s) : l ? a.arrayBuffer() : t.responseType === 'json' ? a.json() : a.text() }).then(function(a) { const o = i.response; if (!o) throw new Error('loader destroyed'); self.clearTimeout(i.requestTimeout), n.loading.end = Math.max(self.performance.now(), n.loading.first); const l = a[u]; l && (n.loaded = n.total = l); const h = { url: o.url, data: a, code: o.status }; s && !y(e.highWaterMark) && s(n, t, a, o), r.onSuccess(h, n, t, o) }).catch(function(e) { if (self.clearTimeout(i.requestTimeout), !n.aborted) { const a = e && e.code || 0; const s = e ? e.message : null; r.onError({ code: a, text: s }, t, e ? e.details : null, n) } }) }, e.getCacheAge = function() { let t = null; if (this.response) { const e = this.response.headers.get('age'); t = e ? parseFloat(e) : null } return t }, e.getResponseHeader = function(t) { return this.response ? this.response.headers.get(t) : null }, e.loadProgressively = function(t, e, r, i, n) { void 0 === i && (i = 0); const a = new Di(); const s = t.body.getReader(); return (function o() { return s.read().then(function(s) { if (s.done) return a.dataLength && n(e, r, a.flush(), t), Promise.resolve(new ArrayBuffer(0)); const l = s.value; const u = l.length; return e.loaded += u, u < i || a.dataLength ? (a.push(l), a.dataLength >= i && n(e, r, a.flush(), t)) : n(e, r, l, t), o() }).catch(function() { return Promise.reject() }) }()) }, t }()); function js(t, e) { return new self.Request(t.url, e) } let qs; var Xs = (function(t) { function e(e, r, i) { let n; return (n = t.call(this, e) || this).code = void 0, n.details = void 0, n.code = r, n.details = i, n } return l(e, t), e }(c(Error))); const zs = /\s/; const Qs = i(i({ autoStartLoad: !0, startPosition: -1, defaultAudioCodec: void 0, debug: !1, capLevelOnFPSDrop: !1, capLevelToPlayerSize: !1, ignoreDevicePixelRatio: !1, preferManagedMediaSource: !0, initialLiveManifestSize: 1, maxBufferLength: 30, backBufferLength: 1 / 0, frontBufferFlushThreshold: 1 / 0, maxBufferSize: 6e7, maxBufferHole: 0.1, highBufferWatchdogPeriod: 2, nudgeOffset: 0.1, nudgeMaxRetry: 3, maxFragLookUpTolerance: 0.25, liveSyncDurationCount: 3, liveMaxLatencyDurationCount: 1 / 0, liveSyncDuration: void 0, liveMaxLatencyDuration: void 0, maxLiveSyncPlaybackRate: 1, liveDurationInfinity: !1, liveBackBufferLength: null, maxMaxBufferLength: 600, enableWorker: !0, workerPath: null, enableSoftwareAES: !0, startLevel: void 0, startFragPrefetch: !1, fpsDroppedMonitoringPeriod: 5e3, fpsDroppedMonitoringThreshold: 0.2, appendErrorMaxRetry: 3, loader: Vs, fLoader: void 0, pLoader: void 0, xhrSetup: void 0, licenseXhrSetup: void 0, licenseResponseCallback: void 0, abrController: Kr, bufferController: $n, capLevelController: Xa, errorController: Ir, fpsController: za, stretchShortVideoTrack: !1, maxAudioFramesDrift: 1, forceKeyFrameOnDiscontinuity: !0, abrEwmaFastLive: 3, abrEwmaSlowLive: 9, abrEwmaFastVoD: 3, abrEwmaSlowVoD: 9, abrEwmaDefaultEstimate: 5e5, abrEwmaDefaultEstimateMax: 5e6, abrBandWidthFactor: 0.95, abrBandWidthUpFactor: 0.7, abrMaxWithRealBitrate: !1, maxStarvationDelay: 4, maxLoadingDelay: 4, minAutoBitrate: 0, emeEnabled: !1, widevineLicenseUrl: void 0, drmSystems: {}, drmSystemOptions: {}, requestMediaKeySystemAccessFunc: it, testBandwidth: !0, progressive: !1, lowLatencyMode: !0, cmcd: void 0, enableDateRangeMetadataCues: !0, enableEmsgMetadataCues: !0, enableID3MetadataCues: !0, useMediaCapabilities: !0, certLoadPolicy: { default: { maxTimeToFirstByteMs: 8e3, maxLoadTimeMs: 2e4, timeoutRetry: null, errorRetry: null } }, keyLoadPolicy: { default: { maxTimeToFirstByteMs: 8e3, maxLoadTimeMs: 2e4, timeoutRetry: { maxNumRetry: 1, retryDelayMs: 1e3, maxRetryDelayMs: 2e4, backoff: 'linear' }, errorRetry: { maxNumRetry: 8, retryDelayMs: 1e3, maxRetryDelayMs: 2e4, backoff: 'linear' } } }, manifestLoadPolicy: { default: { maxTimeToFirstByteMs: 1 / 0, maxLoadTimeMs: 2e4, timeoutRetry: { maxNumRetry: 2, retryDelayMs: 0, maxRetryDelayMs: 0 }, errorRetry: { maxNumRetry: 1, retryDelayMs: 1e3, maxRetryDelayMs: 8e3 } } }, playlistLoadPolicy: { default: { maxTimeToFirstByteMs: 1e4, maxLoadTimeMs: 2e4, timeoutRetry: { maxNumRetry: 2, retryDelayMs: 0, maxRetryDelayMs: 0 }, errorRetry: { maxNumRetry: 2, retryDelayMs: 1e3, maxRetryDelayMs: 8e3 } } }, fragLoadPolicy: { default: { maxTimeToFirstByteMs: 1e4, maxLoadTimeMs: 12e4, timeoutRetry: { maxNumRetry: 4, retryDelayMs: 0, maxRetryDelayMs: 0 }, errorRetry: { maxNumRetry: 6, retryDelayMs: 1e3, maxRetryDelayMs: 8e3 } } }, steeringManifestLoadPolicy: { default: { maxTimeToFirstByteMs: 1e4, maxLoadTimeMs: 2e4, timeoutRetry: { maxNumRetry: 2, retryDelayMs: 0, maxRetryDelayMs: 0 }, errorRetry: { maxNumRetry: 1, retryDelayMs: 1e3, maxRetryDelayMs: 8e3 } } }, manifestLoadingTimeOut: 1e4, manifestLoadingMaxRetry: 1, manifestLoadingRetryDelay: 1e3, manifestLoadingMaxRetryTimeout: 64e3, levelLoadingTimeOut: 1e4, levelLoadingMaxRetry: 4, levelLoadingRetryDelay: 1e3, levelLoadingMaxRetryTimeout: 64e3, fragLoadingTimeOut: 2e4, fragLoadingMaxRetry: 6, fragLoadingRetryDelay: 1e3, fragLoadingMaxRetryTimeout: 64e3 }, { cueHandler: { newCue: function(t, e, r, i) { for (var n, a, s, o, l, u = [], h = self.VTTCue || self.TextTrackCue, d = 0; d < i.rows.length; d++) if (s = !0, o = 0, l = '', !(n = i.rows[d]).isEmpty()) { for (var c, f = 0; f < n.chars.length; f++)zs.test(n.chars[f].uchar) && s ? o++ : (l += n.chars[f].uchar, s = !1); n.cueStartTime = e, e === r && (r += 1e-4), o >= 16 ? o-- : o++; const g = Da(l.trim()); const v = xa(e, r, g); t != null && (c = t.cues) != null && c.getCueById(v) || ((a = new h(e, r, g)).id = v, a.line = d + 1, a.align = 'left', a.position = 10 + Math.min(80, 10 * Math.floor(8 * o / 32)), u.push(a)) } return t && u.length && (u.sort(function(t, e) { return t.line === 'auto' || e.line === 'auto' ? 0 : t.line > 8 && e.line > 8 ? e.line - t.line : t.line - e.line }), u.forEach(function(e) { return Oe(t, e) })), u } }, enableWebVTT: !0, enableIMSC1: !0, enableCEA708Captions: !0, captionsTextTrack1Label: 'English', captionsTextTrack1LanguageCode: 'en', captionsTextTrack2Label: 'Spanish', captionsTextTrack2LanguageCode: 'es', captionsTextTrack3Label: 'Unknown CC', captionsTextTrack3LanguageCode: '', captionsTextTrack4Label: 'Unknown CC', captionsTextTrack4LanguageCode: '', renderTextTracksNatively: !0 }), {}, { subtitleStreamController: qn, subtitleTrackController: zn, timelineController: Wa, audioStreamController: Wn, audioTrackController: jn, emeController: Ja, cmcdController: Us, contentSteeringController: Bs }); function Js(t) { return t && typeof t === 'object' ? Array.isArray(t) ? t.map(Js) : Object.keys(t).reduce(function(e, r) { return e[r] = Js(t[r]), e }, {}) : t } function $s(t) { const e = t.loader; e !== Ws && e !== Vs ? (w.log('[config]: Custom loader detected, cannot enable progressive streaming'), t.progressive = !1) : (function() { if (self.fetch && self.AbortController && self.ReadableStream && self.Request) try { return new self.ReadableStream({}), !0 } catch (t) {} return !1 }()) && (t.loader = Ws, t.progressive = !0, t.enableSoftwareAES = !0, w.log('[config]: Progressive streaming enabled, using FetchLoader')) } const Zs = (function(t) { function e(e, r) { let i; return (i = t.call(this, e, '[level-controller]') || this)._levels = [], i._firstLevel = -1, i._maxAutoLevel = -1, i._startLevel = void 0, i.currentLevel = null, i.currentLevelIndex = -1, i.manualLevelIndex = -1, i.steering = void 0, i.onParsedComplete = void 0, i.steering = r, i._registerListeners(), i }l(e, t); const r = e.prototype; return r._registerListeners = function() { const t = this.hls; t.on(S.MANIFEST_LOADING, this.onManifestLoading, this), t.on(S.MANIFEST_LOADED, this.onManifestLoaded, this), t.on(S.LEVEL_LOADED, this.onLevelLoaded, this), t.on(S.LEVELS_UPDATED, this.onLevelsUpdated, this), t.on(S.FRAG_BUFFERED, this.onFragBuffered, this), t.on(S.ERROR, this.onError, this) }, r._unregisterListeners = function() { const t = this.hls; t.off(S.MANIFEST_LOADING, this.onManifestLoading, this), t.off(S.MANIFEST_LOADED, this.onManifestLoaded, this), t.off(S.LEVEL_LOADED, this.onLevelLoaded, this), t.off(S.LEVELS_UPDATED, this.onLevelsUpdated, this), t.off(S.FRAG_BUFFERED, this.onFragBuffered, this), t.off(S.ERROR, this.onError, this) }, r.destroy = function() { this._unregisterListeners(), this.steering = null, this.resetLevels(), t.prototype.destroy.call(this) }, r.stopLoad = function() { this._levels.forEach(function(t) { t.loadError = 0, t.fragmentError = 0 }), t.prototype.stopLoad.call(this) }, r.resetLevels = function() { this._startLevel = void 0, this.manualLevelIndex = -1, this.currentLevelIndex = -1, this.currentLevel = null, this._levels = [], this._maxAutoLevel = -1 }, r.onManifestLoading = function(t, e) { this.resetLevels() }, r.onManifestLoaded = function(t, e) { const r = this.hls.config.preferManagedMediaSource; const i = []; const n = {}; const a = {}; let s = !1; let o = !1; let l = !1; e.levels.forEach(function(t) { let e; let u; const h = t.attrs; let d = t.audioCodec; let c = t.videoCodec; ((e = d) == null ? void 0 : e.indexOf('mp4a.40.34')) !== -1 && (qs || (qs = /chrome|firefox/i.test(navigator.userAgent)), qs && (t.audioCodec = d = void 0)), d && (t.audioCodec = d = he(d, r)), ((u = c) == null ? void 0 : u.indexOf('avc1')) === 0 && (c = t.videoCodec = (function(t) { const e = t.split('.'); if (e.length > 2) { let r = e.shift() + '.'; return (r += parseInt(e.shift()).toString(16)) + ('000' + parseInt(e.shift()).toString(16)).slice(-4) } return t }(c))); const f = t.width; const g = t.height; const v = t.unknownCodecs; if (s || (s = !(!f || !g)), o || (o = !!c), l || (l = !!d), !(v != null && v.length || d && !ie(d, 'audio', r) || c && !ie(c, 'video', r))) { const m = h.CODECS; const p = h['FRAME-RATE']; const y = h['HDCP-LEVEL']; const E = h['PATHWAY-ID']; const T = h.RESOLUTION; const S = h['VIDEO-RANGE']; const L = (E || '.') + '-' + t.bitrate + '-' + T + '-' + p + '-' + m + '-' + S + '-' + y; if (n[L]) if (n[L].uri === t.url || t.attrs['PATHWAY-ID'])n[L].addGroupId('audio', h.AUDIO), n[L].addGroupId('text', h.SUBTITLES); else { const A = a[L] += 1; t.attrs['PATHWAY-ID'] = new Array(A + 1).join('.'); const R = new rr(t); n[L] = R, i.push(R) } else { const k = new rr(t); n[L] = k, a[L] = 1, i.push(k) } } }), this.filterAndSortMediaOptions(i, e, s, o, l) }, r.filterAndSortMediaOptions = function(t, e, r, i, n) { const a = this; let s = []; let o = []; let l = t; if ((r || i) && n && (l = l.filter(function(t) { let e; const r = t.videoCodec; const i = t.videoRange; const n = t.width; const a = t.height; return (!!r || !(!n || !a)) && !!(e = i) && Qe.indexOf(e) > -1 })), l.length !== 0) { if (e.audioTracks) { const u = this.hls.config.preferManagedMediaSource; to(s = e.audioTracks.filter(function(t) { return !t.audioCodec || ie(t.audioCodec, 'audio', u) })) }e.subtitles && to(o = e.subtitles); const h = l.slice(0); l.sort(function(t, e) { if (t.attrs['HDCP-LEVEL'] !== e.attrs['HDCP-LEVEL']) return (t.attrs['HDCP-LEVEL'] || '') > (e.attrs['HDCP-LEVEL'] || '') ? 1 : -1; if (r && t.height !== e.height) return t.height - e.height; if (t.frameRate !== e.frameRate) return t.frameRate - e.frameRate; if (t.videoRange !== e.videoRange) return Qe.indexOf(t.videoRange) - Qe.indexOf(e.videoRange); if (t.videoCodec !== e.videoCodec) { const i = se(t.videoCodec); const n = se(e.videoCodec); if (i !== n) return n - i } if (t.uri === e.uri && t.codecSet !== e.codecSet) { const a = oe(t.codecSet); const s = oe(e.codecSet); if (a !== s) return s - a } return t.averageBitrate !== e.averageBitrate ? t.averageBitrate - e.averageBitrate : 0 }); let d = h[0]; if (this.steering && (l = this.steering.filterParsedLevels(l)).length !== h.length) for (let c = 0; c < h.length; c++) if (h[c].pathwayId === l[0].pathwayId) { d = h[c]; break } this._levels = l; for (let f = 0; f < l.length; f++) if (l[f] === d) { var g; this._firstLevel = f; const v = d.bitrate; const m = this.hls.bandwidthEstimate; if (this.log('manifest loaded, ' + l.length + ' level(s) found, first bitrate: ' + v), void 0 === ((g = this.hls.userConfig) == null ? void 0 : g.abrEwmaDefaultEstimate)) { const p = Math.min(v, this.hls.config.abrEwmaDefaultEstimateMax); p > m && m === Qs.abrEwmaDefaultEstimate && (this.hls.bandwidthEstimate = p) } break } const y = n && !i; const E = { levels: l, audioTracks: s, subtitleTracks: o, sessionData: e.sessionData, sessionKeys: e.sessionKeys, firstLevel: this._firstLevel, stats: e.stats, audio: n, video: i, altAudio: !y && s.some(function(t) { return !!t.url }) }; this.hls.trigger(S.MANIFEST_PARSED, E), (this.hls.config.autoStartLoad || this.hls.forceStartLoad) && this.hls.startLoad(this.hls.config.startPosition) } else Promise.resolve().then(function() { if (a.hls) { e.levels.length && a.warn('One or more CODECS in variant not supported: ' + JSON.stringify(e.levels[0].attrs)); const t = new Error('no level with compatible codecs found in manifest'); a.hls.trigger(S.ERROR, { type: L.MEDIA_ERROR, details: A.MANIFEST_INCOMPATIBLE_CODECS_ERROR, fatal: !0, url: e.url, error: t, reason: t.message }) } }) }, r.onError = function(t, e) { !e.fatal && e.context && e.context.type === be && e.context.level === this.level && this.checkRetry(e) }, r.onFragBuffered = function(t, e) { const r = e.frag; if (void 0 !== r && r.type === we) { const i = r.elementaryStreams; if (!Object.keys(i).some(function(t) { return !!i[t] })) return; const n = this._levels[r.level]; n != null && n.loadError && (this.log('Resetting level error count of ' + n.loadError + ' on frag buffered'), n.loadError = 0) } }, r.onLevelLoaded = function(t, e) { let r; let i; const n = e.level; const a = e.details; const s = this._levels[n]; if (!s) return this.warn('Invalid level index ' + n), void ((i = e.deliveryDirectives) != null && i.skip && (a.deltaUpdateFailed = !0)); n === this.currentLevelIndex ? (s.fragmentError === 0 && (s.loadError = 0), this.playlistLoaded(n, e, s.details)) : (r = e.deliveryDirectives) != null && r.skip && (a.deltaUpdateFailed = !0) }, r.loadPlaylist = function(e) { t.prototype.loadPlaylist.call(this); const r = this.currentLevelIndex; const i = this.currentLevel; if (i && this.shouldLoadPlaylist(i)) { let n = i.uri; if (e) try { n = e.addDirectives(n) } catch (t) { this.warn('Could not construct new URL with HLS Delivery Directives: ' + t) } const a = i.attrs['PATHWAY-ID']; this.log('Loading level index ' + r + (void 0 !== (e == null ? void 0 : e.msn) ? ' at sn ' + e.msn + ' part ' + e.part : '') + ' with' + (a ? ' Pathway ' + a : '') + ' ' + n), this.clearTimer(), this.hls.trigger(S.LEVEL_LOADING, { url: n, level: r, pathwayId: i.attrs['PATHWAY-ID'], id: 0, deliveryDirectives: e || null }) } }, r.removeLevel = function(t) { let e; const r = this; const i = this._levels.filter(function(e, i) { return i !== t || (r.steering && r.steering.removeLevel(e), e === r.currentLevel && (r.currentLevel = null, r.currentLevelIndex = -1, e.details && e.details.fragments.forEach(function(t) { return t.level = -1 })), !1) }); dr(i), this._levels = i, this.currentLevelIndex > -1 && (e = this.currentLevel) != null && e.details && (this.currentLevelIndex = this.currentLevel.details.fragments[0].level), this.hls.trigger(S.LEVELS_UPDATED, { levels: i }) }, r.onLevelsUpdated = function(t, e) { const r = e.levels; this._levels = r }, r.checkMaxAutoUpdated = function() { const t = this.hls; const e = t.autoLevelCapping; const r = t.maxAutoLevel; const i = t.maxHdcpLevel; this._maxAutoLevel !== r && (this._maxAutoLevel = r, this.hls.trigger(S.MAX_AUTO_LEVEL_UPDATED, { autoLevelCapping: e, levels: this.levels, maxAutoLevel: r, minAutoLevel: this.hls.minAutoLevel, maxHdcpLevel: i })) }, s(e, [{ key: 'levels', get: function() { return this._levels.length === 0 ? null : this._levels } }, { key: 'level', get: function() { return this.currentLevelIndex }, set: function(t) { const e = this._levels; if (e.length !== 0) { if (t < 0 || t >= e.length) { const r = new Error('invalid level idx'); const i = t < 0; if (this.hls.trigger(S.ERROR, { type: L.OTHER_ERROR, details: A.LEVEL_SWITCH_ERROR, level: t, fatal: i, error: r, reason: r.message }), i) return; t = Math.min(t, e.length - 1) } const n = this.currentLevelIndex; const a = this.currentLevel; const s = a ? a.attrs['PATHWAY-ID'] : void 0; const o = e[t]; const l = o.attrs['PATHWAY-ID']; if (this.currentLevelIndex = t, this.currentLevel = o, n !== t || !o.details || !a || s !== l) { this.log('Switching to level ' + t + ' (' + (o.height ? o.height + 'p ' : '') + (o.videoRange ? o.videoRange + ' ' : '') + (o.codecSet ? o.codecSet + ' ' : '') + '@' + o.bitrate + ')' + (l ? ' with Pathway ' + l : '') + ' from level ' + n + (s ? ' with Pathway ' + s : '')); const u = { level: t, attrs: o.attrs, details: o.details, bitrate: o.bitrate, averageBitrate: o.averageBitrate, maxBitrate: o.maxBitrate, realBitrate: o.realBitrate, width: o.width, height: o.height, codecSet: o.codecSet, audioCodec: o.audioCodec, videoCodec: o.videoCodec, audioGroups: o.audioGroups, subtitleGroups: o.subtitleGroups, loaded: o.loaded, loadError: o.loadError, fragmentError: o.fragmentError, name: o.name, id: o.id, uri: o.uri, url: o.url, urlId: 0, audioGroupIds: o.audioGroupIds, textGroupIds: o.textGroupIds }; this.hls.trigger(S.LEVEL_SWITCHING, u); const h = o.details; if (!h || h.live) { const d = this.switchParams(o.uri, a == null ? void 0 : a.details, h); this.loadPlaylist(d) } } } } }, { key: 'manualLevel', get: function() { return this.manualLevelIndex }, set: function(t) { this.manualLevelIndex = t, void 0 === this._startLevel && (this._startLevel = t), t !== -1 && (this.level = t) } }, { key: 'firstLevel', get: function() { return this._firstLevel }, set: function(t) { this._firstLevel = t } }, { key: 'startLevel', get: function() { if (void 0 === this._startLevel) { const t = this.hls.config.startLevel; return void 0 !== t ? t : this.hls.firstAutoLevel } return this._startLevel }, set: function(t) { this._startLevel = t } }, { key: 'nextLoadLevel', get: function() { return this.manualLevelIndex !== -1 ? this.manualLevelIndex : this.hls.nextAutoLevel }, set: function(t) { this.level = t, this.manualLevelIndex === -1 && (this.hls.nextAutoLevel = t) } }]), e }(wr)); function to(t) { const e = {}; t.forEach(function(t) { const r = t.groupId || ''; t.id = e[r] = e[r] || 0, e[r]++ }) } const eo = (function() { function t(t) { this.config = void 0, this.keyUriToKeyInfo = {}, this.emeController = null, this.config = t } const e = t.prototype; return e.abort = function(t) { for (const e in this.keyUriToKeyInfo) { const r = this.keyUriToKeyInfo[e].loader; if (r) { var i; if (t && t !== ((i = r.context) == null ? void 0 : i.frag.type)) return; r.abort() } } }, e.detach = function() { for (const t in this.keyUriToKeyInfo) { const e = this.keyUriToKeyInfo[t]; (e.mediaKeySessionContext || e.decryptdata.isCommonEncryption) && delete this.keyUriToKeyInfo[t] } }, e.destroy = function() { for (const t in this.detach(), this.keyUriToKeyInfo) { const e = this.keyUriToKeyInfo[t].loader; e && e.destroy() } this.keyUriToKeyInfo = {} }, e.createKeyLoadError = function(t, e, r, i, n) { return void 0 === e && (e = A.KEY_LOAD_ERROR), new li({ type: L.NETWORK_ERROR, details: e, fatal: !1, frag: t, response: n, error: r, networkDetails: i }) }, e.loadClear = function(t, e) { const r = this; if (this.emeController && this.config.emeEnabled) for (var i = t.sn, n = t.cc, a = function() { const t = e[s]; if (n <= t.cc && (i === 'initSegment' || t.sn === 'initSegment' || i < t.sn)) return r.emeController.selectKeySystemFormat(t).then(function(e) { t.setKeyFormat(e) }), 1 }, s = 0; s < e.length && !a(); s++); }, e.load = function(t) { const e = this; return !t.decryptdata && t.encrypted && this.emeController ? this.emeController.selectKeySystemFormat(t).then(function(r) { return e.loadInternal(t, r) }) : this.loadInternal(t) }, e.loadInternal = function(t, e) { let r, i; e && t.setKeyFormat(e); const n = t.decryptdata; if (!n) { const a = new Error(e ? 'Expected frag.decryptdata to be defined after setting format ' + e : 'Missing decryption data on fragment in onKeyLoading'); return Promise.reject(this.createKeyLoadError(t, A.KEY_LOAD_ERROR, a)) } const s = n.uri; if (!s) return Promise.reject(this.createKeyLoadError(t, A.KEY_LOAD_ERROR, new Error('Invalid key URI: "' + s + '"'))); let o; let l = this.keyUriToKeyInfo[s]; if ((r = l) != null && r.decryptdata.key) return n.key = l.decryptdata.key, Promise.resolve({ frag: t, keyInfo: l }); if ((i = l) != null && i.keyLoadPromise) switch ((o = l.mediaKeySessionContext) == null ? void 0 : o.keyStatus) { case void 0:case 'status-pending':case 'usable':case 'usable-in-future':return l.keyLoadPromise.then(function(e) { return n.key = e.keyInfo.decryptdata.key, { frag: t, keyInfo: l } }) } switch (l = this.keyUriToKeyInfo[s] = { decryptdata: n, keyLoadPromise: null, loader: null, mediaKeySessionContext: null }, n.method) { case 'ISO-23001-7':case 'SAMPLE-AES':case 'SAMPLE-AES-CENC':case 'SAMPLE-AES-CTR':return n.keyFormat === 'identity' ? this.loadKeyHTTP(l, t) : this.loadKeyEME(l, t); case 'AES-128':return this.loadKeyHTTP(l, t); default:return Promise.reject(this.createKeyLoadError(t, A.KEY_LOAD_ERROR, new Error('Key supplied with unsupported METHOD: "' + n.method + '"'))) } }, e.loadKeyEME = function(t, e) { const r = { frag: e, keyInfo: t }; if (this.emeController && this.config.emeEnabled) { const i = this.emeController.loadKey(r); if (i) return (t.keyLoadPromise = i.then(function(e) { return t.mediaKeySessionContext = e, r })).catch(function(e) { throw t.keyLoadPromise = null, e }) } return Promise.resolve(r) }, e.loadKeyHTTP = function(t, e) { const r = this; const n = this.config; const a = new (0, n.loader)(n); return e.keyLoader = t.loader = a, t.keyLoadPromise = new Promise(function(s, o) { const l = { keyInfo: t, frag: e, responseType: 'arraybuffer', url: t.decryptdata.uri }; const u = n.keyLoadPolicy.default; const h = { loadPolicy: u, timeout: u.maxLoadTimeMs, maxRetry: 0, retryDelay: 0, maxRetryDelay: 0 }; const d = { onSuccess: function(t, e, i, n) { const a = i.frag; const l = i.keyInfo; const u = i.url; if (!a.decryptdata || l !== r.keyUriToKeyInfo[u]) return o(r.createKeyLoadError(a, A.KEY_LOAD_ERROR, new Error('after key load, decryptdata unset or changed'), n)); l.decryptdata.key = a.decryptdata.key = new Uint8Array(t.data), a.keyLoader = null, l.loader = null, s({ frag: a, keyInfo: l }) }, onError: function(t, n, a, s) { r.resetLoader(n), o(r.createKeyLoadError(e, A.KEY_LOAD_ERROR, new Error('HTTP Error ' + t.code + ' loading key ' + t.text), a, i({ url: l.url, data: void 0 }, t))) }, onTimeout: function(t, i, n) { r.resetLoader(i), o(r.createKeyLoadError(e, A.KEY_LOAD_TIMEOUT, new Error('key loading timed out'), n)) }, onAbort: function(t, i, n) { r.resetLoader(i), o(r.createKeyLoadError(e, A.INTERNAL_ABORTED, new Error('key loading aborted'), n)) } }; a.load(l, h, d) }) }, e.resetLoader = function(t) { const e = t.frag; const r = t.keyInfo; const i = t.url; const n = r.loader; e.keyLoader === n && (e.keyLoader = null, r.loader = null), delete this.keyUriToKeyInfo[i], n && n.destroy() }, t }()); function ro() { return self.SourceBuffer || self.WebKitSourceBuffer } function io() { if (!ee()) return !1; const t = ro(); return !t || t.prototype && typeof t.prototype.appendBuffer === 'function' && typeof t.prototype.remove === 'function' } const no = (function() { function t(t, e, r, i) { this.config = void 0, this.media = null, this.fragmentTracker = void 0, this.hls = void 0, this.nudgeRetry = 0, this.stallReported = !1, this.stalled = null, this.moved = !1, this.seeking = !1, this.config = t, this.media = e, this.fragmentTracker = r, this.hls = i } const e = t.prototype; return e.destroy = function() { this.media = null, this.hls = this.fragmentTracker = null }, e.poll = function(t, e) { const r = this.config; const i = this.media; const n = this.stalled; if (i !== null) { const a = i.currentTime; const s = i.seeking; const o = this.seeking && !s; const l = !this.seeking && s; if (this.seeking = s, a === t) if (l || o) this.stalled = null; else if (i.paused && !s || i.ended || i.playbackRate === 0 || !Jr.getBuffered(i).length) this.nudgeRetry = 0; else { const u = Jr.bufferInfo(i, a, 0); const h = u.nextStart || 0; if (s) { const d = u.len > 2; const c = !h || e && e.start <= a || h - a > 2 && !this.fragmentTracker.getPartialFragment(a); if (d || c) return; this.moved = !1 } if (!this.moved && this.stalled !== null) { let f; if (!(u.len > 0 || h)) return; const g = Math.max(h, u.start || 0) - a; const v = this.hls.levels ? this.hls.levels[this.hls.currentLevel] : null; const m = (v == null || (f = v.details) == null ? void 0 : f.live) ? 2 * v.details.targetduration : 2; const p = this.fragmentTracker.getPartialFragment(a); if (g > 0 && (g <= m || p)) return void (i.paused || this._trySkipBufferHole(p)) } const y = self.performance.now(); if (n !== null) { const E = y - n; if (s || !(E >= 250) || (this._reportStall(u), this.media)) { const T = Jr.bufferInfo(i, a, r.maxBufferHole); this._tryFixBufferStall(T, E) } } else this.stalled = y } else if (this.moved = !0, s || (this.nudgeRetry = 0), n !== null) { if (this.stallReported) { const S = self.performance.now() - n; w.warn('playback not stuck anymore @' + a + ', after ' + Math.round(S) + 'ms'), this.stallReported = !1 } this.stalled = null } } }, e._tryFixBufferStall = function(t, e) { const r = this.config; const i = this.fragmentTracker; const n = this.media; if (n !== null) { const a = n.currentTime; const s = i.getPartialFragment(a); if (s && (this._trySkipBufferHole(s) || !this.media)) return; (t.len > r.maxBufferHole || t.nextStart && t.nextStart - a < r.maxBufferHole) && e > 1e3 * r.highBufferWatchdogPeriod && (w.warn('Trying to nudge playhead over buffer-hole'), this.stalled = null, this._tryNudgeBuffer()) } }, e._reportStall = function(t) { const e = this.hls; const r = this.media; if (!this.stallReported && r) { this.stallReported = !0; const i = new Error('Playback stalling at @' + r.currentTime + ' due to low buffer (' + JSON.stringify(t) + ')'); w.warn(i.message), e.trigger(S.ERROR, { type: L.MEDIA_ERROR, details: A.BUFFER_STALLED_ERROR, fatal: !1, error: i, buffer: t.len }) } }, e._trySkipBufferHole = function(t) { const e = this.config; const r = this.hls; const i = this.media; if (i === null) return 0; const n = i.currentTime; const a = Jr.bufferInfo(i, n, 0); const s = n < a.start ? a.start : a.nextStart; if (s) { const o = a.len <= e.maxBufferHole; const l = a.len > 0 && a.len < 1 && i.readyState < 3; const u = s - n; if (u > 0 && (o || l)) { if (u > e.maxBufferHole) { const h = this.fragmentTracker; let d = !1; if (n === 0) { const c = h.getAppendedFrag(0, we); c && s < c.end && (d = !0) } if (!d) { const f = t || h.getAppendedFrag(n, we); if (f) { for (var g = !1, v = f.end; v < s;) { const m = h.getPartialFragment(v); if (!m) { g = !0; break }v += m.duration } if (g) return 0 } } } const p = Math.max(s + 0.05, n + 0.1); if (w.warn('skipping hole, adjusting currentTime from ' + n + ' to ' + p), this.moved = !0, this.stalled = null, i.currentTime = p, t && !t.gap) { const y = new Error('fragment loaded with buffer holes, seeking from ' + n + ' to ' + p); r.trigger(S.ERROR, { type: L.MEDIA_ERROR, details: A.BUFFER_SEEK_OVER_HOLE, fatal: !1, error: y, reason: y.message, frag: t }) } return p } } return 0 }, e._tryNudgeBuffer = function() { const t = this.config; const e = this.hls; const r = this.media; const i = this.nudgeRetry; if (r !== null) { const n = r.currentTime; if (this.nudgeRetry++, i < t.nudgeMaxRetry) { const a = n + (i + 1) * t.nudgeOffset; const s = new Error('Nudging \'currentTime\' from ' + n + ' to ' + a); w.warn(s.message), r.currentTime = a, e.trigger(S.ERROR, { type: L.MEDIA_ERROR, details: A.BUFFER_NUDGE_ON_STALL, error: s, fatal: !1 }) } else { const o = new Error('Playhead still not moving while enough data buffered @' + n + ' after ' + t.nudgeMaxRetry + ' nudges'); w.error(o.message), e.trigger(S.ERROR, { type: L.MEDIA_ERROR, details: A.BUFFER_STALLED_ERROR, error: o, fatal: !0 }) } } }, t }()); const ao = (function(t) { function e(e, r, i) { let n; return (n = t.call(this, e, r, i, '[stream-controller]', we) || this).audioCodecSwap = !1, n.gapController = null, n.level = -1, n._forceStartLoad = !1, n.altAudio = !1, n.audioOnly = !1, n.fragPlaying = null, n.onvplaying = null, n.onvseeked = null, n.fragLastKbps = 0, n.couldBacktrack = !1, n.backtrackFragment = null, n.audioCodecSwitch = !1, n.videoBuffer = null, n._registerListeners(), n }l(e, t); const r = e.prototype; return r._registerListeners = function() { const t = this.hls; t.on(S.MEDIA_ATTACHED, this.onMediaAttached, this), t.on(S.MEDIA_DETACHING, this.onMediaDetaching, this), t.on(S.MANIFEST_LOADING, this.onManifestLoading, this), t.on(S.MANIFEST_PARSED, this.onManifestParsed, this), t.on(S.LEVEL_LOADING, this.onLevelLoading, this), t.on(S.LEVEL_LOADED, this.onLevelLoaded, this), t.on(S.FRAG_LOAD_EMERGENCY_ABORTED, this.onFragLoadEmergencyAborted, this), t.on(S.ERROR, this.onError, this), t.on(S.AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this), t.on(S.AUDIO_TRACK_SWITCHED, this.onAudioTrackSwitched, this), t.on(S.BUFFER_CREATED, this.onBufferCreated, this), t.on(S.BUFFER_FLUSHED, this.onBufferFlushed, this), t.on(S.LEVELS_UPDATED, this.onLevelsUpdated, this), t.on(S.FRAG_BUFFERED, this.onFragBuffered, this) }, r._unregisterListeners = function() { const t = this.hls; t.off(S.MEDIA_ATTACHED, this.onMediaAttached, this), t.off(S.MEDIA_DETACHING, this.onMediaDetaching, this), t.off(S.MANIFEST_LOADING, this.onManifestLoading, this), t.off(S.MANIFEST_PARSED, this.onManifestParsed, this), t.off(S.LEVEL_LOADED, this.onLevelLoaded, this), t.off(S.FRAG_LOAD_EMERGENCY_ABORTED, this.onFragLoadEmergencyAborted, this), t.off(S.ERROR, this.onError, this), t.off(S.AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this), t.off(S.AUDIO_TRACK_SWITCHED, this.onAudioTrackSwitched, this), t.off(S.BUFFER_CREATED, this.onBufferCreated, this), t.off(S.BUFFER_FLUSHED, this.onBufferFlushed, this), t.off(S.LEVELS_UPDATED, this.onLevelsUpdated, this), t.off(S.FRAG_BUFFERED, this.onFragBuffered, this) }, r.onHandlerDestroying = function() { this._unregisterListeners(), t.prototype.onHandlerDestroying.call(this) }, r.startLoad = function(t) { if (this.levels) { const e = this.lastCurrentTime; const r = this.hls; if (this.stopLoad(), this.setInterval(100), this.level = -1, !this.startFragRequested) { let i = r.startLevel; i === -1 && (r.config.testBandwidth && this.levels.length > 1 ? (i = 0, this.bitrateTest = !0) : i = r.firstAutoLevel), r.nextLoadLevel = i, this.level = r.loadLevel, this.loadedmetadata = !1 }e > 0 && t === -1 && (this.log('Override startPosition with lastCurrentTime @' + e.toFixed(3)), t = e), this.state = vi, this.nextLoadPosition = this.startPosition = this.lastCurrentTime = t, this.tick() } else this._forceStartLoad = !0, this.state = gi }, r.stopLoad = function() { this._forceStartLoad = !1, t.prototype.stopLoad.call(this) }, r.doTick = function() { switch (this.state) { case ki:var t = this.levels; var e = this.level; var r = t == null ? void 0 : t[e]; var i = r == null ? void 0 : r.details; if (i && (!i.live || this.levelLastLoaded === r)) { if (this.waitForCdnTuneIn(i)) break; this.state = vi; break } if (this.hls.nextLoadLevel !== this.level) { this.state = vi; break } break; case yi:var n; var a = self.performance.now(); var s = this.retryDate; if (!s || a >= s || (n = this.media) != null && n.seeking) { const o = this.levels; const l = this.level; const u = o == null ? void 0 : o[l]; this.resetStartWhenNotLoaded(u || null), this.state = vi } } this.state === vi && this.doTickIdle(), this.onTickEnd() }, r.onTickEnd = function() { t.prototype.onTickEnd.call(this), this.checkBuffer(), this.checkFragmentChanged() }, r.doTickIdle = function() { const t = this.hls; const e = this.levelLastLoaded; const r = this.levels; const i = this.media; if (e !== null && (i || !this.startFragRequested && t.config.startFragPrefetch) && (!this.altAudio || !this.audioOnly)) { const n = t.nextLoadLevel; if (r != null && r[n]) { const a = r[n]; const s = this.getMainFwdBufferInfo(); if (s !== null) { const o = this.getLevelDetails(); if (o && this._streamEnded(s, o)) { const l = {}; return this.altAudio && (l.type = 'video'), this.hls.trigger(S.BUFFER_EOS, l), void (this.state = Li) }t.loadLevel !== n && t.manualLevel === -1 && this.log('Adapting to level ' + n + ' from level ' + this.level), this.level = t.nextLoadLevel = n; const u = a.details; if (!u || this.state === ki || u.live && this.levelLastLoaded !== a) return this.level = n, void (this.state = ki); const h = s.len; const d = this.getMaxBufferLength(a.maxBitrate); if (!(h >= d)) { this.backtrackFragment && this.backtrackFragment.start > s.end && (this.backtrackFragment = null); const c = this.backtrackFragment ? this.backtrackFragment.start : s.end; let f = this.getNextFragment(c, u); if (this.couldBacktrack && !this.fragPrevious && f && f.sn !== 'initSegment' && this.fragmentTracker.getState(f) !== jr) { let g; const v = ((g = this.backtrackFragment) != null ? g : f).sn - u.startSN; const m = u.fragments[v - 1]; m && f.cc === m.cc && (f = m, this.fragmentTracker.removeFragment(m)) } else this.backtrackFragment && s.len && (this.backtrackFragment = null); if (f && this.isLoopLoading(f, c)) { if (!f.gap) { const p = this.audioOnly && !this.altAudio ? O : N; const y = (p === N ? this.videoBuffer : this.mediaBuffer) || this.media; y && this.afterBufferFlushed(y, p, we) }f = this.getNextFragmentLoopLoading(f, u, s, we, d) }f && (!f.initSegment || f.initSegment.data || this.bitrateTest || (f = f.initSegment), this.loadFragment(f, a, c)) } } } } }, r.loadFragment = function(e, r, i) { const n = this.fragmentTracker.getState(e); this.fragCurrent = e, n === Vr || n === Wr ? e.sn === 'initSegment' ? this._loadInitSegment(e, r) : this.bitrateTest ? (this.log('Fragment ' + e.sn + ' of level ' + e.level + ' is being downloaded to test bitrate and will not be buffered'), this._loadBitrateTestFrag(e, r)) : (this.startFragRequested = !0, t.prototype.loadFragment.call(this, e, r, i)) : this.clearTrackerIfNeeded(e) }, r.getBufferedFrag = function(t) { return this.fragmentTracker.getBufferedFrag(t, we) }, r.followingBufferedFrag = function(t) { return t ? this.getBufferedFrag(t.end + 0.5) : null }, r.immediateLevelSwitch = function() { this.abortCurrentFrag(), this.flushMainBuffer(0, Number.POSITIVE_INFINITY) }, r.nextLevelSwitch = function() { const t = this.levels; const e = this.media; if (e != null && e.readyState) { let r; const i = this.getAppendedFrag(e.currentTime); i && i.start > 1 && this.flushMainBuffer(0, i.start - 1); const n = this.getLevelDetails(); if (n != null && n.live) { const a = this.getMainFwdBufferInfo(); if (!a || a.len < 2 * n.targetduration) return } if (!e.paused && t) { const s = t[this.hls.nextLoadLevel]; const o = this.fragLastKbps; r = o && this.fragCurrent ? this.fragCurrent.duration * s.maxBitrate / (1e3 * o) + 1 : 0 } else r = 0; const l = this.getBufferedFrag(e.currentTime + r); if (l) { const u = this.followingBufferedFrag(l); if (u) { this.abortCurrentFrag(); const h = u.maxStartPTS ? u.maxStartPTS : u.start; const d = u.duration; const c = Math.max(l.end, h + Math.min(Math.max(d - this.config.maxFragLookUpTolerance, d * (this.couldBacktrack ? 0.5 : 0.125)), d * (this.couldBacktrack ? 0.75 : 0.25))); this.flushMainBuffer(c, Number.POSITIVE_INFINITY) } } } }, r.abortCurrentFrag = function() { const t = this.fragCurrent; switch (this.fragCurrent = null, this.backtrackFragment = null, t && (t.abortRequests(), this.fragmentTracker.removeFragment(t)), this.state) { case mi:case pi:case yi:case Ti:case Si:this.state = vi } this.nextLoadPosition = this.getLoadPosition() }, r.flushMainBuffer = function(e, r) { t.prototype.flushMainBuffer.call(this, e, r, this.altAudio ? 'video' : null) }, r.onMediaAttached = function(e, r) { t.prototype.onMediaAttached.call(this, e, r); const i = r.media; this.onvplaying = this.onMediaPlaying.bind(this), this.onvseeked = this.onMediaSeeked.bind(this), i.addEventListener('playing', this.onvplaying), i.addEventListener('seeked', this.onvseeked), this.gapController = new no(this.config, i, this.fragmentTracker, this.hls) }, r.onMediaDetaching = function() { const e = this.media; e && this.onvplaying && this.onvseeked && (e.removeEventListener('playing', this.onvplaying), e.removeEventListener('seeked', this.onvseeked), this.onvplaying = this.onvseeked = null, this.videoBuffer = null), this.fragPlaying = null, this.gapController && (this.gapController.destroy(), this.gapController = null), t.prototype.onMediaDetaching.call(this) }, r.onMediaPlaying = function() { this.tick() }, r.onMediaSeeked = function() { const t = this.media; const e = t ? t.currentTime : null; y(e) && this.log('Media seeked to ' + e.toFixed(3)); const r = this.getMainFwdBufferInfo(); r !== null && r.len !== 0 ? this.tick() : this.warn('Main forward buffer length on "seeked" event ' + (r ? r.len : 'empty') + ')') }, r.onManifestLoading = function() { this.log('Trigger BUFFER_RESET'), this.hls.trigger(S.BUFFER_RESET, void 0), this.fragmentTracker.removeAllFragments(), this.couldBacktrack = !1, this.startPosition = this.lastCurrentTime = this.fragLastKbps = 0, this.levels = this.fragPlaying = this.backtrackFragment = this.levelLastLoaded = null, this.altAudio = this.audioOnly = this.startFragRequested = !1 }, r.onManifestParsed = function(t, e) { let r; let i; let n = !1; let a = !1; e.levels.forEach(function(t) { const e = t.audioCodec; e && (n = n || e.indexOf('mp4a.40.2') !== -1, a = a || e.indexOf('mp4a.40.5') !== -1) }), this.audioCodecSwitch = n && a && !(typeof ((i = ro()) == null || (r = i.prototype) == null ? void 0 : r.changeType) === 'function'), this.audioCodecSwitch && this.log('Both AAC/HE-AAC audio found in levels; declaring level codec as HE-AAC'), this.levels = e.levels, this.startFragRequested = !1 }, r.onLevelLoading = function(t, e) { const r = this.levels; if (r && this.state === vi) { const i = r[e.level]; (!i.details || i.details.live && this.levelLastLoaded !== i || this.waitForCdnTuneIn(i.details)) && (this.state = ki) } }, r.onLevelLoaded = function(t, e) { let r; const i = this.levels; const n = e.level; const a = e.details; const s = a.totalduration; if (i) { this.log('Level ' + n + ' loaded [' + a.startSN + ',' + a.endSN + ']' + (a.lastPartSn ? '[part-' + a.lastPartSn + '-' + a.lastPartIndex + ']' : '') + ', cc [' + a.startCC + ', ' + a.endCC + '] duration:' + s); const o = i[n]; const l = this.fragCurrent; !l || this.state !== pi && this.state !== yi || l.level !== e.level && l.loader && this.abortCurrentFrag(); let u = 0; if (a.live || (r = o.details) != null && r.live) { let h; if (this.checkLiveUpdate(a), a.deltaUpdateFailed) return; u = this.alignPlaylists(a, o.details, (h = this.levelLastLoaded) == null ? void 0 : h.details) } if (o.details = a, this.levelLastLoaded = o, this.hls.trigger(S.LEVEL_UPDATED, { details: a, level: n }), this.state === ki) { if (this.waitForCdnTuneIn(a)) return; this.state = vi } this.startFragRequested ? a.live && this.synchronizeToLiveEdge(a) : this.setStartPosition(a, u), this.tick() } else this.warn('Levels were reset while loading level ' + n) }, r._handleFragmentLoadProgress = function(t) { let e; const r = t.frag; const i = t.part; const n = t.payload; const a = this.levels; if (a) { const s = a[r.level]; const o = s.details; if (!o) return this.warn('Dropping fragment ' + r.sn + ' of level ' + r.level + ' after level details were reset'), void this.fragmentTracker.removeFragment(r); const l = s.videoCodec; const u = o.PTSKnown || !o.live; const h = (e = r.initSegment) == null ? void 0 : e.data; const d = this._getAudioCodec(s); const c = this.transmuxer = this.transmuxer || new Kn(this.hls, we, this._handleTransmuxComplete.bind(this), this._handleTransmuxerFlush.bind(this)); const f = i ? i.index : -1; const g = f !== -1; const v = new $r(r.level, r.sn, r.stats.chunkCount, n.byteLength, f, g); const m = this.initPTS[r.cc]; c.push(n, h, d, l, r, i, o.totalduration, u, v, m) } else this.warn('Levels were reset while fragment load was in progress. Fragment ' + r.sn + ' of level ' + r.level + ' will not be buffered') }, r.onAudioTrackSwitching = function(t, e) { const r = this.altAudio; if (!e.url) { if (this.mediaBuffer !== this.media) { this.log('Switching on main audio, use media.buffered to schedule main fragment loading'), this.mediaBuffer = this.media; const i = this.fragCurrent; i && (this.log('Switching to main audio track, cancel main fragment load'), i.abortRequests(), this.fragmentTracker.removeFragment(i)), this.resetTransmuxer(), this.resetLoadingState() } else this.audioOnly && this.resetTransmuxer(); const n = this.hls; r && (n.trigger(S.BUFFER_FLUSHING, { startOffset: 0, endOffset: Number.POSITIVE_INFINITY, type: null }), this.fragmentTracker.removeAllFragments()), n.trigger(S.AUDIO_TRACK_SWITCHED, e) } }, r.onAudioTrackSwitched = function(t, e) { const r = e.id; const i = !!this.hls.audioTracks[r].url; if (i) { const n = this.videoBuffer; n && this.mediaBuffer !== n && (this.log('Switching on alternate audio, use video.buffered to schedule main fragment loading'), this.mediaBuffer = n) } this.altAudio = i, this.tick() }, r.onBufferCreated = function(t, e) { let r; let i; const n = e.tracks; let a = !1; for (const s in n) { const o = n[s]; if (o.id === 'main') { if (i = s, r = o, s === 'video') { const l = n[s]; l && (this.videoBuffer = l.buffer) } } else a = !0 }a && r ? (this.log('Alternate track found, use ' + i + '.buffered to schedule main fragment loading'), this.mediaBuffer = r.buffer) : this.mediaBuffer = this.media }, r.onFragBuffered = function(t, e) { const r = e.frag; const i = e.part; if (!r || r.type === we) { if (this.fragContextChanged(r)) return this.warn('Fragment ' + r.sn + (i ? ' p: ' + i.index : '') + ' of level ' + r.level + ' finished buffering, but was aborted. state: ' + this.state), void (this.state === Si && (this.state = vi)); const n = i ? i.stats : r.stats; this.fragLastKbps = Math.round(8 * n.total / (n.buffering.end - n.loading.first)), r.sn !== 'initSegment' && (this.fragPrevious = r), this.fragBufferedComplete(r, i) } }, r.onError = function(t, e) { let r; if (e.fatal) this.state = Ai; else switch (e.details) { case A.FRAG_GAP:case A.FRAG_PARSING_ERROR:case A.FRAG_DECRYPT_ERROR:case A.FRAG_LOAD_ERROR:case A.FRAG_LOAD_TIMEOUT:case A.KEY_LOAD_ERROR:case A.KEY_LOAD_TIMEOUT:this.onFragmentOrKeyLoadError(we, e); break; case A.LEVEL_LOAD_ERROR:case A.LEVEL_LOAD_TIMEOUT:case A.LEVEL_PARSING_ERROR:e.levelRetry || this.state !== ki || ((r = e.context) == null ? void 0 : r.type) !== be || (this.state = vi); break; case A.BUFFER_APPEND_ERROR:case A.BUFFER_FULL_ERROR:if (!e.parent || e.parent !== 'main') return; if (e.details === A.BUFFER_APPEND_ERROR) return void this.resetLoadingState(); this.reduceLengthAndFlushBuffer(e) && this.flushMainBuffer(0, Number.POSITIVE_INFINITY); break; case A.INTERNAL_EXCEPTION:this.recoverWorkerError(e) } }, r.checkBuffer = function() { const t = this.media; const e = this.gapController; if (t && e && t.readyState) { if (this.loadedmetadata || !Jr.getBuffered(t).length) { const r = this.state !== vi ? this.fragCurrent : null; e.poll(this.lastCurrentTime, r) } this.lastCurrentTime = t.currentTime } }, r.onFragLoadEmergencyAborted = function() { this.state = vi, this.loadedmetadata || (this.startFragRequested = !1, this.nextLoadPosition = this.startPosition), this.tickImmediate() }, r.onBufferFlushed = function(t, e) { const r = e.type; if (r !== O || this.audioOnly && !this.altAudio) { const i = (r === N ? this.videoBuffer : this.mediaBuffer) || this.media; this.afterBufferFlushed(i, r, we), this.tick() } }, r.onLevelsUpdated = function(t, e) { this.level > -1 && this.fragCurrent && (this.level = this.fragCurrent.level), this.levels = e.levels }, r.swapAudioCodec = function() { this.audioCodecSwap = !this.audioCodecSwap }, r.seekToStartPos = function() { const t = this.media; if (t) { const e = t.currentTime; let r = this.startPosition; if (r >= 0 && e < r) { if (t.seeking) return void this.log('could not seek to ' + r + ', already seeking at ' + e); const i = Jr.getBuffered(t); const n = (i.length ? i.start(0) : 0) - r; n > 0 && (n < this.config.maxBufferHole || n < this.config.maxFragLookUpTolerance) && (this.log('adjusting start position by ' + n + ' to match buffer start'), r += n, this.startPosition = r), this.log('seek to target start position ' + r + ' from current time ' + e), t.currentTime = r } } }, r._getAudioCodec = function(t) { let e = this.config.defaultAudioCodec || t.audioCodec; return this.audioCodecSwap && e && (this.log('Swapping audio codec'), e = e.indexOf('mp4a.40.5') !== -1 ? 'mp4a.40.2' : 'mp4a.40.5'), e }, r._loadBitrateTestFrag = function(t, e) { const r = this; t.bitrateTest = !0, this._doFragLoad(t, e).then(function(i) { const n = r.hls; if (i && !r.fragContextChanged(t)) { e.fragmentError = 0, r.state = vi, r.startFragRequested = !1, r.bitrateTest = !1; const a = t.stats; a.parsing.start = a.parsing.end = a.buffering.start = a.buffering.end = self.performance.now(), n.trigger(S.FRAG_LOADED, i), t.bitrateTest = !1 } }) }, r._handleTransmuxComplete = function(t) { let e; const r = 'main'; const i = this.hls; const n = t.remuxResult; const a = t.chunkMeta; const s = this.getCurrentContext(a); if (s) { const o = s.frag; const l = s.part; const u = s.level; const h = n.video; const d = n.text; const c = n.id3; const f = n.initSegment; const g = u.details; const v = this.altAudio ? void 0 : n.audio; if (this.fragContextChanged(o)) this.fragmentTracker.removeFragment(o); else { if (this.state = Ti, f) { if (f != null && f.tracks) { const m = o.initSegment || o; this._bufferInitSegment(u, f.tracks, m, a), i.trigger(S.FRAG_PARSING_INIT_SEGMENT, { frag: m, id: r, tracks: f.tracks }) } const p = f.initPTS; const E = f.timescale; y(p) && (this.initPTS[o.cc] = { baseTime: p, timescale: E }, i.trigger(S.INIT_PTS_FOUND, { frag: o, id: r, initPTS: p, timescale: E })) } if (h && g && o.sn !== 'initSegment') { const T = g.fragments[o.sn - 1 - g.startSN]; const L = o.sn === g.startSN; const A = !T || o.cc > T.cc; if (!1 !== n.independent) { const R = h.startPTS; const k = h.endPTS; const b = h.startDTS; const D = h.endDTS; if (l)l.elementaryStreams[h.type] = { startPTS: R, endPTS: k, startDTS: b, endDTS: D }; else if (h.firstKeyFrame && h.independent && a.id === 1 && !A && (this.couldBacktrack = !0), h.dropped && h.independent) { const I = this.getMainFwdBufferInfo(); const w = (I ? I.end : this.getLoadPosition()) + this.config.maxBufferHole; const C = h.firstKeyFramePTS ? h.firstKeyFramePTS : R; if (!L && w < C - this.config.maxBufferHole && !A) return void this.backtrack(o); A && (o.gap = !0), o.setElementaryStreamInfo(h.type, o.start, k, o.start, D, !0) } else L && R > 2 && (o.gap = !0); o.setElementaryStreamInfo(h.type, R, k, b, D), this.backtrackFragment && (this.backtrackFragment = o), this.bufferFragmentData(h, o, l, a, L || A) } else { if (!L && !A) return void this.backtrack(o); o.gap = !0 } } if (v) { const _ = v.startPTS; const x = v.endPTS; const P = v.startDTS; const F = v.endDTS; l && (l.elementaryStreams[O] = { startPTS: _, endPTS: x, startDTS: P, endDTS: F }), o.setElementaryStreamInfo(O, _, x, P, F), this.bufferFragmentData(v, o, l, a) } if (g && c != null && (e = c.samples) != null && e.length) { const M = { id: r, frag: o, details: g, samples: c.samples }; i.trigger(S.FRAG_PARSING_METADATA, M) } if (g && d) { const N = { id: r, frag: o, details: g, samples: d.samples }; i.trigger(S.FRAG_PARSING_USERDATA, N) } } } else this.resetWhenMissingContext(a) }, r._bufferInitSegment = function(t, e, r, i) { const n = this; if (this.state === Ti) { this.audioOnly = !!e.audio && !e.video, this.altAudio && !this.audioOnly && delete e.audio; const a = e.audio; const s = e.video; const o = e.audiovideo; if (a) { let l = t.audioCodec; const u = navigator.userAgent.toLowerCase(); this.audioCodecSwitch && (l && (l = l.indexOf('mp4a.40.5') !== -1 ? 'mp4a.40.2' : 'mp4a.40.5'), a.metadata.channelCount !== 1 && u.indexOf('firefox') === -1 && (l = 'mp4a.40.5')), l && l.indexOf('mp4a.40.5') !== -1 && u.indexOf('android') !== -1 && a.container !== 'audio/mpeg' && (l = 'mp4a.40.2', this.log('Android: force audio codec to ' + l)), t.audioCodec && t.audioCodec !== l && this.log('Swapping manifest audio codec "' + t.audioCodec + '" for "' + l + '"'), a.levelCodec = l, a.id = 'main', this.log('Init audio buffer, container:' + a.container + ', codecs[selected/level/parsed]=[' + (l || '') + '/' + (t.audioCodec || '') + '/' + a.codec + ']') }s && (s.levelCodec = t.videoCodec, s.id = 'main', this.log('Init video buffer, container:' + s.container + ', codecs[level/parsed]=[' + (t.videoCodec || '') + '/' + s.codec + ']')), o && this.log('Init audiovideo buffer, container:' + o.container + ', codecs[level/parsed]=[' + t.codecs + '/' + o.codec + ']'), this.hls.trigger(S.BUFFER_CODECS, e), Object.keys(e).forEach(function(t) { const a = e[t].initSegment; a != null && a.byteLength && n.hls.trigger(S.BUFFER_APPENDING, { type: t, data: a, frag: r, part: null, chunkMeta: i, parent: r.type }) }), this.tickImmediate() } }, r.getMainFwdBufferInfo = function() { return this.getFwdBufferInfo(this.mediaBuffer ? this.mediaBuffer : this.media, we) }, r.backtrack = function(t) { this.couldBacktrack = !0, this.backtrackFragment = t, this.resetTransmuxer(), this.flushBufferGap(t), this.fragmentTracker.removeFragment(t), this.fragPrevious = null, this.nextLoadPosition = t.start, this.state = vi }, r.checkFragmentChanged = function() { const t = this.media; let e = null; if (t && t.readyState > 1 && !1 === t.seeking) { const r = t.currentTime; if (Jr.isBuffered(t, r) ? e = this.getAppendedFrag(r) : Jr.isBuffered(t, r + 0.1) && (e = this.getAppendedFrag(r + 0.1)), e) { this.backtrackFragment = null; const i = this.fragPlaying; const n = e.level; i && e.sn === i.sn && i.level === n || (this.fragPlaying = e, this.hls.trigger(S.FRAG_CHANGED, { frag: e }), i && i.level === n || this.hls.trigger(S.LEVEL_SWITCHED, { level: n })) } } }, s(e, [{ key: 'nextLevel', get: function() { const t = this.nextBufferedFrag; return t ? t.level : -1 } }, { key: 'currentFrag', get: function() { const t = this.media; return t ? this.fragPlaying || this.getAppendedFrag(t.currentTime) : null } }, { key: 'currentProgramDateTime', get: function() { const t = this.media; if (t) { const e = t.currentTime; const r = this.currentFrag; if (r && y(e) && y(r.programDateTime)) { const i = r.programDateTime + 1e3 * (e - r.start); return new Date(i) } } return null } }, { key: 'currentLevel', get: function() { const t = this.currentFrag; return t ? t.level : -1 } }, { key: 'nextBufferedFrag', get: function() { const t = this.currentFrag; return t ? this.followingBufferedFrag(t) : null } }, { key: 'forceStartLoad', get: function() { return this._forceStartLoad } }]), e }(bi)); const so = (function() { function t(e) { void 0 === e && (e = {}), this.config = void 0, this.userConfig = void 0, this.coreComponents = void 0, this.networkControllers = void 0, this.started = !1, this._emitter = new Nn(), this._autoLevelCapping = -1, this._maxHdcpLevel = null, this.abrController = void 0, this.bufferController = void 0, this.capLevelController = void 0, this.latencyController = void 0, this.levelController = void 0, this.streamController = void 0, this.audioTrackController = void 0, this.subtitleTrackController = void 0, this.emeController = void 0, this.cmcdController = void 0, this._media = null, this.url = null, this.triggeringException = void 0, I(e.debug || !1, 'Hls instance'); const r = this.config = (function(t, e) { if ((e.liveSyncDurationCount || e.liveMaxLatencyDurationCount) && (e.liveSyncDuration || e.liveMaxLatencyDuration)) throw new Error('Illegal hls.js config: don\'t mix up liveSyncDurationCount/liveMaxLatencyDurationCount and liveSyncDuration/liveMaxLatencyDuration'); if (void 0 !== e.liveMaxLatencyDurationCount && (void 0 === e.liveSyncDurationCount || e.liveMaxLatencyDurationCount <= e.liveSyncDurationCount)) throw new Error('Illegal hls.js config: "liveMaxLatencyDurationCount" must be greater than "liveSyncDurationCount"'); if (void 0 !== e.liveMaxLatencyDuration && (void 0 === e.liveSyncDuration || e.liveMaxLatencyDuration <= e.liveSyncDuration)) throw new Error('Illegal hls.js config: "liveMaxLatencyDuration" must be greater than "liveSyncDuration"'); const r = Js(t); const n = ['TimeOut', 'MaxRetry', 'RetryDelay', 'MaxRetryTimeout']; return ['manifest', 'level', 'frag'].forEach(function(t) { const i = (t === 'level' ? 'playlist' : t) + 'LoadPolicy'; const a = void 0 === e[i]; const s = []; n.forEach(function(n) { const o = t + 'Loading' + n; const l = e[o]; if (void 0 !== l && a) { s.push(o); const u = r[i].default; switch (e[i] = { default: u }, n) { case 'TimeOut':u.maxLoadTimeMs = l, u.maxTimeToFirstByteMs = l; break; case 'MaxRetry':u.errorRetry.maxNumRetry = l, u.timeoutRetry.maxNumRetry = l; break; case 'RetryDelay':u.errorRetry.retryDelayMs = l, u.timeoutRetry.retryDelayMs = l; break; case 'MaxRetryTimeout':u.errorRetry.maxRetryDelayMs = l, u.timeoutRetry.maxRetryDelayMs = l } } }), s.length && w.warn('hls.js config: "' + s.join('", "') + '" setting(s) are deprecated, use "' + i + '": ' + JSON.stringify(e[i])) }), i(i({}, r), e) }(t.DefaultConfig, e)); this.userConfig = e, r.progressive && $s(r); const n = r.abrController; const a = r.bufferController; const s = r.capLevelController; const o = r.errorController; const l = r.fpsController; const u = new o(this); const h = this.abrController = new n(this); const d = this.bufferController = new a(this); const c = this.capLevelController = new s(this); const f = new l(this); const g = new Fe(this); const v = new qe(this); const m = r.contentSteeringController; const p = m ? new m(this) : null; const y = this.levelController = new Zs(this, p); const E = new qr(this); const T = new eo(this.config); const L = this.streamController = new ao(this, E, T); c.setStreamController(L), f.setStreamController(L); const A = [g, y, L]; p && A.splice(1, 0, p), this.networkControllers = A; const R = [h, d, c, f, v, E]; this.audioTrackController = this.createController(r.audioTrackController, A); const k = r.audioStreamController; k && A.push(new k(this, E, T)), this.subtitleTrackController = this.createController(r.subtitleTrackController, A); const b = r.subtitleStreamController; b && A.push(new b(this, E, T)), this.createController(r.timelineController, R), T.emeController = this.emeController = this.createController(r.emeController, R), this.cmcdController = this.createController(r.cmcdController, R), this.latencyController = this.createController(Xe, R), this.coreComponents = R, A.push(u); const D = u.onErrorOut; typeof D === 'function' && this.on(S.ERROR, D, u) }t.isMSESupported = function() { return io() }, t.isSupported = function() { return (function() { if (!io()) return !1; const t = ee(); return typeof (t == null ? void 0 : t.isTypeSupported) === 'function' && (['avc1.42E01E,mp4a.40.2', 'av01.0.01M.08', 'vp09.00.50.08'].some(function(e) { return t.isTypeSupported(ae(e, 'video')) }) || ['mp4a.40.2', 'fLaC'].some(function(e) { return t.isTypeSupported(ae(e, 'audio')) })) }()) }, t.getMediaSource = function() { return ee() }; const e = t.prototype; return e.createController = function(t, e) { if (t) { const r = new t(this); return e && e.push(r), r } return null }, e.on = function(t, e, r) { void 0 === r && (r = this), this._emitter.on(t, e, r) }, e.once = function(t, e, r) { void 0 === r && (r = this), this._emitter.once(t, e, r) }, e.removeAllListeners = function(t) { this._emitter.removeAllListeners(t) }, e.off = function(t, e, r, i) { void 0 === r && (r = this), this._emitter.off(t, e, r, i) }, e.listeners = function(t) { return this._emitter.listeners(t) }, e.emit = function(t, e, r) { return this._emitter.emit(t, e, r) }, e.trigger = function(t, e) { if (this.config.debug) return this.emit(t, t, e); try { return this.emit(t, t, e) } catch (e) { if (w.error('An internal error happened while handling event ' + t + '. Error message: "' + e.message + '". Here is a stacktrace:', e), !this.triggeringException) { this.triggeringException = !0; const r = t === S.ERROR; this.trigger(S.ERROR, { type: L.OTHER_ERROR, details: A.INTERNAL_EXCEPTION, fatal: r, event: t, error: e }), this.triggeringException = !1 } } return !1 }, e.listenerCount = function(t) { return this._emitter.listenerCount(t) }, e.destroy = function() { w.log('destroy'), this.trigger(S.DESTROYING, void 0), this.detachMedia(), this.removeAllListeners(), this._autoLevelCapping = -1, this.url = null, this.networkControllers.forEach(function(t) { return t.destroy() }), this.networkControllers.length = 0, this.coreComponents.forEach(function(t) { return t.destroy() }), this.coreComponents.length = 0; const t = this.config; t.xhrSetup = t.fetchSetup = void 0, this.userConfig = null }, e.attachMedia = function(t) { w.log('attachMedia'), this._media = t, this.trigger(S.MEDIA_ATTACHING, { media: t }) }, e.detachMedia = function() { w.log('detachMedia'), this.trigger(S.MEDIA_DETACHING, void 0), this._media = null }, e.loadSource = function(t) { this.stopLoad(); const e = this.media; const r = this.url; const i = this.url = p.buildAbsoluteURL(self.location.href, t, { alwaysNormalize: !0 }); this._autoLevelCapping = -1, this._maxHdcpLevel = null, w.log('loadSource:' + i), e && r && (r !== i || this.bufferController.hasSourceTypes()) && (this.detachMedia(), this.attachMedia(e)), this.trigger(S.MANIFEST_LOADING, { url: t }) }, e.startLoad = function(t) { void 0 === t && (t = -1), w.log('startLoad(' + t + ')'), this.started = !0, this.networkControllers.forEach(function(e) { e.startLoad(t) }) }, e.stopLoad = function() { w.log('stopLoad'), this.started = !1, this.networkControllers.forEach(function(t) { t.stopLoad() }) }, e.resumeBuffering = function() { this.started && this.networkControllers.forEach(function(t) { 'fragmentLoader' in t && t.startLoad(-1) }) }, e.pauseBuffering = function() { this.networkControllers.forEach(function(t) { 'fragmentLoader' in t && t.stopLoad() }) }, e.swapAudioCodec = function() { w.log('swapAudioCodec'), this.streamController.swapAudioCodec() }, e.recoverMediaError = function() { w.log('recoverMediaError'); const t = this._media; this.detachMedia(), t && this.attachMedia(t) }, e.removeLevel = function(t) { this.levelController.removeLevel(t) }, e.setAudioOption = function(t) { let e; return (e = this.audioTrackController) == null ? void 0 : e.setAudioOption(t) }, e.setSubtitleOption = function(t) { let e; return (e = this.subtitleTrackController) == null || e.setSubtitleOption(t), null }, s(t, [{ key: 'levels', get: function() { const t = this.levelController.levels; return t || [] } }, { key: 'currentLevel', get: function() { return this.streamController.currentLevel }, set: function(t) { w.log('set currentLevel:' + t), this.levelController.manualLevel = t, this.streamController.immediateLevelSwitch() } }, { key: 'nextLevel', get: function() { return this.streamController.nextLevel }, set: function(t) { w.log('set nextLevel:' + t), this.levelController.manualLevel = t, this.streamController.nextLevelSwitch() } }, { key: 'loadLevel', get: function() { return this.levelController.level }, set: function(t) { w.log('set loadLevel:' + t), this.levelController.manualLevel = t } }, { key: 'nextLoadLevel', get: function() { return this.levelController.nextLoadLevel }, set: function(t) { this.levelController.nextLoadLevel = t } }, { key: 'firstLevel', get: function() { return Math.max(this.levelController.firstLevel, this.minAutoLevel) }, set: function(t) { w.log('set firstLevel:' + t), this.levelController.firstLevel = t } }, { key: 'startLevel', get: function() { const t = this.levelController.startLevel; return t === -1 && this.abrController.forcedAutoLevel > -1 ? this.abrController.forcedAutoLevel : t }, set: function(t) { w.log('set startLevel:' + t), t !== -1 && (t = Math.max(t, this.minAutoLevel)), this.levelController.startLevel = t } }, { key: 'capLevelToPlayerSize', get: function() { return this.config.capLevelToPlayerSize }, set: function(t) { const e = !!t; e !== this.config.capLevelToPlayerSize && (e ? this.capLevelController.startCapping() : (this.capLevelController.stopCapping(), this.autoLevelCapping = -1, this.streamController.nextLevelSwitch()), this.config.capLevelToPlayerSize = e) } }, { key: 'autoLevelCapping', get: function() { return this._autoLevelCapping }, set: function(t) { this._autoLevelCapping !== t && (w.log('set autoLevelCapping:' + t), this._autoLevelCapping = t, this.levelController.checkMaxAutoUpdated()) } }, { key: 'bandwidthEstimate', get: function() { const t = this.abrController.bwEstimator; return t ? t.getEstimate() : NaN }, set: function(t) { this.abrController.resetEstimator(t) } }, { key: 'ttfbEstimate', get: function() { const t = this.abrController.bwEstimator; return t ? t.getEstimateTTFB() : NaN } }, { key: 'maxHdcpLevel', get: function() { return this._maxHdcpLevel }, set: function(t) { (function(t) { return ze.indexOf(t) > -1 })(t) && this._maxHdcpLevel !== t && (this._maxHdcpLevel = t, this.levelController.checkMaxAutoUpdated()) } }, { key: 'autoLevelEnabled', get: function() { return this.levelController.manualLevel === -1 } }, { key: 'manualLevel', get: function() { return this.levelController.manualLevel } }, { key: 'minAutoLevel', get: function() { const t = this.levels; const e = this.config.minAutoBitrate; if (!t) return 0; for (let r = t.length, i = 0; i < r; i++) if (t[i].maxBitrate >= e) return i; return 0 } }, { key: 'maxAutoLevel', get: function() { let t; const e = this.levels; const r = this.autoLevelCapping; const i = this.maxHdcpLevel; if (t = r === -1 && e != null && e.length ? e.length - 1 : r, i) for (let n = t; n--;) { const a = e[n].attrs['HDCP-LEVEL']; if (a && a <= i) return n } return t } }, { key: 'firstAutoLevel', get: function() { return this.abrController.firstAutoLevel } }, { key: 'nextAutoLevel', get: function() { return this.abrController.nextAutoLevel }, set: function(t) { this.abrController.nextAutoLevel = t } }, { key: 'playingDate', get: function() { return this.streamController.currentProgramDateTime } }, { key: 'mainForwardBufferInfo', get: function() { return this.streamController.getMainFwdBufferInfo() } }, { key: 'allAudioTracks', get: function() { const t = this.audioTrackController; return t ? t.allAudioTracks : [] } }, { key: 'audioTracks', get: function() { const t = this.audioTrackController; return t ? t.audioTracks : [] } }, { key: 'audioTrack', get: function() { const t = this.audioTrackController; return t ? t.audioTrack : -1 }, set: function(t) { const e = this.audioTrackController; e && (e.audioTrack = t) } }, { key: 'allSubtitleTracks', get: function() { const t = this.subtitleTrackController; return t ? t.allSubtitleTracks : [] } }, { key: 'subtitleTracks', get: function() { const t = this.subtitleTrackController; return t ? t.subtitleTracks : [] } }, { key: 'subtitleTrack', get: function() { const t = this.subtitleTrackController; return t ? t.subtitleTrack : -1 }, set: function(t) { const e = this.subtitleTrackController; e && (e.subtitleTrack = t) } }, { key: 'media', get: function() { return this._media } }, { key: 'subtitleDisplay', get: function() { const t = this.subtitleTrackController; return !!t && t.subtitleDisplay }, set: function(t) { const e = this.subtitleTrackController; e && (e.subtitleDisplay = t) } }, { key: 'lowLatencyMode', get: function() { return this.config.lowLatencyMode }, set: function(t) { this.config.lowLatencyMode = t } }, { key: 'liveSyncPosition', get: function() { return this.latencyController.liveSyncPosition } }, { key: 'latency', get: function() { return this.latencyController.latency } }, { key: 'maxLatency', get: function() { return this.latencyController.maxLatency } }, { key: 'targetLatency', get: function() { return this.latencyController.targetLatency } }, { key: 'drift', get: function() { return this.latencyController.drift } }, { key: 'forceStartLoad', get: function() { return this.streamController.forceStartLoad } }], [{ key: 'version', get: function() { return '1.5.9' } }, { key: 'Events', get: function() { return S } }, { key: 'ErrorTypes', get: function() { return L } }, { key: 'ErrorDetails', get: function() { return A } }, { key: 'DefaultConfig', get: function() { return t.defaultConfig ? t.defaultConfig : Qs }, set: function(e) { t.defaultConfig = e } }]), t }()); return so.defaultConfig = void 0, so }, typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = i() : typeof define === 'function' && define.amd ? define(i) : (r = typeof globalThis !== 'undefined' ? globalThis : r || self).Hls = i() }(!1))
// # sourceMappingURL=hls.min.js.map